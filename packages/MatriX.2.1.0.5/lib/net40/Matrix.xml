<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Matrix</name>
    </assembly>
    <members>
        <member name="T:Matrix.Attributes.NameAttribute">
            <summary>
            Name attribute which is used to represent the string name of Enumerations in Xml
            </summary>
        </member>
        <member name="M:Matrix.Attributes.NameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Attributes.NameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Matrix.Attributes.NameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Matrix.BareJidComparer">
            <summary>
            BareJidComparer
            </summary>
        </member>
        <member name="P:Matrix.CertificateEventArgs.Certificate">
            <summary>
            Gets or sets the certificate.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="P:Matrix.CertificateEventArgs.Chain">
            <summary>
            Gets or sets the chain.
            </summary>
            <value>
            The chain.
            </value>
        </member>
        <member name="P:Matrix.CertificateEventArgs.SslPolicyErrors">
            <summary>
            Gets or sets the SSL policy errors.
            </summary>
            <value>
            The SSL policy errors.
            </value>
        </member>
        <member name="P:Matrix.CertificateEventArgs.AcceptCertificate">
            <summary>
            Gets or sets a value indicating whether the certificate should be accepted or not.
            </summary>
            <value>
              <c>true</c> to accept the certificate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Matrix.Crypt.ElGamal.ElGamalManaged.NeedToGenerateKey">
            <summary>
            Do we need to generate a key?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Crypt.ElGamal.ElGamalManaged.ImportParameters(Matrix.Crypt.ElGamal.ElGamalParameters)">
            <summary>
            Configure the key settings for this algorithm instance from
            a set of key parameters
            </summary>
            <param name="p_parameters"></param>
        </member>
        <member name="M:Matrix.Extensions.GetErrorMessage``1(``0)">
            <summary>
            Gets the value of the <see cref="T:Matrix.Attributes.ErrorMessageAttribute"/> on an struct, including enums.
            </summary>
            <typeparam name="T">The type of the struct.</typeparam>
            <param name="enumerationValue">A value of type <see cref="T:System.Enum"/></param>
            <returns>
            If the struct has a Description attribute, this method returns the description.  Otherwise it just calls ToString() on the struct.
            </returns>
            <remarks>
            Based on http://stackoverflow.com/questions/479410/enum-tostring/479417#479417, but useful for any struct.
            </remarks>
        </member>
        <member name="M:Matrix.Extensions.GetName``1(``0)">
            <summary>
            Gets the value of the <see cref="T:Matrix.Attributes.NameAttribute"/> on an struct, including enums.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerationValue">The enumeration value.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Extensions.GetErrorCode``1(``0)">
            <summary>
            Gets the value of the <see cref="T:Matrix.Attributes.ErrorCodeAttribute"/> on an struct, including enums.
            </summary>
            <typeparam name="T">The type of the struct.</typeparam>
            <param name="enumerationValue">A value of type <see cref="T:System.Enum"/></param>
            <returns>
            If the struct has a Description attribute, this method returns the description.  Otherwise it just calls ToString() on the struct.
            </returns>
            <remarks>
            Based on http://stackoverflow.com/questions/479410/enum-tostring/479417#479417, but useful for any struct.
            </remarks>
        </member>
        <member name="T:Matrix.FilterData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.FilterData.State">
            <summary>
            state object
            </summary>
        </member>
        <member name="M:Matrix.Idn.NFKC.NormalizeNFKC(System.String)">
            <summary>
            Applies NFKC normalization to a string.
            </summary>
            <param name="sbIn">The string to normalize.</param>
            <returns> An NFKC normalized string.</returns>
        </member>
        <member name="M:Matrix.Idn.NFKC.decomposeIndex(System.Char)">
            <summary>
            Returns the index inside the decomposition table, implemented
            using a binary search.
            </summary>
            <param name="c">Character to look up.</param>
            <returns> Index if found, -1 otherwise.</returns>
        </member>
        <member name="M:Matrix.Idn.NFKC.combiningClass(System.Char)">
            <summary>
            Returns the combining class of a given character.
            </summary>
            <param name="c">The character.</param>
            <returns> The combining class.</returns>
        </member>
        <member name="M:Matrix.Idn.NFKC.canonicalOrdering(System.Text.StringBuilder)">
            <summary>
            Rearranges characters in a stringbuffer in order to respect the
            canonical ordering properties.
            </summary>
            <param name="sbIn">StringBuffer to rearrange.</param>
        </member>
        <member name="M:Matrix.Idn.NFKC.composeIndex(System.Char)">
            <summary>
            Returns the index inside the composition table.		
            </summary>
            <param name="a">Character to look up.</param>
            <returns> Index if found, -1 otherwise.</returns>
        </member>
        <member name="M:Matrix.Idn.NFKC.compose(System.Char,System.Char)">
            <summary>
            Tries to compose two characters canonically.
            </summary>
            <param name="a">First character.</param>
            <param name="b">Second character.</param>
            <returns> The composed character or -1 if no composition could be found.</returns>
        </member>
        <member name="F:Matrix.Idn.NFKC.SBase">
            <summary>
            Entire hangul code copied from:
            http://www.unicode.org/unicode/reports/tr15/
            Several hangul specific constants
            </summary>
        </member>
        <member name="M:Matrix.Idn.NFKC.decomposeHangul(System.Char)">
            <summary>
            Decomposes a hangul character.
            </summary>
            <param name="s">A character to decompose.</param>
            <returns> A string containing the hangul decomposition of the input
            character. If no hangul decomposition can be found, a string
            containing the character itself is returned.</returns>
        </member>
        <member name="M:Matrix.Idn.NFKC.composeHangul(System.Char,System.Char)">
            <summary>
            Composes two hangul characters.
            </summary>
            <param name="a">First character.</param>
            <param name="b">Second character.</param>
            <returns> Returns the composed character or -1 if the two characters cannot be composed.</returns>
        </member>
        <member name="T:Matrix.Idn.StringPrep">
            <summary> This class offers static methods for preparing internationalized
            strings. It supports the following stringprep profiles:
            * RFC3491 nameprep
            * RFC3920 XMPP nodeprep and resourceprep 
            Note that this implementation only supports 16-bit Unicode code
            points.
            </summary>
        </member>
        <member name="M:Matrix.Idn.StringPrep.NamePrep(System.String)">
            <summary> Preps a name according to the Stringprep profile defined in
            RFC3491. Unassigned code points are not allowed.
            *
            </summary>
            <param name="input">the name to prep.
            </param>
            <returns> the prepped name.
            @throws StringprepException If the name cannot be prepped with
            this profile.
            @throws NullPointerException If the name is null.
            
            </returns>
        </member>
        <member name="M:Matrix.Idn.StringPrep.NamePrep(System.String,System.Boolean)">
            <summary> Preps a name according to the Stringprep profile defined in
            RFC3491.
            *
            </summary>
            <param name="input">the name to prep.
            </param>
            <param name="allowUnassigned">true if the name may contain unassigned
            code points.
            </param>
            <returns> the prepped name.
            @throws StringprepException If the name cannot be prepped with
            this profile.
            @throws NullPointerException If the name is null.
            
            </returns>
        </member>
        <member name="F:Matrix.Idn.StringPrep.RFC3920_NODEPREP_PROHIBIT">
            Characters prohibited by RFC3920 nodeprep that aren't defined as
            part of the RFC3454 tables.
        </member>
        <member name="M:Matrix.Idn.StringPrep.NodePrep(System.String)">
            <summary> Preps a node name according to the Stringprep profile defined in
            RFC3920. Unassigned code points are not allowed.
            *
            </summary>
            <param name="input">the node name to prep.
            </param>
            <returns> the prepped node name.
            @throws StringprepException If the node name cannot be prepped
            with this profile.
            @throws NullPointerException If the node name is null.
            
            </returns>
        </member>
        <member name="M:Matrix.Idn.StringPrep.NodePrep(System.String,System.Boolean)">
            <summary>
            Preps a node name according to the Stringprep profile defined in RFC3920.
            </summary>
            <param name="input">the node name to prep.
            </param>
            <param name="allowUnassigned">true if the node name may contain
            unassigned code points.
            </param>
            <returns> the prepped node name.
            @throws StringprepException If the node name cannot be prepped
            with this profile.
            @throws NullPointerException If the node name is null.
            
            </returns>
        </member>
        <member name="M:Matrix.Idn.StringPrep.ResourcePrep(System.String)">
            <summary>
            Preps a resource name according to the Stringprep profile defined
            in RFC3920. Unassigned code points are not allowed.
            </summary>
            <param name="input">the resource name to prep.
            </param>
            <returns> the prepped node name.
            @throws StringprepException If the resource name cannot be prepped
            with this profile.
            @throws NullPointerException If the resource name is null.
            
            </returns>
        </member>
        <member name="M:Matrix.Idn.StringPrep.ResourcePrep(System.String,System.Boolean)">
            <summary>
            Preps a resource name according to the Stringprep profile defined
            in RFC3920.
            </summary>
            <param name="input">the resource name to prep.
            </param>
            <param name="allowUnassigned">true if the resource name may contain
            unassigned code points.
            </param>
            <returns>
            the prepped node name.
            @throws StringprepException If the resource name cannot be prepped
            with this profile.
            @throws NullPointerException If the resource name is null.
            
            </returns>        
        </member>
        <member name="T:Matrix.IO.Cache.Cache">
            <summary>
            The root XML element of the cache file
            </summary>
        </member>
        <member name="T:Matrix.IO.Cache.FileStorage`1">
            <summary>
            This is a key value storage implemented in a simple flat xml file.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Matrix.IO.Cache.FileStorage`1.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="M:Matrix.IO.Cache.FileStorage`1.Clear">
            <summary>
            Clears all values.
            </summary>
        </member>
        <member name="P:Matrix.IO.Cache.FileStorage`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:Matrix.IO.Cache.FileStorage`1.Contains(System.String)">
            <summary>
            is the given key in the cache?
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>
              <c>true</c> if the given key is in the cache; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Matrix.IO.Cache.FileStorage`1.Add(System.String,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The val.</param>
        </member>
        <member name="P:Matrix.IO.Cache.FileStorage`1.Item(System.String)">
            <summary>
            Gets or sets the <see cref="!:T"/> with the specified key.
            </summary>
        </member>
        <member name="M:Matrix.IO.Cache.FileStorage`1.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.IO.Cache.FileStorage`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.IO.Cache.FileStorage`1.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:Matrix.IO.Cache.FileStorage`1.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:Matrix.IO.Cache.IKeyValueStorage`1">
            <summary>
            Interface for key value storage providers which can be passed to MatriX.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Matrix.IO.Cache.IKeyValueStorage`1.Clear">
            <summary>
            Clears all values.
            </summary>
        </member>
        <member name="P:Matrix.IO.Cache.IKeyValueStorage`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:Matrix.IO.Cache.IKeyValueStorage`1.Contains(System.String)">
            <summary>
            is the given key in the cache?
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>
              <c>true</c> if the given key is in the cache; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Matrix.IO.Cache.IKeyValueStorage`1.Add(System.String,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The val.</param>
        </member>
        <member name="P:Matrix.IO.Cache.IKeyValueStorage`1.Item(System.String)">
            <summary>
            Gets or sets the <see cref="!:T"/> with the specified key.
            </summary>
        </member>
        <member name="M:Matrix.IO.Cache.IKeyValueStorage`1.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.IO.Cache.IKeyValueStorage`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.IO.Cache.IKeyValueStorage`1.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:Matrix.IO.Cache.IKeyValueStorage`1.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:Matrix.IO.Cache.MemoryStorage`1">
            <summary>
            This is a key value in memory storage. This means all info gets lost when the application gets disposed.
            This is the default storage provider when you other provider gets set.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Matrix.IO.Cache.MemoryStorage`1.Clear">
            <summary>
            Clears all values.
            </summary>
        </member>
        <member name="P:Matrix.IO.Cache.MemoryStorage`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:Matrix.IO.Cache.MemoryStorage`1.Contains(System.String)">
            <summary>
            is the given key in the cache?
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>
              <c>true</c> if the given key is in the cache; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Matrix.IO.Cache.MemoryStorage`1.Add(System.String,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The val.</param>
        </member>
        <member name="P:Matrix.IO.Cache.MemoryStorage`1.Item(System.String)">
            <summary>
            Gets or sets the <see cref="!:T"/> with the specified key.
            </summary>
        </member>
        <member name="M:Matrix.IO.Cache.MemoryStorage`1.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.IO.Cache.MemoryStorage`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.IO.Cache.MemoryStorage`1.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:Matrix.IO.Cache.MemoryStorage`1.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:Matrix.IO.Cache.Value">
            <summary>
            The value xml element of the cache file.
            </summary>
        </member>
        <member name="T:Matrix.IO.Compression.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="T:Matrix.IO.Compression.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="T:Matrix.IO.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.SetStrategy(Matrix.IO.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="T:Matrix.IO.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="T:Matrix.IO.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:Matrix.IO.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.#ctor(Matrix.IO.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:Matrix.IO.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>		
            <returns>Return true if input is needed via <see cref="M:Matrix.IO.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="P:Matrix.IO.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:Matrix.IO.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:Matrix.IO.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:Matrix.IO.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="T:Matrix.IO.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:Matrix.IO.Compression.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.Tree.CalcBLFreq(Matrix.IO.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.Tree.WriteTree(Matrix.IO.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="F:Matrix.IO.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.#ctor(Matrix.IO.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="T:Matrix.IO.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:Matrix.IO.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:Matrix.IO.Compression.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:Matrix.IO.Compression.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:Matrix.IO.Compression.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:Matrix.IO.Compression.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:Matrix.IO.Compression.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:Matrix.IO.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:Matrix.IO.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:Matrix.IO.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:Matrix.IO.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:Matrix.IO.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.InflaterHuffmanTree.GetSymbol(Matrix.IO.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:Matrix.IO.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:Matrix.IO.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="P:Matrix.IO.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="P:Matrix.IO.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output array.</param>
            <param name="offset">The offset into output array.</param>
            <param name="length">The maximum number of bytes to store.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:Matrix.IO.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="T:Matrix.IO.Compression.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:Matrix.IO.Compression.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:Matrix.IO.Compression.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Matrix.IO.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.OutputWindow.CopyStored(Matrix.IO.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:Matrix.IO.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:Matrix.IO.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:Matrix.IO.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:Matrix.IO.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="P:Matrix.IO.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:Matrix.IO.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="P:Matrix.IO.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:Matrix.IO.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="M:Matrix.IO.Compression.CompressionHelper.Compress(System.Byte[])">
            <summary>
            Compress bytes
            </summary>
            <param name="bIn"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.IO.Compression.CompressionHelper.Decompress(System.Byte[])">
            <summary>
            Decompress bytes
            </summary>
            <param name="bIn">The b in.</param>
            <returns></returns>
        </member>
        <member name="T:Matrix.License.BlackList">
            <summary>
            Blacklisted license keys
            </summary>
        </member>
        <member name="P:Matrix.License.Customer.Name">
            <summary>
            Gets or sets the customer name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Matrix.License.Customer.Company">
            <summary>
            Gets or sets the company name.
            </summary>
            <value>The company.</value>
        </member>
        <member name="P:Matrix.License.Customer.Email">
            <summary>
            Gets or sets the email address.
            </summary>
            <value>The company.</value>
        </member>
        <member name="T:Matrix.License.LicenseError">
            <summary>
            License Error
            </summary>
        </member>
        <member name="F:Matrix.License.LicenseError.None">
             <summary>
            no error, license is valid.
             </summary>
        </member>
        <member name="F:Matrix.License.LicenseError.UpdateExpired">
            <summary>
            update contract expired, license not valid for this assembly.
            </summary>
        </member>
        <member name="F:Matrix.License.LicenseError.InvalidSignature">
            <summary>
            invalid signature.
            </summary>
        </member>
        <member name="F:Matrix.License.LicenseError.InvalidProduct">
            <summary>
            license does not match for this product.
            </summary>
        </member>
        <member name="F:Matrix.License.LicenseError.EvaluationExpired">
            <summary>
            The evaluation period expired
            </summary>
        </member>
        <member name="F:Matrix.License.LicenseError.Revoked">
            <summary>
            License has been revoked or blacklisted
            </summary>
        </member>
        <member name="F:Matrix.License.DlgLicense.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Matrix.License.DlgLicense.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Matrix.License.DlgLicense.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Matrix.License.License">
            <summary>
            Licence Xml object
            </summary>
        </member>
        <member name="P:Matrix.License.License.Version">
            <summary>
            Gets the version number of the license Xml.
            When no version tag exists then it returns 0.
            
            0: first version did not have any version tag, so return 0
            1: version='1', fixed overflow in signing, added hashing.
            </summary>
        </member>
        <member name="P:Matrix.License.License.ProductId">
            <summary>
            Gets or sets the product id.
            </summary>
            <value>The product id.</value>
        </member>
        <member name="P:Matrix.License.License.Quantity">
            <summary>
            The number of developers valid vor this license.
            </summary>
        </member>
        <member name="P:Matrix.License.License.Customer">
            <summary>
            Gets or sets the customer object.
            </summary>
            <value>The customer.</value>
        </member>
        <member name="P:Matrix.License.License.UpdateExpireDate">
            <summary>
            Gets or sets the update expire date.
            When the customer downloads a release newer than this date it will not work
            </summary>
            <value>The update expire date.</value>
        </member>
        <member name="P:Matrix.License.License.DemoExpireDate">
            <summary>
            Gets or sets the demo expire date.
            This makes it possible to create license keys for evaluation purpose which expire
            at a specific date.
            </summary>
            <value>The demo expire date.</value>
        </member>
        <member name="P:Matrix.License.License.Signature">
            <summary>
            Gets or sets the ElGamel signature.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="M:Matrix.License.License.Validate">
            <summary>
            Validates the License.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.License.License.UpdateContractValid">
            <summary>
            is the update contract still valid for this assembly?
            </summary>
        </member>
        <member name="P:Matrix.License.License.AssemblyDate">
            <summary>
            Gets the Date when this Assembly was compiled
            </summary>
            <value>The assembly date.</value>
        </member>
        <member name="P:Matrix.License.LicenseManager.IsValid">
            <summary>
            was the licence Validated succesful?
            </summary>
        </member>
        <member name="P:Matrix.License.LicenseManager.LicenseError">
            <summary>
            Gets the license error.
            </summary>
            <value>The license error.</value>
        </member>
        <member name="T:Matrix.MessageFilter">
            <summary>
            Use the MessageFilter to listen for messages from given Jids. 
            </summary>
        </member>
        <member name="M:Matrix.MessageFilter.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.MessageFilter"/> class.
            </summary>
            <param name="con">The con.</param>
        </member>
        <member name="M:Matrix.MessageFilter.Add(Matrix.Jid,System.Collections.Generic.IComparer{Matrix.Jid},System.EventHandler{Matrix.Xmpp.Client.MessageEventArgs})">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="jid">The jid.</param>
            <param name="comparer">The comparer.</param>
            <param name="eh">The eh.</param>
            <returns>true when the filter was added, false when it couldn't be added</returns>
        </member>
        <member name="M:Matrix.MessageFilter.Add(Matrix.Jid,System.Collections.Generic.IComparer{Matrix.Jid},System.EventHandler{Matrix.Xmpp.Client.MessageEventArgs},System.Object)">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="jid">The jid.</param>
            <param name="comparer">The comparer.</param>
            <param name="eh">The eh.</param>
            <param name="state">optional state object.</param>
            <returns>
            true when the filter was added, false when it couldn't be added
            </returns>
        </member>
        <member name="M:Matrix.MessageFilter.Remove(System.String)">
            <summary>
            Unsubscribe from a Message filter
            </summary>
            <param name="id">The Jid which should be unsubscribed</param>
        </member>
        <member name="T:Matrix.Namespaces">
            <summary>
            XMPP namespaces
            </summary>
        </member>
        <member name="F:Matrix.Namespaces.Stream">
            <summary>http://etherx.jabber.org/streams</summary>
        </member>
        <member name="F:Matrix.Namespaces.Client">
            <summary>Client to Server default namespace</summary>
        </member>
        <member name="F:Matrix.Namespaces.Server">
            <summary>Server to Server default namespace</summary>
        </member>
        <member name="F:Matrix.Namespaces.ServerDialback">
            <summary>Server Dialback</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqAgents">
            <summary>
            jabber:iq:agents
            </summary>
        </member>
        <member name="F:Matrix.Namespaces.IqRoster">
            <summary>
            jabber:iq:roster
            </summary>
        </member>
        <member name="F:Matrix.Namespaces.IqAuth">
            <summary>
            jabber:iq:auth
            </summary>
        </member>
        <member name="F:Matrix.Namespaces.IqRegister">
            <summary>
            jabber:iq:register
            </summary>
        </member>
        <member name="F:Matrix.Namespaces.IqOob">
            <summary>jabber:iq:oob</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqLast">
            <summary>jabber:iq:last</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqTime">
            <summary>jabber:iq:time</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqVersion">
            <summary>jabber:iq:version</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqBrowse">
            <summary>jabber:iq:browse</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqSearch">
            <summary>jabber:iq:search</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqAvatar">
            <summary>jabber:iq:avatar</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqPrivate">
            <summary>jabber:iq:private</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqPrivacy">
            <summary>jabber:iq:privacy</summary>
        </member>
        <member name="F:Matrix.Namespaces.IqRpc">
            <summary>XEP-0009: Jabber-RPC (jabber:iq:rpc)</summary>
        </member>
        <member name="F:Matrix.Namespaces.XOob">
            <summary>jabber:x:oob</summary>
        </member>
        <member name="F:Matrix.Namespaces.XDelay">
            <summary>XEP-0091: Delayed Delivery (jabber:x:delay)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Delay">
            <summary>XEP-0203: Delayed Delivery (urn:xmpp:delay)</summary>
        </member>
        <member name="F:Matrix.Namespaces.XEvent">
            <summary>(jabber:x:event)</summary>
        </member>
        <member name="F:Matrix.Namespaces.XAvatar">
            <summary>(jabber:x:avatar)</summary>
        </member>
        <member name="F:Matrix.Namespaces.XConference">
            <summary>(jabber:x:conference)</summary>
        </member>
        <member name="F:Matrix.Namespaces.XData">
            <summary>
            (jabber:x:data)
            </summary>
        </member>
        <member name="F:Matrix.Namespaces.XRosterX">
            <summary>XEP-0144: Roster Item Exchange (http://jabber.org/protocol/rosterx)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Muc">
            <summary>XEP-0045: Multi User Chat (http://jabber.org/protocol/muc)</summary>
        </member>
        <member name="F:Matrix.Namespaces.MucUser">
            <summary>XEP-0045: Multi User Chat (http://jabber.org/protocol/muc#user)</summary>
        </member>
        <member name="F:Matrix.Namespaces.MucAdmin">
            <summary>XEP-0045: Multi User Chat (http://jabber.org/protocol/muc#admin)</summary>
        </member>
        <member name="F:Matrix.Namespaces.MucOwner">
            <summary>XEP-0045: Multi User Chat (http://jabber.org/protocol/muc#owner)</summary>
        </member>
        <member name="F:Matrix.Namespaces.DiscoItems">
            <summary>XEP-0030: Service Disovery (http://jabber.org/protocol/disco#items)</summary>
        </member>
        <member name="F:Matrix.Namespaces.DiscoInfo">
            <summary>XEP-0030: Service Disovery (http://jabber.org/protocol/disco#info)</summary>
        </member>
        <member name="F:Matrix.Namespaces.StorageAvatar">
            <summary>(storage:client:avatar)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Vcard">
            <summary>(vcard-temp)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Streams">
            <summary>(urn:ietf:params:xml:ns:xmpp-streams)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Stanzas">
            <summary>(urn:ietf:params:xml:ns:xmpp-stanzas)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Tls">
            <summary>Tls namespace (urn:ietf:params:xml:ns:xmpp-tls)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Sasl">
            <summary>Sasl (urn:ietf:params:xml:ns:xmpp-sasl)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Session">
            <summary>Session (urn:ietf:params:xml:ns:xmpp-session)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Bind">
            <summary>Bind (urn:ietf:params:xml:ns:xmpp-bind)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Accept">
            <summary>Component (jabber:component:accept)</summary>
        </member>
        <member name="F:Matrix.Namespaces.SaslHostname0">
            <summary>urn:xmpp:domain-based-name:0</summary>
        </member>
        <member name="F:Matrix.Namespaces.SaslHostname1">
            <summary>urn:xmpp:domain-based-name:1</summary>
        </member>
        <member name="F:Matrix.Namespaces.FeatureAuth">
            <summary>stream feature for old jabebr style authentication (http://jabber.org/features/iq-auth)</summary>
        </member>
        <member name="F:Matrix.Namespaces.FeatureIqRegister">
            <summary>(http://jabber.org/features/iq-register)</summary>
        </member>
        <member name="F:Matrix.Namespaces.FeatureCompress">
            <summary>Stream Compression (http://jabber.org/features/compress)</summary>
        </member>
        <member name="F:Matrix.Namespaces.FeatureRosterVersioning">
            <summary>XEP-0237: Roster Versioning (urn:xmpp:features:rosterver)</summary>
        </member>
        <member name="F:Matrix.Namespaces.FeatureStreamManagement">
            <summary>XEP-0198: Stream Management (urn:xmpp:sm:3)</summary>
        </member>
        <member name="F:Matrix.Namespaces.FeatureBidi">
            <summary> Bidirectional Server-to-Server Connections</summary>
        </member>
        <member name="F:Matrix.Namespaces.Shim">
            <summary>XEP-0131: Stanza Headers and Internet Metadata (http://jabber.org/protocol/shim)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Primary">
            <summary>(http://jabber.org/protocol/primary)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Nick">
            <summary>XEP-0172: User nickname (http://jabber.org/protocol/nick)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Chatstates">
            <summary>XEP-0085 Chat State Notifications (http://jabber.org/protocol/chatstates)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Compress">
            <summary>XEP-0138: Stream Compression (http://jabber.org/protocol/compress)</summary>
        </member>
        <member name="F:Matrix.Namespaces.FeatureNeg">
            <summary>XEP-0020: Feature Negotiation (http://jabber.org/protocol/feature-neg)</summary>
        </member>
        <member name="F:Matrix.Namespaces.SI">
            <summary>XEP-0095 (http://jabber.org/protocol/si)</summary>
        </member>
        <member name="F:Matrix.Namespaces.SIProfileFileTransfer">
            <summary>XEP-0096 (http://jabber.org/protocol/si/profile/file-transfer)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Bytestreams">
            <summary>XEP-0065: SOCKS5 bytestreams (http://jabber.org/protocol/bytestreams)</summary>
        </member>
        <member name="F:Matrix.Namespaces.RosterDelimiter">
            <summary>
            XEP-0083 (roster:delimiter)
            </summary>
        </member>
        <member name="F:Matrix.Namespaces.XhtmlIm">
            <summary>XEP-0071: XHTML-IM (http://jivesoftware.com/xmlns/phone)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Xhtml">
            <summary>(http://www.w3.org/1999/xhtml)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Caps">
            <summary>XEP-0115: Entity Capabilities (http://jabber.org/protocol/caps)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Geoloc">
            <summary>GeoLoc (http://jabber.org/protocol/geoloc)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Ping">
            <summary>XMPP ping (urn:xmpp:ping)</summary>
        </member>
        <member name="F:Matrix.Namespaces.AdHocCommands">
            <summary>Ad-Hoc Commands (http://jabber.org/protocol/commands)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Pubsub">
            <summary>XEP-0060: Publish-Subscribe (http://jabber.org/protocol/pubsub)</summary>
        </member>
        <member name="F:Matrix.Namespaces.PubsubEvent">
            <summary>XEP-0060: Publish-Subscribe (http://jabber.org/protocol/pubsub#event)</summary>
        </member>
        <member name="F:Matrix.Namespaces.PubsubOwner">
            <summary>XEP-0060: Publish-Subscribe (http://jabber.org/protocol/pubsub#owner)</summary>
        </member>
        <member name="F:Matrix.Namespaces.HttpBind">
            <summary>XEP-0124: Http-Binding  (http://jabber.org/protocol/httpbind)</summary>
        </member>
        <member name="F:Matrix.Namespaces.XmppXBosh">
            <summary>(urn:xmpp:xbosh)</summary>
        </member>
        <member name="F:Matrix.Namespaces.MessageReceipts">
            <summary>XEP-0184: Message Receipts (urn:xmpp:receipts)</summary>
        </member>
        <member name="F:Matrix.Namespaces.StorageBookmarks">
            <summary>XEP-0048: Bookmark Storage (storage:bookmarks)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Ibb">
            <summary>XEP-0047: In-Band Bytestreams (http://jabber.org/protocol/ibb)</summary>
        </member>
        <member name="F:Matrix.Namespaces.AMP">
            <summary>XEP-0079: Advanced Message Processing (http://jabber.org/protocol/amp)</summary>
        </member>
        <member name="F:Matrix.Namespaces.VcardUpdate">
            <summary>XEP-0153: vCard-Based Avatars (vcard-temp:x:update)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Jingle">
            <summary>Jingle</summary>
        </member>
        <member name="F:Matrix.Namespaces.JingleTransportIbb">
            <summary>urn:xmpp:jingle:transports:ibb:1</summary>
        </member>
        <member name="F:Matrix.Namespaces.JingleTransportRawUdp">
            <summary>urn:xmpp:jingle:transports:raw-udp:1</summary>
        </member>
        <member name="F:Matrix.Namespaces.JingleTransportIceUdp">
            <summary>urn:xmpp:jingle:transports:ice-udp:1</summary>
        </member>
        <member name="F:Matrix.Namespaces.JingleAppsRtp">
            <summary>urn:xmpp:jingle:apps:rtp:1</summary>
        </member>
        <member name="F:Matrix.Namespaces.Time">
            <summary>XEP-0202: Entity Time (urn:xmpp:time)</summary>
        </member>
        <member name="F:Matrix.Namespaces.ExtendedStanzaAdressing">
            <summary>XEP-0033: Extended Stanza Addressing (http://jabber.org/protocol/address)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Attention">
            <summary>XEP-0224: Attention (urn:xmpp:attention:0)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Rsm">
            <summary>XEP-0059: Result Set Management (http://jabber.org/protocol/rsm)</summary>
        </member>
        <member name="F:Matrix.Namespaces.WlmJidLookup">
            <summary>http://messenger.live.com/xmpp/jidlookup</summary>
        </member>
        <member name="F:Matrix.Namespaces.GooglePush">
            <summary>google:push</summary>
        </member>
        <member name="F:Matrix.Namespaces.GoogleMobileData">
            <summary>google:mobile:data</summary>
        </member>
        <member name="F:Matrix.Namespaces.Blocking">
            <summary>XEP-0191: Blocking Command (urn:xmpp:blocking)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Mood">
            <summary>XEP-0107: User Mood (http://jabber.org/protocol/mood)</summary>
        </member>
        <member name="F:Matrix.Namespaces.Tune">
            <summary>
            XEP-0118: User Tune (http://jabber.org/protocol/tune)
            </summary>
        </member>
        <member name="F:Matrix.Namespaces.SecurityLabel">
            <summary>urn:xmpp:sec-label:0</summary>
        </member>
        <member name="F:Matrix.Namespaces.SecurityLabelEss">
            <summary>urn:xmpp:sec-label:ess:0</summary>
        </member>
        <member name="F:Matrix.Namespaces.SecurityLabelCatalog">
            <summary>urn:xmpp:sec-label:catalog:2</summary>
        </member>
        <member name="F:Matrix.Namespaces.Archiving">
            <summary>urn:xmpp:archive</summary>
        </member>
        <member name="F:Matrix.Namespaces.MessageCarbons">
            <summary>XEP-0280: Message Carbons</summary>
        </member>
        <member name="F:Matrix.Namespaces.LastMessageCorrection">
            <summary>XEP-0308: Last Message Correction</summary>
        </member>
        <member name="T:Matrix.Net.AsyncUserToken">
            <summary>
            This class is designed for use as the object to be assigned to the SocketAsyncEventArgs.UserToken property. 
            </summary>
        </member>
        <member name="P:Matrix.Net.BoshSessionRequestEventArgs.Wait">
            <summary>
            Specifies the longest time (in seconds) that the connection manager is allowed to wait before responding to any request during the session. 
            This enables the client to limit the delay before it discovers any network failure, and to prevent its HTTP/TCP connection from expiring due to inactivity.
            </summary>
            <value>
            The wait.
            </value>
        </member>
        <member name="P:Matrix.Net.BoshSessionRequestEventArgs.Secure">
            <summary>
            Gets or sets a value indicating whether this Bosh session is secure or not.
            All sessions (except of prebind) are secure by default. When a session is secure key sequencing is used.
            </summary>
            <value>
              <c>true</c> if secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Net.BoshSocket.Wait">
            <summary>
            The longest time (in seconds) that the connection manager is allowed to wait before responding to any request during the session.
            This enables the client to prevent its TCP connection from expiring due to inactivity, as well as to limit the delay before 
            it discovers any network failure.
            </summary>
        </member>
        <member name="P:Matrix.Net.BoshSocket.KeepAlive">
            <summary>
            Keep Alive for Webrequests
            </summary>
        </member>
        <member name="P:Matrix.Net.BoshSocket.Hold">
            <summary>
            This attribute specifies the maximum number of requests the connection manager is allowed to keep waiting 
            at any one time during the session. If the client is not able to use HTTP Pipelining then this SHOULD be set to "1".
            </summary>
        </member>
        <member name="P:Matrix.Net.BoshSocket.MaxPause">
            <summary>
            If the connection manager supports session pausing (see Inactivity) then it SHOULD advertise that to the client 
            by including a 'maxpause' attribute in the session creation response element. 
            The value of the attribute indicates the maximum length of a temporary session pause (in seconds) that a client MAY request.
            0 is the default value and indicated that the connection manager supports no session pausing.
            </summary>
        </member>
        <member name="P:Matrix.Net.BoshSocket.SenderThreadInterval">
            <summary>
            Interval in milliseconds of the sender thread. The sender thread checks in this interal if new WebRequests must be sent to the server an if
            data for sending is available. The default interval is 500ms.
            </summary>
        </member>
        <member name="P:Matrix.Net.BoshSocket.Rid">
            <summary>
            the last Rid
            </summary>
        </member>
        <member name="M:Matrix.Net.BoshSocket.GetOtherRequest(Matrix.Net.WebRequestHelper)">
            <summary>
            returns the other request object
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:Matrix.Net.BoshSocket.OneCanSend">
            <summary>
            Can one of the WebRequests be used ofr sending data?
            </summary>
        </member>
        <member name="P:Matrix.Net.BoshSocket.NoneBusy">
            <summary>
            No WebRequest is busy, both are free.
            </summary>
        </member>
        <member name="M:Matrix.Net.BoshSocket.AbortAll">
            <summary>
            Cancels all open requests
            </summary>
        </member>
        <member name="M:Matrix.Net.BoshSocket.StartTls">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Net.BoshSocket.GenerateKeys">
            <summary>
            Generates a bunch of keys
            </summary>
        </member>
        <member name="P:Matrix.Net.BoshSocket.InactiveLeft">
            <summary>
            inactivity check, returns time left before we reach inactivity. Negative value meand session is inactive
            </summary>
        </member>
        <member name="T:Matrix.Net.BytestreamsSocket">
            <summary>
            Use async sockets to connect, send and receive data over TCP sockets.
            </summary>
        </member>
        <member name="F:Matrix.Net.BytestreamsSocket.m_Lock">
            <summary>
            Object for synchronizing threads
            </summary>
        </member>
        <member name="M:Matrix.Net.BytestreamsSocket.BuildHash">
            <summary>
            SHA1 Hash of: (SID + Initiator JID + Target JID)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.Net.BytestreamsSocket.Connected">
            <summary>
            Returns true if the socket is connected to the server. The property 
            Socket.Connected does not always indicate if the socket is currently 
            connected, this polls the socket to determine the latest connection state.
            </summary>
        </member>
        <member name="M:Matrix.Net.BytestreamsSocket.Disconnect">
            <summary>
            Disconnect from the server.
            </summary>
        </member>
        <member name="M:Matrix.Net.BytestreamsSocket.Send(System.Byte[])">
            <summary>
            Send data to the server.
            </summary>
        </member>
        <member name="M:Matrix.Net.BytestreamsSocket.Receive">
            <summary>
            Read data from server.
            </summary>
        </member>
        <member name="T:Matrix.Net.ClientSocket">
            <summary>
            A implementation of a client to server socket
            </summary>    
        </member>
        <member name="P:Matrix.Net.ClientSocket.OldStyleSsl">
            <summary>
            enable/disable old style SSL.
            </summary>
            <value>
              <c>true</c> if old style SSL is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Matrix.Net.ClientSocket.StartTls">
            <summary>
            Start Tls on the socket
            </summary>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:Matrix.Net.ClientSocket.DoStartSsl">
            <summary>
            Init old style SSL connection
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Matrix.Net.ClientSocket.StartTlsAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Starts the TLS as server.
            </summary>
            <param name="serverCertificate">The server certificate.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Net.ClientSocket.DoStartSecurityLayer(System.Security.Authentication.SslProtocols)">
            <summary>
            Does the start TLS.
            </summary>
            <param name="protocol">The protocol.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Net.ClientSocket.SelectLocalCertificate(System.Object,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String[])">
            <summary>
            Selects the local certificate.
            </summary>
            <param name="sender">The sender.</param>
            <param name="targetHost">The target host.</param>
            <param name="localCertificates">The local certificates.</param>
            <param name="remoteCertificate">The remote certificate.</param>
            <param name="acceptableIssuers">The acceptable issuers.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Net.ClientSocket.#ctor(Matrix.XmppStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Net.ClientSocket"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Matrix.Net.ClientSocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            pass a already connected socket instance to the Clientsocket 
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Matrix.Net.ClientSocket.ResolveDns">
            <summary>
            Begins an asynchronous request to resolve a DNS host name or IP address in dotted-quad notation to an IPAddress instance.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">There was an error while trying to resolve the host.</exception>
        </member>
        <member name="M:Matrix.Net.ClientSocket.OnDnsResolved(System.IAsyncResult)">
            <summary>
            Called when the specified hostname has been resolved.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Matrix.Net.ClientSocket.CreateSocket(System.Net.IPAddress)">
            <summary>
            Creates either a v4 or v6 socket depending on the OS support and ip address.
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Net.ClientSocket.EndConnectProxy(System.Exception)">
            <summary>
            Called when the Socket has finished talking to the proxy server and is ready to relay data.
            </summary>
            <param name="error">The error to throw when the EndConnect method is called.</param>
        </member>
        <member name="M:Matrix.Net.ClientSocket.Receive">
            <summary>
            Setup receive callback
            </summary>
        </member>
        <member name="M:Matrix.Net.ClientSocket.Send(System.Byte[])">
            <summary>
            Send data to the server.
            </summary>
        </member>
        <member name="M:Matrix.Net.ClientSocket.Disconnect">
            <summary>
            Disconnect from the server.
            </summary>
        </member>
        <member name="M:Matrix.Net.ClientSocket.Connect(System.String,System.Int32)">
            <summary>
            Connect asynchronous to thegiven host and port
            </summary>
        </member>
        <member name="M:Matrix.Net.ClientSocket.Connect">
            <summary>
            Conects asynchronous to the host:port
            </summary>
        </member>
        <member name="P:Matrix.Net.SocketData.State">
            <summary>
            state object
            </summary>
        </member>
        <member name="T:Matrix.Net.TlsException">
            <summary>
            TlsException
            </summary>
        </member>
        <member name="M:Matrix.Net.TlsException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Net.TlsException" /> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Matrix.Net.WebRequestHelper.Execute(System.Boolean)">
            <summary>
            Starts the webrequest. The webrequest gets staret only when we have data to post.
            </summary>
        </member>
        <member name="M:Matrix.Net.WebRequestHelper.OnGetRequestStream(System.IAsyncResult)">
            <summary>
            writes data to the HTTP request
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Matrix.Net.WebRequestHelper.OnGetResponse(System.IAsyncResult)">
            <summary>
            Processes the response of a webRequest
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Matrix.Net.WebRequestHelper.Abort">
            <summary>
            Aborts the Webrequest
            </summary>
        </member>
        <member name="P:Matrix.Net.WebRequestHelper.LastSend">
            <summary>
            Timestamp of the last successful submitted stanza
            </summary>
        </member>
        <member name="T:Matrix.Net.SynchronousConnectException">
            <summary>
            Exception for synchronous connects. This Exception is used internal only.
            </summary>
        </member>
        <member name="T:Matrix.Net.BaseSocket">
            <summary>
            Abstract socket base class
            </summary>
        </member>
        <member name="P:Matrix.Net.BaseSocket.Hostname">
            <summary>
            dns name or ip address
            </summary>
        </member>
        <member name="P:Matrix.Net.BaseSocket.XmppDomain">
            <summary>
            Xmpp domain, we need this for certificate validation on Tls
            </summary>
        </member>
        <member name="P:Matrix.Net.BaseSocket.ResolveSrvRecords">
            <summary>
            Should SRV records be resolved? (used in WinRT socket only yet)
            </summary>
        </member>
        <member name="P:Matrix.Net.BaseSocket.Port">
            <summary>
            Port number
            </summary>
        </member>
        <member name="P:Matrix.Net.BaseSocket.ClientCertificate">
            <summary>
            Gets or sets the client certificate.
            </summary>
            <value>The client certificate.</value>
        </member>
        <member name="P:Matrix.Net.BaseSocket.Connected">
            <summary>
            are we conencted?
            </summary>
        </member>
        <member name="P:Matrix.Net.BaseSocket.SupportsStartTls">
            <summary>
            is encryption supported by this layer?
            </summary>
        </member>
        <member name="P:Matrix.Net.BaseSocket.SupportsCompression">
            <summary>
            is compression supported by this layer?
            </summary>
        </member>
        <member name="M:Matrix.Net.BaseSocket.Reset">
            <summary>
            Added for Bosh because we have to tell the BoshClientSocket when to reset the stream
            </summary>
        </member>
        <member name="M:Matrix.Net.BaseSocket.Send(System.String)">
            <summary>
            Send data over the socket.
            </summary>
            <param name="data">The data.</param>
            <returns>A unique packet id</returns>
        </member>
        <member name="M:Matrix.Net.BaseSocket.Send(System.Byte[])">
            <summary>
            Send data over the socket.
            </summary>
            <param name="bData">The b data.</param>
            <returns>A unique packet id</returns>
        </member>
        <member name="M:Matrix.Net.BaseSocket.Send(Matrix.Xml.XmppXElement)">
            <summary>
            Send a XmppXElement over the socket.
            </summary>
            <param name="el">The el.</param>
            <returns>A unique packet id</returns>
        </member>
        <member name="T:Matrix.Net.BoshException">
            <summary>
            Exceptions which occur in BOSH. The underlaying Exception is usually a WebException
            </summary>
        </member>
        <member name="M:Matrix.Net.BoshException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Net.BoshException"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Net.BoshException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Net.BoshException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Matrix.Net.BoshException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Net.BoshException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="canRecover">if set to <c>true</c> [can recover].</param>
        </member>
        <member name="M:Matrix.Net.BoshException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Net.BoshException"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Matrix.Net.BoshException.#ctor(System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Net.BoshException"/> class.
            </summary>
            <param name="ex">The ex.</param>
            <param name="canRecover">if set to <c>true</c> [can recover].</param>
        </member>
        <member name="P:Matrix.Net.BoshException.CanRecover">
            <summary>
            When true then the Bosh session can be recovered and MatriX will try to.
            Otherwise this is an unrecoverable error which results in close of the session. 
            If MatriX sais this error in unrecoverable butu you still think the session can be
            recovered then set CanRevover to true in the OnError handler and MatriX will
            continue to send requests. Some http proxies or Apache with mod_proxy can return
            HTTP errors which cab be ignored in some environents, but cause an immediate
            disconnect according to the Bosh specs.
            </summary>
        </member>
        <member name="T:Matrix.Net.Proxy.AuthMethod">
            <summary>
            Implements a SOCKS authentication scheme.
            </summary>
            <remarks>This is an abstract class; it must be inherited.</remarks>
        </member>
        <member name="M:Matrix.Net.Proxy.AuthMethod.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthMethod instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.AuthMethod.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
            <exception cref="T:Matrix.Net.Proxy.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.AuthMethod.BeginAuthenticate(Matrix.Net.Proxy.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <exception cref="T:Matrix.Net.Proxy.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="P:Matrix.Net.Proxy.AuthMethod.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>The socket connection with the proxy server.</value>
        </member>
        <member name="P:Matrix.Net.Proxy.AuthMethod.Buffer">
            <summary>
            Gets or sets a byt array that can be used to store data.
            </summary>
            <value>A byte array to store data.</value>
        </member>
        <member name="P:Matrix.Net.Proxy.AuthMethod.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="F:Matrix.Net.Proxy.AuthMethod.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.AuthMethod.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.AuthMethod.CallBack">
            <summary>Holds the address of the method to call when the proxy has authenticated the client.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.AuthMethod.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="T:Matrix.Net.Proxy.Authentication.AuthNone">
            <summary>
            This class implements the 'No Authentication' scheme.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.Authentication.AuthNone.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthNone instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.Authentication.AuthNone.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.Authentication.AuthNone.BeginAuthenticate(Matrix.Net.Proxy.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <remarks>This method immediately calls the callback method.</remarks>
        </member>
        <member name="T:Matrix.Net.Proxy.AuthUserPass">
            <summary>
            This class implements the 'username/password authentication' scheme.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.AuthUserPass.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initializes a new AuthUserPass instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.AuthUserPass.GetAuthenticationBytes">
            <summary>
            Creates an array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.
            </summary>
            <returns>An array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.</returns>
        </member>
        <member name="M:Matrix.Net.Proxy.AuthUserPass.Authenticate">
            <summary>
            Starts the authentication process.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.AuthUserPass.BeginAuthenticate(Matrix.Net.Proxy.HandShakeComplete)">
            <summary>
            Starts the asynchronous authentication process.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.AuthUserPass.OnSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.AuthUserPass.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the socket received an authentication reply.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="P:Matrix.Net.Proxy.AuthUserPass.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>The username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Matrix.Net.Proxy.AuthUserPass.Password">
            <summary>
            Gets or sets the password to use when authenticating with the proxy server.
            </summary>
            <value>The password to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="F:Matrix.Net.Proxy.AuthUserPass.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.AuthUserPass.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="M:Matrix.Net.Proxy.HttpTunnelHandler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.HttpTunnelHandler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the Socket has sent the handshake data.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.HttpTunnelHandler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the Socket has received a reply from the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="P:Matrix.Net.Proxy.HttpTunnelHandler.Password">
            <summary>
            Gets or sets the password to use when authenticating with the HTTP proxy server.
            </summary>
            <value>The password to use when authenticating with the HTTP proxy server.</value>
        </member>
        <member name="F:Matrix.Net.Proxy.HttpTunnelHandler.m_Password">
            <summary>
            Holds the value of the Password property.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.HttpTunnelHandler.GetProxyRequest(System.String,System.Int32)">
            <summary>
            build the http CONNECT message
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="T:Matrix.Net.Proxy.IAsyncProxyResult">
            <summary>
            A class that implements the IAsyncResult interface. Objects from this class are returned by the BeginConnect method of the ProxySocket class.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.IAsyncProxyResult.Init(System.Object)">
            <summary>Initializes the internal variables of this object</summary>
            <param name="stateObject">An object that contains state information for this request.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.IAsyncProxyResult.Reset">
            <summary>Initializes the internal variables of this object</summary>
        </member>
        <member name="P:Matrix.Net.Proxy.IAsyncProxyResult.IsCompleted">
            <summary>Gets a value that indicates whether the server has completed processing the call. It is illegal for the server to use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to "true". Thus, it is safe for the client to destroy the resources after IsCompleted property returns "true".</summary>
            <value>A boolean that indicates whether the server has completed processing the call.</value>
        </member>
        <member name="P:Matrix.Net.Proxy.IAsyncProxyResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the BeginXXXX call has been completed synchronously. If this is detected in the AsyncCallback delegate, it is probable that the thread that called BeginInvoke is the current thread.</summary>
            <value>Returns false.</value>
        </member>
        <member name="P:Matrix.Net.Proxy.IAsyncProxyResult.AsyncState">
            <summary>Gets an object that was passed as the state parameter of the BeginXXXX method call.</summary>
            <value>The object that was passed as the state parameter of the BeginXXXX method call.</value>
        </member>
        <member name="P:Matrix.Net.Proxy.IAsyncProxyResult.AsyncWaitHandle">
             <summary>
             The AsyncWaitHandle property returns the WaitHandle that can use to perform a WaitHandle.WaitOne or WaitAny or WaitAll. The object which implements IAsyncResult need not derive from the System.WaitHandle classes directly. The WaitHandle wraps its underlying synchronization primitive and should be signaled after the call is completed. This enables the client to wait for the call to complete instead polling. The Runtime supplies a number of waitable objects that mirror Win32 synchronization primitives e.g. ManualResetEvent, AutoResetEvent and Mutex.
             WaitHandle supplies methods that support waiting for such synchronization objects to become signaled with "any" or "all" semantics i.e. WaitHandle.WaitOne, WaitAny and WaitAll. Such methods are context aware to avoid deadlocks. The AsyncWaitHandle can be allocated eagerly or on demand. It is the choice of the IAsyncResult implementer.
            </summary>
             <value>The WaitHandle associated with this asynchronous result.</value>
        </member>
        <member name="F:Matrix.Net.Proxy.IAsyncProxyResult.m_Completed">
            <summary>Used internally to represent the state of the asynchronous request</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.IAsyncProxyResult.m_StateObject">
            <summary>Holds the value of the StateObject property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.IAsyncProxyResult.m_WaitHandle">
            <summary>Holds the value of the WaitHandle property.</summary>
        </member>
        <member name="T:Matrix.Net.Proxy.ProxyException">
            <summary>
            The exception that is thrown when a proxy error occurs.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyException.#ctor">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyException.Socks5ToString(System.Int32)">
            <summary>
            Converts a SOCKS5 error number to a human readable string.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
            <returns>A string representation of the specified SOCKS5 error number.</returns>
        </member>
        <member name="T:Matrix.Net.Proxy.ProxyType">
            <summary>
            Specifies the type of proxy servers that an instance of the ProxySocket class can use.
            </summary>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyType.None">
            <summary>
            No proxy server; the ProxySocket object behaves exactly like an ordinary Socket object.
            </summary>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyType.Socks4">
            <summary>
            A SOCKS4[A] proxy server.
            </summary>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyType.Socks5">
            <summary>
            A SOCKS5 proxy server.
            </summary>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyType.HttpTunnel">
            <summary>
            HTTP Tunnel with HTTP CONNECT method
            </summary>
        </member>
        <member name="T:Matrix.Net.Proxy.Socks4Handler">
            <summary>
            Implements the SOCKS4[A] protocol.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <remarks>Resolving the host name will be done at server side. Do note that some SOCKS4 servers do not implement this functionality.</remarks>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Matrix.Net.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Matrix.Net.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Matrix.Net.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.BeginNegotiate(System.String,System.Int32,Matrix.Net.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.BeginNegotiate(System.Net.IPEndPoint,Matrix.Net.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the Socket has sent the handshake data.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks4Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the Socket has received a reply from the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="T:Matrix.Net.Proxy.Socks5Handler">
            <summary>
            Implements the SOCKS5 protocol.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c>  is null.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.Authenticate">
            <summary>
            Starts the synchronous authentication process.
            </summary>
            <exception cref="T:Matrix.Net.Proxy.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> or <c>host</c> is invalid.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Matrix.Net.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Matrix.Net.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Matrix.Net.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.BeginNegotiate(System.String,System.Int32,Matrix.Net.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.BeginNegotiate(System.Net.IPEndPoint,Matrix.Net.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the socket is connected to the remote server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.OnAuthSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.OnAuthReceive(System.IAsyncResult)">
            <summary>
            Called when an authentication reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.OnAuthenticated(System.Exception)">
            <summary>
            Called when the socket has been successfully authenticated with the server.
            </summary>
            <param name="e">The exception that has occured while authenticating, or <em>null</em> if no error occured.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the connection request has been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when a connection reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.ProcessReply(System.Byte[])">
            <summary>
            Processes the received reply.
            </summary>
            <param name="buffer">The received reply</param>
            <exception cref="T:System.Net.ProtocolViolationException">The received reply is invalid.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.Socks5Handler.OnReadLast(System.IAsyncResult)">
            <summary>
            Called when the last bytes are read from the socket.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="P:Matrix.Net.Proxy.Socks5Handler.Password">
            <summary>
            Gets or sets the password to use when authenticating with the SOCKS5 server.
            </summary>
            <value>The password to use when authenticating with the SOCKS5 server.</value>
        </member>
        <member name="P:Matrix.Net.Proxy.Socks5Handler.HandShake">
            <summary>
            Gets or sets the bytes to use when sending a connect request to the proxy server.
            </summary>
            <value>The array of bytes to use when sending a connect request to the proxy server.</value>
        </member>
        <member name="F:Matrix.Net.Proxy.Socks5Handler.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.Socks5Handler.m_HandShake">
            <summary>Holds the value of the HandShake property.</summary>
        </member>
        <member name="T:Matrix.Net.Proxy.HandShakeComplete">
            <summary>
            References the callback method to be called when the protocol negotiation is completed.
            </summary>
        </member>
        <member name="T:Matrix.Net.Proxy.ProxyHandler">
            <summary>
            Implements a specific version of the SOCKS protocol. This is an abstract class; it must be inherited.
            </summary>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyHandler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyHandler.PortToBytes(System.Int32)">
            <summary>
            Converts a port number to an array of bytes.
            </summary>
            <param name="port">The port to convert.</param>
            <returns>An array of two bytes that represents the specified port.</returns>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyHandler.ReadBytes(System.Int32)">
            <summary>
            Reads a specified number of bytes from the Server socket.
            </summary>
            <param name="count">The number of bytes to return.</param>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ArgumentException">The number of bytes to read is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="P:Matrix.Net.Proxy.ProxyHandler.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>A Socket object that represents the connection with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Matrix.Net.Proxy.ProxyHandler.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>A string that holds the username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Matrix.Net.Proxy.ProxyHandler.AsyncResult">
            <summary>
            Gets or sets the return value of the BeginConnect call.
            </summary>
            <value>An IAsyncProxyResult object that is the return value of the BeginConnect call.</value>
        </member>
        <member name="P:Matrix.Net.Proxy.ProxyHandler.Buffer">
            <summary>
            Gets or sets a byte buffer.
            </summary>
            <value>An array of bytes.</value>
        </member>
        <member name="P:Matrix.Net.Proxy.ProxyHandler.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyHandler.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyHandler.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyHandler.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyHandler.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyHandler.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="F:Matrix.Net.Proxy.ProxyHandler.ProtocolComplete">
            <summary>Holds the address of the method to call when the SOCKS protocol has been completed.</summary>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyHandler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyHandler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">The remote endpoint to connect to.</param>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyHandler.BeginNegotiate(System.Net.IPEndPoint,Matrix.Net.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device. </param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Matrix.Net.Proxy.ProxyHandler.BeginNegotiate(System.String,System.Int32,Matrix.Net.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="T:Matrix.Net.SocketEventArgs">
            <summary>
            Socket event args
            </summary>
        </member>
        <member name="T:Matrix.Net.Transport">
            <summary>
            The transport which gets used for the Xmpp Connection
            </summary>
        </member>
        <member name="F:Matrix.Net.Transport.Socket">
            <summary>
            standard TCP/IP transport layer
            </summary>
        </member>
        <member name="F:Matrix.Net.Transport.Bosh">
            <summary>
            XMPP over BOSH (XEP-0206)
            </summary>
        </member>
        <member name="T:Matrix.PresenceFilter">
            <summary>
            Use the PresenceFilter to listen for presences from given Jids. 
            </summary>
        </member>
        <member name="M:Matrix.PresenceFilter.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.MessageFilter"/> class.
            </summary>
            <param name="con">The con.</param>
        </member>
        <member name="M:Matrix.PresenceFilter.Add(Matrix.Jid,System.Collections.Generic.IComparer{Matrix.Jid},System.EventHandler{Matrix.Xmpp.Client.PresenceEventArgs})">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="jid">The jid.</param>
            <param name="comparer">The Jid comparer.</param>
            <param name="eh">The event handler.</param>
            <returns>true when the filter was added, false when it couldn't be added.</returns>
        </member>
        <member name="M:Matrix.PresenceFilter.Add(Matrix.Jid,System.Collections.Generic.IComparer{Matrix.Jid},System.EventHandler{Matrix.Xmpp.Client.PresenceEventArgs},System.Object)">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="jid">The jid.</param>
            <param name="comparer">The Jid comparer.</param>
            <param name="eh">The event handler.</param>
            <param name="state">optional state object.</param>
            <returns>true when the filter was added, false when it couldn't be added.</returns>
        </member>
        <member name="M:Matrix.PresenceFilter.Remove(System.String)">
            <summary>
            Unsubscribe from a Presence filter
            </summary>
            <param name="id">The Jid which should be unsubscribed</param>
        </member>
        <member name="M:Matrix.Sasl.ScramHelper.GenerateFirstServerMessage(System.String,System.String)">
            <summary>
            Generates the first Server message bases on the first client message and the plain password
            </summary>
            <param name="msg">first client message</param>
            <param name="pass">plain password</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Sasl.ScramHelper.GenerateFinalServerMessage(System.String)">
            <summary>
            Creates the final server message based on the final client message
            </summary>
            <param name="finalClient">The final client message</param>
            <returns>return null on failure and teh server final message on success</returns>
        </member>
        <member name="M:Matrix.Sasl.ScramHelper.GenerateClientNonce">
            <summary>
            Generate a random client nonce
            </summary>
        </member>
        <member name="M:Matrix.Sasl.ScramHelper.BinaryXor(System.Byte[],System.Byte[])">
            <summary>
            Binary XOR
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="T:Matrix.StanzaEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.StanzaEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.StanzaEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Matrix.StanzaEventArgs.#ctor(Matrix.Xml.XmppXElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.StanzaEventArgs"/> class.
            </summary>
            <param name="stanza">The stanza.</param>
        </member>
        <member name="M:Matrix.StanzaEventArgs.#ctor(Matrix.Xml.XmppXElement,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.StanzaEventArgs"/> class.
            </summary>
            <param name="stanza">The stanza.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Matrix.StanzaEventArgs.Stanza">
            <summary>
            Gets or sets the stanza.
            </summary>
            <value>The stanza.</value>
        </member>
        <member name="M:Matrix.StanzaFilter.Remove(Matrix.Jid)">
            <summary>
            Pending request can be removed.
            This is useful when a ressource for the callback is destroyed and
            we are not interested anymore at the result.
            </summary>
            <param name="jid">The Jid we are not interested anymore in this Filter</param>
        </member>
        <member name="M:Matrix.StanzaFilter.Remove(System.String)">
            <summary>
            Pending request can be removed.
            This is useful when a ressource for the callback is destroyed and
            we are not interested anymore at the result.
            </summary>
            <param name="id">ID of the Iq we are not interested anymore</param>
        </member>
        <member name="M:Matrix.StanzaFilter.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="F:Matrix.Tag.Presence">
            <summary>
            presence
            </summary>
        </member>
        <member name="F:Matrix.Tag.PresenceOut">
            <summary>
            presence-out
            </summary>
        </member>
        <member name="F:Matrix.Tag.PresenceIn">
            <summary>
            presence-in
            </summary>
        </member>
        <member name="F:Matrix.Tag.Message">
            <summary>
            message
            </summary>
        </member>
        <member name="F:Matrix.Tag.Iq">
            <summary>
            iq
            </summary>
        </member>
        <member name="F:Matrix.Tag.Status">
            <summary>
            status
            </summary>
        </member>
        <member name="F:Matrix.Tag.Show">
            <summary>
            show
            </summary>
        </member>
        <member name="F:Matrix.Tag.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="F:Matrix.Tag.Subject">
            <summary>
            subject
            </summary>
        </member>
        <member name="F:Matrix.Tag.Thread">
            <summary>
            thread
            </summary>
        </member>
        <member name="F:Matrix.Tag.StartTls">
            <summary>
            starttls
            </summary>
        </member>
        <member name="F:Matrix.Tag.Proceed">
            <summary>
            proceed
            </summary>
        </member>
        <member name="F:Matrix.Tag.Bind">
            <summary>
            bind
            </summary>
        </member>
        <member name="F:Matrix.Tag.Session">
            <summary>
            session
            </summary>
        </member>
        <member name="F:Matrix.Tag.Query">
            <summary>
            query
            </summary>
        </member>
        <member name="F:Matrix.Tag.Item">
            <summary>
            item
            </summary>
        </member>
        <member name="F:Matrix.Tag.Error">
            <summary>
            error
            </summary>
        </member>
        <member name="T:Matrix.TlsRequiredException">
            <summary>
            Exception object for Server requires TLS
            </summary>
        </member>
        <member name="M:Matrix.TlsRequiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.TlsRequiredException"/> class.
            </summary>
        </member>
        <member name="T:Matrix.Util.Time">
            <summary>
            helper class for XMPP and utc time formats
            </summary>
        </member>
        <member name="M:Matrix.Util.Time.JabberDate(System.String)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Util.Time.ParseJabberDate(System.String)">
            <summary>
            parses the old Jabber style date
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Util.Time.JabberDate(System.DateTime)">
            <summary>
            Get a XMPP string representation of a Date        
            </summary>
            <param name="date">DateTime</param>
            <returns>XMPP string representation of a DateTime value</returns>
        </member>
        <member name="M:Matrix.Util.Time.Iso8601Date(System.String)">
            <summary>
            The new standard used by XMPP in JEP-82 (ISO-8601)
            <example>1970-01-01T00:00Z</example>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Util.Time.Iso8601Date(System.DateTime)">
            <summary>
            The new standard used by XMPP in JEP-82 (ISO-8601)
            converts a local DateTime to a ISO-8601 formatted date in UTC format.
            <example>1970-01-01T00:00Z</example>
            </summary>
            <param name="date">local Datetime</param>
            <returns></returns>
        </member>
        <member name="T:Matrix.Util.Hash">
            <summary>
            Summary description for Hash.
            </summary>
        </member>
        <member name="M:Matrix.Util.Hash.Sha1HashHex(System.String)">
            <summary>
            creates a Sha1 hash with Hex output
            </summary>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Util.Hash.HexToString(System.Byte[])">
            <summary>
            Converts all bytes in the Array to a string representation.
            </summary>
            <param name="buf"></param>
            <returns>string representation</returns>
        </member>
        <member name="M:Matrix.Xml.TypeExtensions.GetInstance(System.Type)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <param name="type">The type on which the method was invoked.</param>
            <returns>An instance of the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Matrix.Xml.TypeExtensions.GetInstance``1(System.Type,``0)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <typeparam name="TArg">The type of the argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument">The argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:Matrix.Xml.TypeExtensions.GetInstance``2(System.Type,``0,``1)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <typeparam name="TArg1">The type of the first argument to pass to the constructor.</typeparam>
            <typeparam name="TArg2">The type of the second argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument1">The first argument to pass to the constructor.</param>
            <param name="argument2">The second argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:Matrix.Xml.TypeExtensions.GetInstance``3(System.Type,``0,``1,``2)">
            <summary>
            Returns an instance of the <paramref name="type"/> on which the method is invoked.
            </summary>
            <typeparam name="TArg1">The type of the first argument to pass to the constructor.</typeparam>
            <typeparam name="TArg2">The type of the second argument to pass to the constructor.</typeparam>
            <typeparam name="TArg3">The type of the third argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument1">The first argument to pass to the constructor.</param>
            <param name="argument2">The second argument to pass to the constructor.</param>
            <param name="argument3">The third argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ByteBuffer.GetBuffer">
            <summary>
            Get the current aggregate contents of the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ByteBuffer.RemoveFirst(System.Int32)">
            <summary>
            Removes the given numer of bytes from the beginning of the buffer.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ByteBuffer.ToString">
            <summary>
            To show the buffer as a nice string in the debugger
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ByteBuffer.RemoveFirst(System.Byte[],System.Int32)">
            <summary>
            Removes the given number of bytes at the beginning of a byte array.
            </summary>
            <param name="buf">The buf.</param>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ByteBuffer.Combine(System.Byte[],System.Byte[])">
            <summary>
            Combines two byte arrays
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xml.Xpnet.ContentToken">
            <summary>
            Represents information returned by <code>Encoding.tokenizeContent</code>.
            @see Encoding#tokenizeContent
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ContentToken.getAttributeSpecifiedCount">
            <summary>
            Returns the number of attributes specified in the start-tag or empty element tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ContentToken.getAttributeNameStart(System.Int32)">
            <summary>
            Returns the index of the first character of the name of the
            attribute index <code>i</code>.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ContentToken.getAttributeNameEnd(System.Int32)">
            Returns the index following the last character of the name of the
            attribute index <code>i</code>.
        </member>
        <member name="M:Matrix.Xml.Xpnet.ContentToken.getAttributeValueStart(System.Int32)">
            Returns the index of the character following the opening quote of
            attribute index <code>i</code>.
        </member>
        <member name="M:Matrix.Xml.Xpnet.ContentToken.getAttributeValueEnd(System.Int32)">
            Returns the index of the closing quote attribute index <code>i</code>.
        </member>
        <member name="M:Matrix.Xml.Xpnet.ContentToken.isAttributeNormalized(System.Int32)">
            Returns true if attribute index <code>i</code> does not need to
            be normalized.  This is an optimization that allows further processing
            of the attribute to be avoided when it is known that normalization
            cannot change the value of the attribute.
        </member>
        <member name="M:Matrix.Xml.Xpnet.ContentToken.clearAttributes">
            <summary>
            Clear out all of the current attributes
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ContentToken.appendAttribute(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add a new attribute
            </summary>
            <param name="nameStart"></param>
            <param name="nameEnd"></param>
            <param name="valueStart"></param>
            <param name="valueEnd"></param>
            <param name="normalized"></param>
        </member>
        <member name="M:Matrix.Xml.Xpnet.ContentToken.checkAttributeUniqueness(System.Byte[])">
            <summary>
            Is the current attribute unique?
            </summary>
            <param name="buf"></param>
        </member>
        <member name="T:Matrix.Xml.Xpnet.TOK">
            <summary>
            Tokens that might have been found
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.DATA_CHARS">
            Represents one or more characters of data.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.DATA_NEWLINE">
            Represents a newline (CR, LF or CR followed by LF) in data.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.START_TAG_NO_ATTS">
            Represents a complete start-tag <code>&lt;name&gt;</code>,
            that doesn't have any attribute specifications.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.START_TAG_WITH_ATTS">
            Represents a complete start-tag <code>&lt;name
            att="val"&gt;</code>, that contains one or more
            attribute specifications.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.EMPTY_ELEMENT_NO_ATTS">
            Represents an empty element tag <code>&lt;name/&gt;</code>,
            that doesn't have any attribute specifications.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.EMPTY_ELEMENT_WITH_ATTS">
            Represents an empty element tag <code>&lt;name
            att="val"/&gt;</code>, that contains one or more
            attribute specifications.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.END_TAG">
            Represents a complete end-tag <code>&lt;/name&gt;</code>.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.CDATA_SECT_OPEN">
            Represents the start of a CDATA section
            <code>&lt;![CDATA[</code>.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.CDATA_SECT_CLOSE">
            Represents the end of a CDATA section <code>]]&gt;</code>.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.ENTITY_REF">
            Represents a general entity reference.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.MAGIC_ENTITY_REF">
            Represents a general entity reference to a one of the 5
            predefined entities <code>amp</code>, <code>lt</code>,
            <code>gt</code>, <code>quot</code>, <code>apos</code>.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.CHAR_REF">
            Represents a numeric character reference (decimal or
            hexadecimal), when the referenced character is less
            than or equal to 0xFFFF and so is represented by a
            single char.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.CHAR_PAIR_REF">
            Represents a numeric character reference (decimal or
            hexadecimal), when the referenced character is greater
            than 0xFFFF and so is represented by a pair of chars.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.PI">
            Represents a processing instruction.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.XML_DECL">
            Represents an XML declaration or text declaration (a
            processing instruction whose target is
            <code>xml</code>).
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.COMMENT">
            Represents a comment <code>&lt;!-- comment --&gt;</code>.
            This can occur both in the prolog and in content.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.ATTRIBUTE_VALUE_S">
            Represents a white space character in an attribute
            value, excluding white space characters that are part
            of line boundaries.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.PARAM_ENTITY_REF">
            Represents a parameter entity reference in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.PROLOG_S">
            Represents whitespace in the prolog.
            The token contains one or more whitespace characters.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.DECL_OPEN">
            Represents <code>&lt;!NAME</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.DECL_CLOSE">
            Represents <code>&gt;</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.NAME">
            Represents a name in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.NMTOKEN">
            Represents a name token in the prolog that is not a name.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.POUND_NAME">
            Represents <code>#NAME</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.OR">
            Represents <code>|</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.PERCENT">
            Represents a <code>%</code> in the prolog that does not start
            a parameter entity reference.
            This can occur in an entity declaration.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.OPEN_PAREN">
            Represents a <code>(</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.CLOSE_PAREN">
            Represents a <code>)</code> in the prolog that is not
            followed immediately by any of
             <code>*</code>, <code>+</code> or <code>?</code>.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.OPEN_BRACKET">
            Represents <code>[</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.CLOSE_BRACKET">
            Represents <code>]</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.LITERAL">
            Represents a literal (EntityValue, AttValue, SystemLiteral or
            PubidLiteral).
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.NAME_QUESTION">
            Represents a name followed immediately by <code>?</code>.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.NAME_ASTERISK">
            Represents a name followed immediately by <code>*</code>.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.NAME_PLUS">
            Represents a name followed immediately by <code>+</code>.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.COND_SECT_OPEN">
            Represents <code>&lt;![</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.COND_SECT_CLOSE">
            Represents <code>]]&gt;</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.CLOSE_PAREN_QUESTION">
            Represents <code>)?</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.CLOSE_PAREN_ASTERISK">
            Represents <code>)*</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.CLOSE_PAREN_PLUS">
            Represents <code>)+</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.COMMA">
            Represents <code>,</code> in the prolog.
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.PartialToken">
            <summary>
            When we received a partial Xmp fragment and expect the rest of the Element with the next read.
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.PartialChar">
            <summary>
            When received a partial char and expect the rest of the char in the next receive event.
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.TOK.ExtensibleToken">
            <summary>
            Indicates that the byte subarray being tokenized is a legal XML
            token, but that subsequent bytes in the same entity could be part of
            the token. For example, <code>Encoding.tokenizeProlog</code>
            would return this if the byte subarray consists of a legal XML name.
            </summary>
        </member>
        <member name="T:Matrix.Xml.Xpnet.Encoding">
            <summary>
            Base tokenizer class
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_LEAD2">
            <summary>
            Need more bytes
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_LEAD3">
            <summary>
            Need more bytes
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_LEAD4">
            <summary>
            Need more bytes
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_NONXML">
            <summary>
            Not XML
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_MALFORM">
            <summary>
            Malformed XML
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_LT">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_AMP">
            <summary>
            Ampersand
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_RSQB">
            <summary>
            right square bracket
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_CR">
            <summary>
            carriage return
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_LF">
            <summary>
            line feed
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_GT">
            <summary>
            greater than
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_QUOT">
            <summary>
            Quote
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_APOS">
            <summary>
            Apostrophe
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_EQUALS">
            <summary>
            Equal sign
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_QUEST">
            <summary>
            Question mark
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_EXCL">
            <summary>
            Exclamation point
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_SOL">
            <summary>
            Solidus (/)
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_SEMI">
            <summary>
            Semicolon
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_NUM">
            <summary>
            Hash
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_LSQB">
            <summary>
            Left square bracket
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_S">
            <summary>
            space
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_NMSTRT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_NAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_MINUS">
            <summary>
            Minus
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_OTHER">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_PERCNT">
            <summary>
            Percent
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_LPAR">
            <summary>
            Left paren
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_RPAR">
            <summary>
            Right paren
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_AST">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_PLUS">
            <summary>
            +
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_COMMA">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.BT_VERBAR">
            <summary>
            Pipe
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.asciiTypeTable">
            <summary>
            What syntax do each of the ASCII7 characters have?
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            
            </summary>
            <param name="sourceBuf"></param>
            <param name="sourceStart"></param>
            <param name="sourceEnd"></param>
            <param name="targetBuf"></param>
            <param name="targetStart"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.#ctor(System.Int32)">
            <summary>
            Constructor called by subclasses to set the minimum bytes per character
            </summary>
            <param name="minBPC"></param>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.byteType(System.Byte[],System.Int32)">
            <summary>
            Get the byte type of the next byte. There are guaranteed to be minBPC available bytes starting at off.
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.byteToAscii(System.Byte[],System.Int32)">
            <summary>
            Really only works for ASCII7.
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.charMatches(System.Byte[],System.Int32,System.Char)">
            <summary>
            This must only be called when c is an (XML significant)
            ASCII character.
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.byteType2(System.Byte[],System.Int32)">
            <summary>
            Called only when byteType(buf, off) == BT_LEAD2
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.byteType3(System.Byte[],System.Int32)">
            <summary>
            Called only when byteType(buf, off) == BT_LEAD3
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.byteType4(System.Byte[],System.Int32)">
            <summary>
            Called only when byteType(buf, off) == BT_LEAD4
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.movePosition(System.Byte[],System.Int32,System.Int32,Matrix.Xml.Xpnet.Position)">
            Moves a position forward.  On entry, <code>pos</code> gives
            the position of the byte at index <code>off</code> in
            <code>buf</code>.  On exit, it <code>pos</code> will give
            the position of the byte at index <code>end</code>, which
            must be greater than or equal to <code>off</code>.  The
            bytes between <code>off</code> and <code>end</code> must
            encode one or more complete characters.  A carriage return
            followed by a line feed will be treated as a single line
            delimiter provided that they are given to
            <code>movePosition</code> together.
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.tokenizeCdataSection(System.Byte[],System.Int32,System.Int32,Matrix.Xml.Xpnet.Token)">
             Scans the first token of a byte subarrary that starts with the
             content of a CDATA section.
             Returns one of the following integers according to the type of token
             that the subarray starts with:
             <ul>
             <li><code>TOK.DATA_CHARS</code></li>
             <li><code>TOK.DATA_NEWLINE</code></li>
             <li><code>TOK.CDATA_SECT_CLOSE</code></li>
             </ul>
             <p>
             Information about the token is stored in <code>token</code>.
             </p>
             After <code>TOK.CDATA_SECT_CLOSE</code> is returned, the application
             should use <code>tokenizeContent</code>.
            
             @exception EmptyTokenException if the subarray is empty
             @exception PartialTokenException if the subarray contains only part of
             a legal token
             @exception InvalidTokenException if the subarrary does not start
             with a legal token or part of one
             @exception ExtensibleTokenException if the subarray encodes just a carriage
             return ('\r')
            
             @see #TOK.DATA_CHARS
             @see #TOK.DATA_NEWLINE
             @see #TOK.CDATA_SECT_CLOSE
             @see Token
             @see EmptyTokenException
             @see PartialTokenException
             @see InvalidTokenException
             @see ExtensibleTokenException
             @see #tokenizeContent
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.tokenizeContent(System.Byte[],System.Int32,System.Int32,Matrix.Xml.Xpnet.ContentToken)">
             Scans the first token of a byte subarrary that contains content.
             Returns one of the following integers according to the type of token
             that the subarray starts with:
             <ul>
             <li><code>TOK.START_TAG_NO_ATTS</code></li>
             <li><code>TOK.START_TAG_WITH_ATTS</code></li>
             <li><code>TOK.EMPTY_ELEMENT_NO_ATTS</code></li>
             <li><code>TOK.EMPTY_ELEMENT_WITH_ATTS</code></li>
             <li><code>TOK.END_TAG</code></li>
             <li><code>TOK.DATA_CHARS</code></li>
             <li><code>TOK.DATA_NEWLINE</code></li>
             <li><code>TOK.CDATA_SECT_OPEN</code></li>
             <li><code>TOK.ENTITY_REF</code></li>
             <li><code>TOK.MAGIC_ENTITY_REF</code></li>
             <li><code>TOK.CHAR_REF</code></li>
             <li><code>TOK.CHAR_PAIR_REF</code></li>
             <li><code>TOK.PI</code></li>
             <li><code>TOK.XML_DECL</code></li>
             <li><code>TOK.COMMENT</code></li>
             </ul>
             <p>
             Information about the token is stored in <code>token</code>.
             </p>
             When <code>TOK.CDATA_SECT_OPEN</code> is returned,
             <code>tokenizeCdataSection</code> should be called until
             it returns <code>TOK.CDATA_SECT</code>.
            
             @exception EmptyTokenException if the subarray is empty
             @exception PartialTokenException if the subarray contains only part of
             a legal token
             @exception InvalidTokenException if the subarrary does not start
             with a legal token or part of one
             @exception ExtensibleTokenException if the subarray encodes just a carriage
             return ('\r')
            
             @see #TOK.START_TAG_NO_ATTS
             @see #TOK.START_TAG_WITH_ATTS
             @see #TOK.EMPTY_ELEMENT_NO_ATTS
             @see #TOK.EMPTY_ELEMENT_WITH_ATTS
             @see #TOK.END_TAG
             @see #TOK.DATA_CHARS
             @see #TOK.DATA_NEWLINE
             @see #TOK.CDATA_SECT_OPEN
             @see #TOK.ENTITY_REF
             @see #TOK.MAGIC_ENTITY_REF
             @see #TOK.CHAR_REF
             @see #TOK.CHAR_PAIR_REF
             @see #TOK.PI
             @see #TOK.XML_DECL
             @see #TOK.COMMENT
             @see ContentToken
             @see EmptyTokenException
             @see PartialTokenException
             @see InvalidTokenException
             @see ExtensibleTokenException
             @see #tokenizeCdataSection
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.getInitialEncoding(System.Byte[],System.Int32,System.Int32,Matrix.Xml.Xpnet.Token)">
             Returns an encoding object to be used to start parsing an
             external entity.  The encoding is chosen based on the
             initial 4 bytes of the entity.
             
             @param buf the byte array containing the initial bytes of
             the entity @param off the index in <code>buf</code> of the
             first byte of the entity @param end the index in
             <code>buf</code> following the last available byte of the
             entity; <code>end - off</code> must be greater than or
             equal to 4 unless the entity has fewer that 4 bytes, in
             which case it must be equal to the length of the entity
             @param token receives information about the presence of a
             byte order mark; if the entity starts with a byte order
             mark then <code>token.getTokenEnd()</code> will return
             <code>off + 2</code>, otherwise it will return
             <code>off</code>
            
             @see TextDecl
             @see XmlDecl
             @see #TOK.XML_DECL
             @see #getEncoding
             @see #getInternalEncoding
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.getEncoding(System.String)">
            Returns an <code>Encoding</code> corresponding to the
            specified IANA character set name.  Returns this
            <code>Encoding</code> if the name is null.  Returns null if
            the specified encoding is not supported.  Note that there
            are two distinct <code>Encoding</code> objects associated
            with the name <code>UTF-16</code>, one for each possible
            byte order; if this <code>Encoding</code> is UTF-16 with
            little-endian byte ordering, then
            <code>getEncoding("UTF-16")</code> will return this,
            otherwise it will return an <code>Encoding</code> for
            UTF-16 with big-endian byte ordering.  @param name a string
            specifying the IANA name of the encoding; this is case
            insensitive
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.getSingleByteEncoding(System.String)">
            Returns an <code>Encoding</code> for entities encoded with
            a single-byte encoding (an encoding in which each byte
            represents exactly one character).  @param map a string
            specifying the character represented by each byte; the
            string must have a length of 256;
            <code>map.charAt(b)</code> specifies the character encoded
            by byte <code>b</code>; bytes that do not represent any
            character should be mapped to <code>\uFFFD</code>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.getInternalEncoding">
            Returns an <code>Encoding</code> object for use with
            internal entities.  This is a UTF-16 big endian encoding,
            except that newlines are assumed to have been normalized
            into line feed, so carriage return is treated like a space.
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.tokenizeProlog(System.Byte[],System.Int32,System.Int32,Matrix.Xml.Xpnet.Token)">
            Scans the first token of a byte subarray that contains part of a
            prolog.
            Returns one of the following integers according to the type of token
            that the subarray starts with:
            <ul>
            <li><code>TOK.PI</code></li>
            <li><code>TOK.XML_DECL</code></li>
            <li><code>TOK.COMMENT</code></li>
            <li><code>TOK.PARAM_ENTITY_REF</code></li>
            <li><code>TOK.PROLOG_S</code></li>
            <li><code>TOK.DECL_OPEN</code></li>
            <li><code>TOK.DECL_CLOSE</code></li>
            <li><code>TOK.NAME</code></li>
            <li><code>TOK.NMTOKEN</code></li>
            <li><code>TOK.POUND_NAME</code></li>
            <li><code>TOK.OR</code></li>
            <li><code>TOK.PERCENT</code></li>
            <li><code>TOK.OPEN_PAREN</code></li>
            <li><code>TOK.CLOSE_PAREN</code></li>
            <li><code>TOK.OPEN_BRACKET</code></li>
            <li><code>TOK.CLOSE_BRACKET</code></li>
            <li><code>TOK.LITERAL</code></li>
            <li><code>TOK.NAME_QUESTION</code></li>
            <li><code>TOK.NAME_ASTERISK</code></li>
            <li><code>TOK.NAME_PLUS</code></li>
            <li><code>TOK.COND_SECT_OPEN</code></li>
            <li><code>TOK.COND_SECT_CLOSE</code></li>
            <li><code>TOK.CLOSE_PAREN_QUESTION</code></li>
            <li><code>TOK.CLOSE_PAREN_ASTERISK</code></li>
            <li><code>TOK.CLOSE_PAREN_PLUS</code></li>
            <li><code>TOK.COMMA</code></li>
            </ul>
            @exception EmptyTokenException if the subarray is empty
            @exception PartialTokenException if the subarray contains only part of
            a legal token
            @exception InvalidTokenException if the subarrary does not start
            with a legal token or part of one
            @exception EndOfPrologException if the subarray starts with the document
            element; <code>tokenizeContent</code> should be used on the remainder
            of the entity
            @exception ExtensibleTokenException if the subarray is a legal token
            but subsequent bytes in the same entity could be part of the token
            @see #TOK.PI
            @see #TOK.XML_DECL
            @see #TOK.COMMENT
            @see #TOK.PARAM_ENTITY_REF
            @see #TOK.PROLOG_S
            @see #TOK.DECL_OPEN
            @see #TOK.DECL_CLOSE
            @see #TOK.NAME
            @see #TOK.NMTOKEN
            @see #TOK.POUND_NAME
            @see #TOK.OR
            @see #TOK.PERCENT
            @see #TOK.OPEN_PAREN
            @see #TOK.CLOSE_PAREN
            @see #TOK.OPEN_BRACKET
            @see #TOK.CLOSE_BRACKET
            @see #TOK.LITERAL
            @see #TOK.NAME_QUESTION
            @see #TOK.NAME_ASTERISK
            @see #TOK.NAME_PLUS
            @see #TOK.COND_SECT_OPEN
            @see #TOK.COND_SECT_CLOSE
            @see #TOK.CLOSE_PAREN_QUESTION
            @see #TOK.CLOSE_PAREN_ASTERISK
            @see #TOK.CLOSE_PAREN_PLUS
            @see #TOK.COMMA
            @see ContentToken
            @see EmptyTokenException
            @see PartialTokenException
            @see InvalidTokenException
            @see ExtensibleTokenException
            @see EndOfPrologException
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.tokenizeAttributeValue(System.Byte[],System.Int32,System.Int32,Matrix.Xml.Xpnet.Token)">
            Scans the first token of a byte subarrary that contains part of
            literal attribute value.  The opening and closing delimiters
            are not included in the subarrary.
            Returns one of the following integers according to the type of
            token that the subarray starts with:
            <ul>
            <li><code>TOK.DATA_CHARS</code></li>
            <li><code>TOK.DATA_NEWLINE</code></li>
            <li><code>TOK.ATTRIBUTE_VALUE_S</code></li>
            <li><code>TOK.MAGIC_ENTITY_REF</code></li>
            <li><code>TOK.ENTITY_REF</code></li>
            <li><code>TOK.CHAR_REF</code></li>
            <li><code>TOK.CHAR_PAIR_REF</code></li>
            </ul>
            @exception EmptyTokenException if the subarray is empty
            @exception PartialTokenException if the subarray contains only part of
            a legal token
            @exception InvalidTokenException if the subarrary does not start
            with a legal token or part of one
            @exception ExtensibleTokenException if the subarray encodes just a carriage
            return ('\r')
            @see #TOK.DATA_CHARS
            @see #TOK.DATA_NEWLINE
            @see #TOK.ATTRIBUTE_VALUE_S
            @see #TOK.MAGIC_ENTITY_REF
            @see #TOK.ENTITY_REF
            @see #TOK.CHAR_REF
            @see #TOK.CHAR_PAIR_REF
            @see Token
            @see EmptyTokenException
            @see PartialTokenException
            @see InvalidTokenException
            @see ExtensibleTokenException
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.tokenizeEntityValue(System.Byte[],System.Int32,System.Int32,Matrix.Xml.Xpnet.Token)">
            Scans the first token of a byte subarrary that contains part of
            literal entity value.  The opening and closing delimiters
            are not included in the subarrary.
            Returns one of the following integers according to the type of
            token that the subarray starts with:
            <ul>
            <li><code>TOK.DATA_CHARS</code></li>
            <li><code>TOK.DATA_NEWLINE</code></li>
            <li><code>TOK.PARAM_ENTITY_REF</code></li>
            <li><code>TOK.MAGIC_ENTITY_REF</code></li>
            <li><code>TOK.ENTITY_REF</code></li>
            <li><code>TOK.CHAR_REF</code></li>
            <li><code>TOK.CHAR_PAIR_REF</code></li>
            </ul>
            @exception EmptyTokenException if the subarray is empty
            @exception PartialTokenException if the subarray contains only part of
            a legal token
            @exception InvalidTokenException if the subarrary does not start
            with a legal token or part of one
            @exception ExtensibleTokenException if the subarray encodes just a carriage
            return ('\r')
            @see #TOK.DATA_CHARS
            @see #TOK.DATA_NEWLINE
            @see #TOK.MAGIC_ENTITY_REF
            @see #TOK.ENTITY_REF
            @see #TOK.PARAM_ENTITY_REF
            @see #TOK.CHAR_REF
            @see #TOK.CHAR_PAIR_REF
            @see Token
            @see EmptyTokenException
            @see PartialTokenException
            @see InvalidTokenException
            @see ExtensibleTokenException
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.getPublicId(System.Byte[],System.Int32,System.Int32)">
            Checks that a literal contained in the specified byte subarray
            is a legal public identifier and returns a string with
            the normalized content of the public id.
            The subarray includes the opening and closing quotes.
            @exception InvalidTokenException if it is not a legal public identifier
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.matchesXMLstring(System.Byte[],System.Int32,System.Int32,System.String)">
            Returns true if the specified byte subarray is equal to the string.
            The string must contain only XML significant characters.
        </member>
        <member name="M:Matrix.Xml.Xpnet.Encoding.skipS(System.Byte[],System.Int32,System.Int32)">
             Skips over XML whitespace characters at the start of the specified
             subarray.
            
             @return the index of the first non-whitespace character,
             <code>end</code> if there is the subarray is all whitespace
        </member>
        <member name="F:Matrix.Xml.Xpnet.Encoding.charTypeTable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Matrix.Xml.Xpnet.Encoding.MinBytesPerChar">
            Returns the minimum number of bytes required to represent a single
            character in this encoding.  The value will be 1, 2 or 4.
        </member>
        <member name="T:Matrix.Xml.Xpnet.TokenException">
            <summary>
            Base class for other exceptions
            </summary>
        </member>
        <member name="T:Matrix.Xml.Xpnet.EmptyTokenException">
            <summary>
            An empty token was detected. This only happens with a buffer of length 0 is passed in
            to the parser.
            </summary>
        </member>
        <member name="T:Matrix.Xml.Xpnet.EndOfPrologException">
            <summary>
            End of prolog.
            </summary>
        </member>
        <member name="T:Matrix.Xml.Xpnet.InvalidTokenException">
            <summary>
            Several kinds of token problems.
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.InvalidTokenException.ILLEGAL_CHAR">
            <summary>
            An illegal character
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.InvalidTokenException.XML_TARGET">
            <summary>
            Doc prefix wasn't XML
            </summary>
        </member>
        <member name="F:Matrix.Xml.Xpnet.InvalidTokenException.DUPLICATE_ATTRIBUTE">
            <summary>
            More than one attribute with the same name on the same element
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.InvalidTokenException.#ctor(System.Int32,System.Byte)">
            <summary>
            Some other type of bad token detected
            </summary>
            <param name="offset"></param>
            <param name="type"></param>
        </member>
        <member name="M:Matrix.Xml.Xpnet.InvalidTokenException.#ctor(System.Int32)">
            <summary>
            Illegal character detected
            </summary>
            <param name="off"></param>
        </member>
        <member name="P:Matrix.Xml.Xpnet.InvalidTokenException.Offset">
            <summary>
            Offset into the buffer where the problem ocurred.
            </summary>
        </member>
        <member name="P:Matrix.Xml.Xpnet.InvalidTokenException.Type">
            <summary>
            Type of exception
            </summary>
        </member>
        <member name="T:Matrix.Xml.Xpnet.NamespaceStack">
            <summary>
            Namespace stack which takes care of Xml namespaces and namespace inheritance.
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.NamespaceStack.#ctor">
            <summary>
            Create a new stack.
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.NamespaceStack.Init">
            <summary>
            Initializes the Namespace stack and adds the xml default namespaces.
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.NamespaceStack.Push">
            <summary>
            Declare a new namespace.
            This should be called at the start of each xml element.
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.NamespaceStack.Pop">
            <summary>
            Remove the current namespace from the stack.
            This should be called at the end of each xml element.
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.NamespaceStack.AddNamespace(System.String,System.String)">
            <summary>
            Add a namespace to the current level.
            </summary>
            <param name="prefix"></param>
            <param name="uri"></param>
        </member>
        <member name="M:Matrix.Xml.Xpnet.NamespaceStack.LookupNamespace(System.String)">
            <summary>
            Find a namespace by prefix. Goes up all levels for namespace inheritance.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="P:Matrix.Xml.Xpnet.NamespaceStack.DefaultNamespace">
            <summary>
            The current default namespace.
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.NamespaceStack.Clear">
            <summary>
            Clears the Namespace Stack.
            </summary>
        </member>
        <member name="T:Matrix.Xml.Xpnet.Position">
            <summary>
            Represents a position in an entity.
            A position can be modified by <code>Encoding.movePosition</code>.
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.Position.#ctor">
            <summary>
            Creates a position for the start of an entity: the line number is
            1 and the column number is 0.
            </summary>
        </member>
        <member name="P:Matrix.Xml.Xpnet.Position.LineNumber">
            <summary>
            Returns the line number.
            The first line number is 1.
            </summary>
        </member>
        <member name="P:Matrix.Xml.Xpnet.Position.ColumnNumber">
            <summary>
            Returns the column number.
            The first column number is 0.
            A tab character is not treated specially.
            </summary>
        </member>
        <member name="T:Matrix.Xml.Xpnet.Token">
            <summary>
            A token that was parsed.
            </summary>
        </member>
        <member name="P:Matrix.Xml.Xpnet.Token.TokenEnd">
            <summary>
            The end of the current token, in relation to the beginning of the buffer.
            </summary>
        </member>
        <member name="P:Matrix.Xml.Xpnet.Token.NameEnd">
            <summary>
            The end of the current token's name, in relation to the beginning of the buffer.
            </summary>
        </member>
        <member name="P:Matrix.Xml.Xpnet.Token.RefChar1">
            <summary>
            The parsed-out character. &amp; for &amp;amp;
            </summary>
        </member>
        <member name="P:Matrix.Xml.Xpnet.Token.RefChar2">
            <summary>
            The second of two parsed-out characters.  TODO: find example.
            </summary>
        </member>
        <member name="T:Matrix.Xml.Xpnet.UTF8Encoding">
            <summary>
            UTF-8 specific tokenizer.
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.UTF8Encoding.#ctor">
            <summary>
            New tokenizer
            </summary>
        </member>
        <member name="M:Matrix.Xml.Xpnet.UTF8Encoding.byteType(System.Byte[],System.Int32)">
            <summary>
            What is the type of the current byte?
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.UTF8Encoding.byteToAscii(System.Byte[],System.Int32)">
            <summary>
            Current byte to ASCII char
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.UTF8Encoding.charMatches(System.Byte[],System.Int32,System.Char)">
            <summary>
            c is a significant ASCII character
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.UTF8Encoding.byteType2(System.Byte[],System.Int32)">
            <summary>
            A 2 byte UTF-8 representation splits the characters 11 bits
            between the bottom 5 and 6 bits of the bytes.
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.UTF8Encoding.convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            
            </summary>
            <param name="sourceBuf"></param>
            <param name="sourceStart"></param>
            <param name="sourceEnd"></param>
            <param name="targetBuf"></param>
            <param name="targetStart"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Xpnet.UTF8Encoding.movePosition(System.Byte[],System.Int32,System.Int32,Matrix.Xml.Xpnet.Position)">
            <summary>
            
            </summary>
            <param name="buf"></param>
            <param name="off"></param>
            <param name="end"></param>
            <param name="pos"></param>
        </member>
        <member name="T:Matrix.Xml.XmppStreamParser">
            <summary>
            Stream Parser is a lighweight streaming Xml parser designed for XMPP Xml streams.
            It may also work for other Xml streams, but its optimized for XMPP streams only.
            So use it on your own risk for other Xml streams.
            </summary>
        </member>
        <member name="E:Matrix.Xml.XmppStreamParser.OnStreamStart">
            <summary>
            stream header received
            </summary>
        </member>
        <member name="E:Matrix.Xml.XmppStreamParser.OnStreamEnd">
            <summary>
            stream footer received
            </summary>
        </member>
        <member name="E:Matrix.Xml.XmppStreamParser.OnStreamElement">
            <summary>
            xmpp stanza/element received
            </summary>
        </member>
        <member name="E:Matrix.Xml.XmppStreamParser.OnStreamError">
            <summary>
            Event for XML  errors
            </summary>
        </member>
        <member name="E:Matrix.Xml.XmppStreamParser.OnError">
            <summary>
            Event for general errors
            </summary>
        </member>
        <member name="M:Matrix.Xml.XmppStreamParser.Reset">
            <summary>
            Reset the XML Stream
            </summary>
        </member>
        <member name="P:Matrix.Xml.XmppStreamParser.Depth">
            <summary>
            Gets the depth.
            </summary>
            <value>The depth.</value>
        </member>
        <member name="M:Matrix.Xml.XmppStreamParser.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put bytes into the parser.
            </summary>
            <param name="buf">The bytes to put into the parse stream</param>
            <param name="offset">Offset into buf to start at</param>
            <param name="length">Number of bytes to write</param>
        </member>
        <member name="M:Matrix.Xml.XmppStreamParser.DoRaiseOnStreamElement(Matrix.Xml.XmppXElement)">
            <summary>
            If users didnt use the library correctly and had no local error handles
            it always crashed here and disconencted the socket.
            Catch this errors here now and forward them.
            </summary>
            <param name="el"></param>
        </member>
        <member name="M:Matrix.Xml.XmppStreamParser.AddText(System.String)">
            <summary>
            Add a Text or CDATA node
            </summary>
            <param name="text">value(content of the node</param>
        </member>
        <member name="M:Matrix.Xml.Extensions.LoadXml(System.Xml.Linq.XDocument,System.Xml.XmlReader)">
            <summary>
            Some extension methods added to the System.Xml.Linq namespace to support our factory on loading xml.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Matrix.Xml.Extensions.LoadNode(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads an XLinq node from an XmlReader, annotating it with line number information
            </summary>
        </member>
        <member name="T:Matrix.Xml.Factory">
            <summary>
            Factory for registering XmppXElement types
            </summary>
        </member>
        <member name="M:Matrix.Xml.Factory.RegisterElement``1(System.String,System.String)">
            <summary>
            Adds new Element Types to the Hashtable
            Use this function also to register your own created Elements.
            If a element is already registered it gets overwritten. This behaviour is also useful if you you want to overwrite
            classes and add your own derived classes to the factory.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ns"></param>
            <param name="localName"></param>
        </member>
        <member name="M:Matrix.Xml.Factory.BuildKey(System.String,System.String)">
            <summary>
            Builds the key for looking up.
            </summary>
            <param name="ns">The ns.</param>
            <param name="localName">Name of the local.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.Factory.InitFactory">
            <summary>
            Inits the factory.
            </summary>
        </member>
        <member name="M:Matrix.Xml.Factory.RegisterElement``1">
            <summary>
            Registers the element.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Matrix.Xml.Factory.RegisterElementsFromAssembly(System.Reflection.Assembly)">
            <summary>
            Looks in a complete assembly for all XmppXElements and registered them using the XmppTag attribute.
            The XmppTag attribute must be present on the classes to register
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="T:Matrix.Xml.XmppXElement">
            <summary>
            Represents an XMPP XML element.
            </summary>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.LoadFile(System.String)">
            <summary>
            Loads a XmppXElement from file.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.LoadXml(System.String)">
            <summary>
            Build a XmppXElement from a Xml string.
            </summary>
            <param name="xml">The Xml string.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.LoadXml(System.Byte[],System.Int32,System.Int32)">
            <summary>
            LBuild a XmppXElement from a byte array.
            </summary>
            <param name="data">The data.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.LoadXml(System.String,System.Boolean)">
            <summary>
            Build a XmppXElement from a Xml string.
            </summary>
            <param name="xml">The Xml string.</param>
            <param name="removeWhitespace">if set to <c>true</c> whitespaces will be removed on parsing.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetTagDouble(System.String)">
            <summary>
            Get a Tag of type double (Decimal seperator = ".")
            </summary>
            <param name="tagname"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetTagDouble(System.String,System.IFormatProvider)">
            <summary>
            Get a Tag of type double with the given iFormatProvider
            </summary>
            <param name="tagname"></param>
            <param name="ifp"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.Up">
            <summary>
            Goes up one node in the tree to the parent for (fluent API).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.Text(System.String)">
            <summary>
            Sets the text of the current node (fluent API).
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddTag(System.String)">
            <summary>
            Add a new empty childnode (fluent API).
            </summary>
            <param name="tagname">the tagname</param>
            <returns>the new child node</returns>
            <remarks>the new element will use the namespace of its parent</remarks>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddTagFirst(System.String)">
            <summary>
            Add a new empty childnode as first child (fluent API).
            </summary>
            <param name="tagname">the tagname</param>
            <returns>the new child node</returns>
            <remarks>the new element will use the namespace of its parent</remarks>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddTag(System.String,System.String)">
            <summary>
            Adds a childnode (fluent API).
            </summary>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new child node</returns>
            <remarks>the new element will use the namespace of its parent</remarks>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddTagFirst(System.String,System.String)">
            <summary>
            Adds a childnode as the first child (fluent API).
            </summary>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new child node</returns>
            <remarks>the new element will use the namespace of its parent</remarks>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddTag(System.String,System.String,System.String)">
            <summary>
            Adds a childnode (fluent API).
            </summary>
            <param name="ns">the namespace of the new child node</param>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new childnode</returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddTagFirst(System.String,System.String,System.String)">
            <summary>
            Adds a childnode as the first child (fluent API).
            </summary>
            <param name="ns">the namespace of the new child node</param>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new childnode</returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddTag(System.Xml.Linq.XNamespace,System.String,System.String)">
            <summary>
            Adds a childnode (fluent API).
            </summary>
            <param name="ns"><see cref="T:System.Xml.Linq.XNamespace"/> of the new child node</param>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new childnode</returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddTagFirst(System.Xml.Linq.XNamespace,System.String,System.String)">
            <summary>
            Adds the tag as the first child Element (fluent API).
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
            <param name="content">The content.</param>        
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetTag(System.String)">
            <summary>
            Add a new empty childnode
            </summary>
            <param name="tagname">the tagname</param>
            <returns>the new child node</returns>
            <remarks>the new element will use the namespace of its parent</remarks>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetTagFirst(System.String)">
            <summary>
            Add a new empty childnode as first child.
            </summary>
            <param name="tagname">the tagname</param>
            <returns>the new child node</returns>
            <remarks>the new element will use the namespace of its parent</remarks>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetTag(System.String,System.String)">
            <summary>
            Adds a childnode
            </summary>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new child node</returns>
            <remarks>the new element will use the namespace of its parent</remarks>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetTagFirst(System.String,System.String)">
            <summary>
            Adds a childnode as the first child.
            </summary>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new child node</returns>
            <remarks>the new element will use the namespace of its parent</remarks>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetTag(System.String,System.String,System.String)">
            <summary>
            Adds a childnode
            </summary>
            <param name="ns">the namespace of the new child node</param>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new childnode</returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetTagFirst(System.String,System.String,System.String)">
            <summary>
            Adds a childnode as the first child
            </summary>
            <param name="ns">the namespace of the new child node</param>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new childnode</returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetTag(System.Xml.Linq.XNamespace,System.String,System.String)">
            <summary>
            Adds a childnode
            </summary>
            <param name="ns"><see cref="T:System.Xml.Linq.XNamespace"/> of the new child node</param>
            <param name="tagname">the tagname</param>
            <param name="content">the value of the new tag</param>
            <returns>the new childnode</returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetTagFirst(System.Xml.Linq.XNamespace,System.String,System.String)">
            <summary>
            Adds the tag as the first child Element.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
            <param name="content">The content.</param>        
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.Elements``1">
            <summary>
            Returns a filtered collection of the child elements of this element or document, in document order.
            Only elements of the matching Type are included in the collection.
            </summary>
            <typeparam name="T">XElement type to match</typeparam>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.Element``1">
            <summary>
            Gets the first (in document order) child element with the specified Type. This member
            searches only the direct children of this element. Grandchildren all ignored.
            </summary>
            <typeparam name="T">XElement Type to match</typeparam>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.Element``1(System.Boolean)">
            <summary>
            Gets the first (in document order) child element with the specified Type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ignoreDepth">When true the search is recurive and looks for the given type in the complete Dom of this element.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.Replace``1(``0)">
            <summary>
            Replace XElement of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newel"></param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.Replace``1(``0,System.Boolean)">
            <summary>
            Replaces the specified element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newel">The newel.</param>
            <param name="addFirst">if set to <c>true</c> adds teh element as first child element.</param>
        </member>
        <member name="P:Matrix.Xml.XmppXElement.FirstElement">
            <summary>
            the first child element.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.Xml.XmppXElement.FirstXmppXElement">
            <summary>
            returns the first XmppXElement
            </summary>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.RemoveAll``1">
            <summary>
            Removes all elements of the given type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.RemoveAttribute(System.String)">
            <summary>
            Removes a attribute
            </summary>
            <param name="att">attrubute to remove</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.RemoveAttribute(System.Xml.Linq.XName)">
            <summary>
            Removes a attribute.
            </summary>
            <param name="xname">The xname.</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.HasAttribute(System.String)">
            <summary>
            check if an attribute exists
            </summary>
            <param name="attname">attribute name to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.HasAttribute(System.String,System.String)">
            <summary>
            checks if an attribute exists for the given namespace
            </summary>
            <param name="ns"></param>
            <param name="attname"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttribute(System.String)">
            <summary>
            Get a attribute as string. Returns 0 if the attribute does not exist.
            </summary>
            <param name="attname">attribute name to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttribute(System.String,System.String)">
            <summary>
            Get a "namespaced" attribute
            </summary>
            <param name="ns">namespace of the attribute</param>
            <param name="attname">attributename</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttributeInt(System.String)">
            <summary>
            Get a integer attribute. Returns 0 if the attribute does not exist.
            </summary>
            <param name="name">attribute name to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttributeLong(System.String)">
            <summary>
            Get a long attribute. Returns 0 if the attribute does not exist.
            </summary>
            <param name="name">attribute name to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttributeBool(System.String)">
            <summary>
            Get a boolean attribute. Returns false if the attribute does not exist.
            </summary>
            <param name="name">attribute name to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttributeJid(System.String)">
            <summary>
            Get a Jid attribute. Returns null if the attribute does not exist.
            </summary>
            <param name="name">attribute name to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttributeDouble(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="name">attribute name to lookup</param>
            <param name="ifp"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttributeBase64(System.String)">
            <summary>
            Gets attribute that was set as B64
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttributeDouble(System.String)">
            <summary>
            Get a Attribute of type double (Decimal seperator = ".")
            </summary>
            <param name="name">attribute name to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.GetAttributeEnum``1(System.String)">
            <summary>
            Get a Attribute of type enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">attribute name to lookup</param>
            <returns></returns>
            <remarks>
            returns -1 if the enumueration value was not found in the enum, or the attribute does not exist
            </remarks>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetAttribute(System.String,System.Int32)">
            <summary>
            Sets a "integer" attribute
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value as integer</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetAttribute(System.String,System.Int64)">
            <summary>
            Sets a "long" attribute
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value as long</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetAttribute(System.String,System.Boolean)">
            <summary>
            Sets a "boolean" attribute, the value is either 'true' or 'false'
            </summary>
            <param name="name">attribute name</param>
            <param name="val">attribute value as boolean</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetAttribute(System.String,Matrix.Jid)">
            <summary>
            Set a attribute of type Jid
            </summary>
            <param name="name">attribute name</param>
            <param name="jid">value of the attribute, or null to remove the attribute</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetAttribute(System.String,System.Double)">
            <summary>
            Set a "double" attribute with english number format
            </summary>
            <param name="name">attribute name</param>
            <param name="value">value of the attribute as double</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetAttribute(System.String,System.Double,System.IFormatProvider)">
            <summary>
            Set a "double" attribute with the given FormatProvider
            </summary>
            <param name="name">attribute name</param>
            <param name="value">value of teh attribute as double</param>
            <param name="ifp">IFormatProvider</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetAttributeBase64(System.String,System.Byte[])">
            <summary>
            Sets Attribute as base64 string
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.StartTag">
            <summary>
            Get only the start Tag of the element
            </summary>
            <remarks>
            The start tag of the following xml:
            <code>
            &lt;message from=&#39;user@server.org&#39; type=&#39;chat&#39;&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/message&gt;
            </code>
            is
            <code>
            &lt;message from=&#39;user@server.org&#39; type=&#39;chat&#39;&gt;
            </code>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.EndTag">
            <summary>
            Get only the end tag of the element
            </summary>
            <remarks>
            The end tag of the following xml:
            <code>
            &lt;message from=&#39;user@server.org&#39; type=&#39;chat&#39;&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/message&gt;
            </code>
            is
            <code>
            &lt;/message&gt;
            </code>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddOrRemoveTag(System.String,System.Boolean)">
            <summary>
            Adds or removes the given empty tag.
            </summary>
            <param name="tagname">The tagname.</param>
            <param name="add">if set to <c>true</c> add, otherwise remove.</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.AddOrRemoveTag(System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds or removes the given empty tag.
            </summary>
            <param name="tagname">The tagname.</param>
            <param name="add">if set to <c>true</c> [add].</param>
            <param name="addFirst">if set to <c>true</c> [add first].</param>
        </member>
        <member name="P:Matrix.Xml.XmppXElement.XmlLanguage">
            <summary>
            Gets or sets the XML language.
            </summary>
            <value>The XML language.</value>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.SetNamespacedAttribute(System.String,System.String,System.String)">
            <summary>
            Adds a namespaced attribute (prefix:name="value")
            </summary>
            <param name="ns">The namespace.</param>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:Matrix.Xml.XmppXElement.RemoveNamespaceDeclaration(System.String)">
            <summary>
            this gets used as a hack to remove the namespace declarations on the stanzas
            when the transport is socket.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Actions.Execute">
            <summary>
            Gets or sets the execute action, only complete, next and previous is allowed
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Actions.Complete">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Matrix.Xmpp.AdHocCommands.Actions"/> is "complete".
            </summary>
            <value><c>true</c> if complete; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Actions.Next">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Matrix.Xmpp.AdHocCommands.Actions"/> is "next".
            </summary>
            <value><c>true</c> if next; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Actions.Previous">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Matrix.Xmpp.AdHocCommands.Actions"/> is "previous".
            </summary>
            <value><c>true</c> if previous; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Actions.Action">
            <summary>
            Actions, only complete, prev and next are allowed here and can be combined
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Command.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Command.SessionId">
            <summary>
            Gets or sets the session id.
            </summary>
            <value>The session id.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Command.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Command.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Command.Note">
            <summary>
            Gets or sets the note.
            </summary>
            <value>The note.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Command.XData">
            <summary>
            Gets or sets the X data.
            </summary>
            <value>The X data.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdHocCommands.Note.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="F:Matrix.Xmpp.AdHocCommands.NoteType.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.AdvancedMessageProcessing.Action.Alert">
            <summary>
            Namespace: http://jabber.org/protocol/amp?action=drop
            Behavior: The message is silently discarded but an alert is returned to the sender.
            Defined in XEP-0079: Advanced Message Processing.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.AdvancedMessageProcessing.Action.Drop">
            <summary>
            Namespace: http://jabber.org/protocol/amp?action=drop
            Behavior: The message is silently discarded.
            Defined in XEP-0079: Advanced Message Processing.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.AdvancedMessageProcessing.Action.Error">
            <summary>
            Namespace: http://jabber.org/protocol/amp?action=error
            Behavior: The message is not processed and an error is returned to the sender, specifying which rule resulted in failed processing.
            Defined in XEP-0079: Advanced Message Processing.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.AdvancedMessageProcessing.Action.Notify">
            <summary>
            Namespace: http://jabber.org/protocol/amp?action=notify
            Behavior: The message is processed and a notification message is returned to the sender, specifying which rule was processed.
            Defined in XEP-0079: Advanced Message Processing.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.AdvancedMessageProcessing.Amp.From">
            <summary>
            Gets or sets the from Jid.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdvancedMessageProcessing.Amp.To">
            <summary>
            Gets or sets the to Jid.
            </summary>
            <value>To.</value>
        </member>
        <member name="P:Matrix.Xmpp.AdvancedMessageProcessing.Amp.PerHop">
            <summary>
            The 'per-hop' attribute flags the contained ruleset for processing at each server in the route 
            between the original sender and original intended recipient. 
            This attribute MAY be present, and MUST be either "true" or "false". 
            If not present, the default is "false".
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.AdvancedMessageProcessing.Amp.Status">
            <summary>
            The 'status' attribute specifies the reason for the amp element.
            When specifying semantics to be applied (client to server), this attribute MUST NOT be present. 
            When replying to a sending entity regarding a met condition, this attribute MUST be present and 
            SHOULD be the value of the 'action' attribute for the triggered rule. 
            (Note: Individual action definitions MAY provide their own requirements.)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.AdvancedMessageProcessing.Condition.Deliver">
            <summary>
            Namespace: http://jabber.org/protocol/amp?condition=deliver
            Syntax: [direct|forward|gateway|none|stored]
            Processing: The condition is met if (1) the value is "direct" and the message can be immediately delivered or further dispatched, or (2) the value is "stored" and offline storage is enabled.
            Per-Hop: true
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.AdvancedMessageProcessing.Condition.ExpireAt">
            <summary>
            Namespace: http://jabber.org/protocol/amp?condition=expire-at
            Syntax: DateTime per XEP-0082
            Processing: The condition is met if the message cannot be delivered before the specified DateTime.
            Per-Hop: true
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.AdvancedMessageProcessing.Condition.MatchResource">
            <summary>
            Namespace: http://jabber.org/protocol/amp?condition=match-resource
            Syntax: [any|exact|other]
            Processing: The condition is met if (1) the value is "any" and the intended recipient has at least one available resource (as defined in the XMPP IM specification); (2) the value "exact" and the intended recipient has an available resource that exactly matches the JID specified in the 'to' address; (3) the value is "other" and the intended recipient has an available resource whose full JID is other than that specified in the 'to' address.
            Per-Hop: false
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.AdvancedMessageProcessing.Rule.ValueAsString">
            <summary>
            The 'value' attribute defines how the condition is matched. 
            This attribute MUST be present, and MUST NOT be an empty string (""). 
            The interpretation of this attribute's value is determined by the 'condition' attribute.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.AdvancedMessageProcessing.Rule.Action">
            <summary>
            The 'action' attribute defines the result for this rule. 
            This attribute MUST be present, and MUST be either a value defined in the Defined Actions section, 
            or one registered with the XMPP Registrar.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.AdvancedMessageProcessing.Rule.Condition">
            <summary>
            The 'condition' attribute defines the overall condition this rule applies to. 
            This attribute MUST be present, and MUST be either a value defined in the Defined Conditions section, 
            or one registered with the XMPP Registrar.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Attention.Attention">
            <summary>
            XEP-0224 Attention
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Auth.Auth">
            <summary>
            Non SASL authentication (XEP-0078)
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Auth.Auth.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Matrix.Xmpp.Auth.Auth.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Matrix.Xmpp.Auth.Auth.Resource">
            <summary>
            Gets or sets the resource.
            </summary>
            <value>The resource.</value>
        </member>
        <member name="T:Matrix.Xmpp.Base.XmppXElementWithAddress">
            <summary>
            AddressedXmppXElement
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddress.#ctor(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddress.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="prefix">The prefix.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddress.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddress.#ctor(System.Xml.Linq.XName)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddress.#ctor(System.Xml.Linq.XName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddress.#ctor(System.Xml.Linq.XName,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddress.#ctor(System.Xml.Linq.XStreamingElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="other">An <see cref="T:System.Xml.Linq.XStreamingElement"/> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="P:Matrix.Xmpp.Base.XmppXElementWithAddress.From">
            <summary>
            Gets or sets the from Jid.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.XmppXElementWithAddress.To">
            <summary>
            Gets or sets the to Jid.
            </summary>
            <value>To.</value>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddress.SwitchDirection">
            <summary>
            Switches the from and to attributes when existing
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute.#ctor(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="prefix">The prefix.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute.#ctor(System.Xml.Linq.XName)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute.#ctor(System.Xml.Linq.XName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute.#ctor(System.Xml.Linq.XName,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute.#ctor(System.Xml.Linq.XStreamingElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttribute"/> class.
            </summary>
            <param name="other">An <see cref="T:System.Xml.Linq.XStreamingElement"/> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.#ctor(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1" /> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1" /> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="prefix">The prefix.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.#ctor(System.Xml.Linq.XName)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.#ctor(System.Xml.Linq.XName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.#ctor(System.Xml.Linq.XName,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.#ctor(System.Xml.Linq.XStreamingElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1"/> class.
            </summary>
            <param name="other">An <see cref="T:System.Xml.Linq.XStreamingElement"/> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.AddItem">
            <summary>
            Adds an item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.AddItem(`0)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.AddItems(`0[])">
            <summary>
             Adds multiple items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.GetItems">
            <summary>
            Gets all items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.SetItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the Items.
            </summary>
            <param name="items">The Items.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndIdAttributeAndItemCollection`1.RemoveAllItems">
            <summary>
            Removes all Items.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.#ctor(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="prefix">The prefix.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.#ctor(System.Xml.Linq.XName)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.#ctor(System.Xml.Linq.XName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.#ctor(System.Xml.Linq.XName,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.#ctor(System.Xml.Linq.XStreamingElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1" /> class.
            </summary>
            <param name="other">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.AddItem">
            <summary>
            Adds an item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.AddItem(`0)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.AddItems(`0[])">
            <summary>
             Adds multiple items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.GetItems">
            <summary>
            Gets all items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.SetItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the Items.
            </summary>
            <param name="items">The Items.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithItemCollection`1.RemoveAllItems">
            <summary>
            Removes all Items.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.XmppXElementWithJidAttribute.Jid">
            <summary>
            Gets or sets the jid.
            </summary>
            <value>The jid.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Manager.XmppClient">
            <summary>
            Gets or sets the XMPP client.
            </summary>
            <value>The XMPP client.</value>
        </member>
        <member name="M:Matrix.Xmpp.Base.Manager.Send(Matrix.Xmpp.Client.Iq,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Sends the specified iq.
            </summary>
            <param name="iq">The iq.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
            <exception cref="T:Matrix.PropertyNotSetException">Throws PropertyNotSetException when the XmppClient property is null.</exception>
        </member>
        <member name="M:Matrix.Xmpp.Base.Manager.Send(Matrix.Xml.XmppXElement)">
            <summary>
            Sends the specified el.
            </summary>
            <param name="el">The el.</param>
            <exception cref="T:Matrix.PropertyNotSetException"></exception>
        </member>
        <member name="P:Matrix.Xmpp.Base.Sasl.Bytes">
            <summary>
            sets the value of a SASL step element (challenge, response, auth).
            The value gets is converted to Base64.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Subscription.Jid">
            <summary>
            Gets or sets the jid.
            </summary>
            <value>The jid.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Subscription.Id">
            <summary>
            Gets or sets the subscription id.
            </summary>
            <value>The subscription id.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Subscription.SubscriptionState">
            <summary>
            Gets or sets the state of the subscription state.
            </summary>
            <value>The state of the subscription.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.XmppXElementWithResultSet.ResultSet">
            <summary>
            Gets or sets the result set.
            </summary>
            <value>
            The result set.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Base.XmppXElementWithResultSetAndXData.XData">
            <summary>
            Gets or sets the Xdata object.
            </summary>
            <value>The X data.</value>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithResultSetAndXDataAndItemCollection`1.AddItem">
            <summary>
            Adds an item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithResultSetAndXDataAndItemCollection`1.AddItem(`0)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithResultSetAndXDataAndItemCollection`1.AddItems(`0[])">
            <summary>
             Adds multiple items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithResultSetAndXDataAndItemCollection`1.GetItems">
            <summary>
            Gets all items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithResultSetAndXDataAndItemCollection`1.SetItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the Items.
            </summary>
            <param name="items">The Items.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithResultSetAndXDataAndItemCollection`1.RemoveAllItems">
            <summary>
            Removes all Items.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.XmppXElementWithResultSetAndXDataAndItemCollection`1.XData">
            <summary>
            Gets or sets the Xdata object.
            </summary>
            <value>The X data.</value>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithRules.AddRule">
            <summary>
            Adds a rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithRules.AddRule(Matrix.Xmpp.AdvancedMessageProcessing.Rule)">
            <summary>
            Adds a rule.
            </summary>
            <param name="rule">The rule.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithRules.GetRules">
            <summary>
            Gets all rules.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithRules.SetItems(System.Collections.Generic.IEnumerable{Matrix.Xmpp.AdvancedMessageProcessing.Rule})">
            <summary>
            Sets the rules.
            </summary>
            <param name="rules">The rules.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithRules.RemoveAllRules">
            <summary>
            Removes all rules.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.XmppXElementWithXData.XData">
            <summary>
            Gets or sets the Xdata object.
            </summary>
            <value>The X data.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Error.Condition">
            <summary>
            the error condition
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Error.Text">
            <summary>
            The optional error text
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Base.ErrorCondition">
            <summary>
            stanza error condition as defined in RFC 3920 9.3
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.BadRequest">
            <summary>
            The sender has sent a stanza containing XML that does not conform to the appropriate schema or that 
            cannot be processed (e.g., an IQ stanza that includes an unrecognized value of the 'type' attribute);
            the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.Conflict">
            <summary>
            Access cannot be granted because an existing resource exists with the same name or address; 
            the associated error type SHOULD be "cancel". 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.FeatureNotImplemented">
            <summary>
            The feature represented in the XML stanza is not implemented by the intended recipient or 
            an intermediate server and therefore the stanza cannot be processed; the associated error type SHOULD 
            be "cancel" or "modify".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.Forbidden">
            <summary>
            The requesting entity does not possess the required permissions to perform the action; 
            the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.Gone">
            <summary>
            The recipient or server can no longer be contacted at this address 
            (the error stanza MAY contain a new address in the XML character data of the &lt;gone/&gt; element); 
            the associated error type SHOULD be "cancel" or "modify".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.InternalServerError">
            <summary>
            The server could not process the stanza because of a misconfiguration or an otherwise-undefined 
            internal server error; the associated error type SHOULD be "wait" or "cancel".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.ItemNotFound">
            <summary>
            The addressed JID or item requested cannot be found; the associated error type SHOULD be "cancel" or "modify".
            </summary>
            <remarks>        
            An application MUST NOT return this error if doing so would provide information about the intended 
            recipient's network availability to an entity that is not authorized to know such information; 
            instead it SHOULD return a &lt;service-unavailable/&gt; error.
            </remarks> 
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.JidMalformed">
            <summary>
            The sending entity has provided or communicated an XMPP address 
            (e.g., a value of the 'to' attribute) or aspect thereof (e.g., an XMPP resource identifier) 
            that does not adhere to the syntax defined under RFC3920 Section 3 (Addresses); 
            the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.NotAcceptable">
            <summary>
            The recipient or server understands the request but is refusing to process it because it does not
            meet criteria defined by the recipient or server (e.g., a local policy regarding stanza size 
            limits or acceptable words in messages); the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.NotAllowed">
            <summary>
            The recipient or server does not allow any entity to perform the action (e.g., sending to entities at 
            a blacklisted domain); the associated error type SHOULD be "cancel".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.NotAuthorized">
            <summary>
            The sender must provide proper credentials before being allowed to perform the action, or has provided 
            improper credentials; the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.NotModified">
            <summary>
            The item requested has not changed since it was last requested; the associated error type SHOULD be "continue".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.PaymentRequired">
            <summary>
            The requesting entity is not authorized to access the requested service because payment is required; 
            the associated error type SHOULD be "auth".
            </summary>   
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.RecipientUnavailable">
            <summary>
            The intended recipient is temporarily unavailable; the associated error type SHOULD be "wait".
            </summary>
            <remarks>
            An application MUST NOT return this error if doing so would provide information about the 
            intended recipient's network availability to an entity that is not authorized to know such 
            information; instead it SHOULD return a &lt;service-unavailable/&gt; error.
            </remarks>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.Redirect">
            <summary>
            The recipient or server is redirecting requests for this information to another entity, 
            typically in a temporary fashion; the associated error type SHOULD be "modify" and the error stanza
            SHOULD contain the alternate address (which SHOULD be a valid JID) in the XML character data 
            of the &lt;redirect/&gt; element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.RegistrationRequired">
            <summary>
            The requesting entity is not authorized to access the requested service because prior 
            registration is required; the associated error type SHOULD be &quot;auth&quot;.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.RemoteServerNotFound">
            <summary>
            A remote server or service specified as part or all of the JID of the intended recipient 
            does not exist; the associated error type SHOULD be &quot;cancel&quot;.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.RemoteServerTimeout">
            <summary>
            A remote server or service specified as part or all of the JID of the intended recipient 
            (or required to fulfill a request) could not be contacted within a reasonable amount 
            of time; the associated error type SHOULD be &quot;wait&quot;.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.ResourceConstraint">
            <summary>
            The server or recipient lacks the system resources necessary to service the request; 
            the associated error type SHOULD be "wait".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.ServiceUnavailable">
            <summary>
            The server or recipient does not currently provide the requested service; 
            the associated error type SHOULD be &quot;cancel&quot;.
            </summary>
            <remarks>
            An application SHOULD return a &lt;service-unavailable/&gt; error instead of 
            &lt;item-not-found/&gt; or &lt;recipient-unavailable/&gt; if sending one of the latter 
            errors would provide information about the intended recipient&#39;s network 
            availability to an entity that is not authorized to know such information.
            </remarks>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.SubscriptionRequired">
            <summary>
            The requesting entity is not authorized to access the requested service 
            because a prior subscription is required; the associated error type SHOULD be &quot;auth&quot;.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.UndefinedCondition">
            <summary>
            The error condition is not one of those defined by the other conditions in this list; 
            any error type may be associated with this condition, and it SHOULD be used only in conjunction 
            with an application-specific condition.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.UnexpectedRequest">
            <summary>
            The recipient or server understood the request but was not expecting it at this time 
            (e.g., the request was out of order); the associated error type SHOULD be "wait" or "modify".
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorCondition.PolicyViolation">
            <summary>
            the entity has violated some local service policy; the server MAY choose to specify the policy in 
            the &lt;text/&gt; element or an application-specific condition element.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Base.ErrorType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorType.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorType.Continue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorType.Modify">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorType.Auth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Base.ErrorType.Wait">
            <summary>
            
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Base.Iq">
            <summary>
            Base Iq Stanza
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.Iq.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.Iq"/> class.
            </summary>
            <param name="ns">The ns.</param>
        </member>
        <member name="P:Matrix.Xmpp.Base.Iq.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Iq.Query">
            <summary>
            The query child of this Iq. Because the query tag can be in many different namespaces this
            member returns the first childnode which schould be the query in nearly all cases.
            Otherwise use XLinq routines to get the information.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Iq.XData">
            <summary>
            Gets or sets the Xdata object.
            </summary>
            <value>The X data.</value>
        </member>
        <member name="T:Matrix.Xmpp.Base.Stream">
            <summary>
            Represents a XMPP stream header
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Stream.Version">
            <summary>
            See XMPP-Core 4.4.1 "Version Support"
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Affiliation.AffiliationType">
            <summary>
            the message type (chat, groupchat, normal, headline or error).
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Affiliations.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Matrix.Xmpp.Base.Subscriptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.Subscriptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.Subscriptions"/> class.
            </summary>
            <param name="ns">The ns.</param>
        </member>
        <member name="P:Matrix.Xmpp.Base.Subscriptions.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="M:Matrix.Xmpp.Base.Subscriptions.AddSubscription(Matrix.Xmpp.Base.Subscription)">
            <summary>
            Adds a subscription.
            </summary>
            <param name="subcription">The sub.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.Subscriptions.SetSubscriptions(System.Collections.Generic.IEnumerable{Matrix.Xmpp.Base.Subscription})">
            <summary>
            Sets the subscriptions.
            </summary>
            <param name="subcriptions">The subcriptions.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.Subscriptions.RemoveAllSubscriptions">
            <summary>
            Removes all subscriptions.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId">
            <summary>
            This class represents a XMPP Stanza
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.#ctor(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="ns">The ns.</param>
            <param name="prefix">The prefix.</param>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.#ctor(System.Xml.Linq.XName)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.#ctor(System.Xml.Linq.XName,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.#ctor(System.Xml.Linq.XName,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.#ctor(System.Xml.Linq.XStreamingElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.XmppXElementWithAddressAndId"/> class.
            </summary>
            <param name="other">An <see cref="T:System.Xml.Linq.XStreamingElement"/> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement"/>.</param>
        </member>
        <member name="P:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="M:Matrix.Xmpp.Base.XmppXElementWithAddressAndId.GenerateId">
            <summary>
            Generates a automatic id for the packet.
            !!! Overwrites existing Ids
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.Xmpp.Base.Group.Name">
            <summary>
            gets or sets the Name of the contact group
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Base.Item">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.Item.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.Item"/> class.
            </summary>
            <param name="ns">The ns.</param>
        </member>
        <member name="P:Matrix.Xmpp.Base.Item.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Item.Name">
            <summary>
            Gets the name of this element.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Xml.Linq.XName"/> that contains the name of this element.
            </returns>
        </member>
        <member name="T:Matrix.Xmpp.Base.RosterItem">
            <summary>
            Abstract RosterItem
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.RosterItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Base.RosterItem"/> class.
            </summary>
            <param name="ns">The ns.</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.RosterItem.AddGroup(System.String)">
            <summary>
            Add a new group to the contact
            </summary>
            <param name="groupname"></param>
        </member>
        <member name="P:Matrix.Xmpp.Base.RosterItem.HasGroups">
            <summary>
            is this contact in any groups?
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.RosterItem.HasGroup(System.String)">
            <summary>
            check if the contact is i na specific group
            </summary>
            <param name="groupname"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.RosterItem.RemoveGroup(System.String)">
            <summary>
            remove the contact from a group
            </summary>
            <param name="groupname">group to remove</param>
        </member>
        <member name="M:Matrix.Xmpp.Base.RosterItem.GetGroupXElements">
            <summary>
            Get all groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.RosterItem.GetGroups">
            <summary>
            Gets all the roster groups.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Base.Message">
            <summary>
            Abstract message base class
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Body">
            <summary>
            The body of the message. This contains the message text.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Subject">
            <summary>
            subject of this message. Its like a subject in a email. The Subject is optional.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Thread">
            <summary>
            messages and conversations could be threaded. You can compare this with threads in newsgroups or forums.
            Threads are optional.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Type">
            <summary>
            the message type (chat, groupchat, normal, headline or error).
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.IsRosterExchange">
            <summary>
            Gets a value indicating whether this message is a roster exchange.
            </summary>
            <value>
            <c>true</c> if this instance is roster exchange; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Matrix.Xmpp.Base.Message.CreateNewThread">
            <summary>
            Create a new unique thread indendifier
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Base.Message.RequestReceipt">
            <summary>
            Requests a message delivery receipt for this message (XEP-0184).
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Base.Message.DeliveryReceipt(System.String)">
            <summary>
            Generates the delivery receipt for this message (XEP-0184).
            </summary>
            <param name="id">The id of the message to acknowledge</param>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Request">
            <summary>
            The Request object for message delivery receipts (XEP-0184).
            </summary>
            <value>
            The Request object, or null when this message contains no message delivery request.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.ReceiptRequested">
            <summary>
            Gets a value indicating whether message receipt is requested by the sender (XEP-0184).
            </summary>
            <value>
              <c>true</c> if message receipt requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Received">
            <summary>
            Gets the message delivery receipt object for message delivery receipts (XEP-0184).
            </summary>
            <value>
            The Received object, or null when this message contains no message delivery receipt.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.IsReceipt">
            <summary>
            Gets a value indicating whether the message is or contains a delivery receipt (XEP-0184).
            </summary>
            <value>
              <c>true</c> if message is or contains a delivery receipt; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Nick">
            <summary>
            Gets or sets the nickname.
            </summary>
            <value>The nick.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Delay">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Base.Message.Delay"/>.
            </summary>
            <value>The delay.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.XDelay">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Base.Message.XDelay"/>.
            </summary>
            <value>The X delay.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.XData">
            <summary>
            Gets or sets the Xdata object.
            </summary>
            <value>The X data.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.XMucUser">
            <summary>
            Gets or sets the X muc user.
            </summary>
            <value>
            The X muc user.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.XHtml">
            <summary>
            Gets or sets the X-HTML object.
            </summary>
            <value>The X HTML.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.SecurityLabel">
            <summary>
            Gets or sets the security label (XEP-0258).
            </summary>
            <value>
            The security label.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Replace">
            <summary>
            Gets or sets the Replace Element (XEP-0308: Last Message Correction).
            </summary>
            <value>The nick.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Chatstate">
            <summary>
            Gets or sets the chatstate.
            </summary>
            <value>The chatstate.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Addresses">
            <summary>
            Gets or sets the addresses.
            (XEP-0033: Extended Stanza Addressing)
            </summary>
            <value>The nick.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Headers">
            <summary>
            SHIM Header (XEP-0131: Stanza Headers and Internet Metadata?)
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Message.Error">
            <summary>
            Error object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Base.Presence">
            <summary>
            Presence Base class
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Presence.Status">
            <summary>
            The OPTIONAL status contains a natural-language description of availability status. 
            It is normally used in conjunction with the show element to provide a detailed description of an availability state 
            (e.g., "In a meeting").
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Presence.Type">
            <summary>
            The type of a presence stanza is OPTIONAL. 
            A presence stanza that does not possess a type attribute is used to signal to the server that the sender is online and available 
            for communication. If included, the type attribute specifies a lack of availability, a request to manage a subscription 
            to another entity's presence, a request for another entity's current presence, or an error related to a previously-sent 
            presence stanza.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Presence.Show">
            <summary>
            The OPTIONAL show element contains non-human-readable XML character data that specifies the particular availability
            status of an entity or specific resource.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Base.Presence.Priority">
            <summary>
            The priority level of the resource. The value MUST be an integer between -128 and +127. 
            If no priority is provided, a server SHOULD consider the priority to be zero.         
            </summary>
            <remarks>
            For information regarding the semantics of priority values in stanza routing 
            within instant messaging and presence applications, refer to Server Rules 
            for Handling XML StanzasServer Rules for Handling XML Stanzas.
            </remarks>
        </member>
        <member name="P:Matrix.Xmpp.Base.Presence.Delay">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Base.Presence.Delay"/>.
            </summary>
            <value>The delay.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Presence.XDelay">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Base.Presence.XDelay"/>.
            </summary>
            <value>The X delay.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Presence.Muc">
            <summary>
            Gets or sets the <see cref="T:Matrix.Xmpp.Muc.User.X"/>.
            </summary>
            <value>The muc.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Presence.MucUser">
            <summary>
            Gets or sets the <see cref="T:Matrix.Xmpp.Muc.User.X"/>.
            </summary>
            <value>The muc user.</value>
        </member>
        <member name="P:Matrix.Xmpp.Base.Presence.Caps">
            <summary>
            Gets or sets the <see cref="T:Matrix.Xmpp.Capabilities.Caps"/>.
            </summary>
            <value>The caps.</value>
        </member>
        <member name="M:Matrix.Xmpp.Blocking.BlockBase.AddItem">
            <summary>
            Adds an Item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Blocking.BlockBase.AddItem(Matrix.Xmpp.Blocking.Item)">
            <summary>
            Adds an Item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.Blocking.BlockBase.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Bookmarks.Conference">
            <summary>
            represents a conference bookmark.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Bookmarks.Conference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Bookmarks.Conference"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bookmarks.Conference.Name">
            <summary>
            A name/description for this bookmarked room
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bookmarks.Conference.AutoJoin">
            <summary>
            Should the client join this room automatically after successfuil login?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bookmarks.Conference.Jid">
            <summary>
            The Jid of the bookmarked room
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bookmarks.Conference.Nickname">
            <summary>
            The Nickname for this room
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bookmarks.Conference.Password">
            <summary>
            The password for password protected rooms
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Bookmarks.Storage.AddConference">
            <summary>
            Adds a conference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Bookmarks.Storage.AddConference(Matrix.Xmpp.Bookmarks.Conference)">
            <summary>
            Adds a conference.
            </summary>
            <param name="conference">The conference.</param>
        </member>
        <member name="M:Matrix.Xmpp.Bookmarks.Storage.GetConferences">
            <summary>
            Gets all conferences.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Bookmarks.Storage.SetConferences(System.Collections.Generic.IEnumerable{Matrix.Xmpp.Bookmarks.Conference})">
            <summary>
            Sets the conferences.
            </summary>
            <param name="conferences">The conferences.</param>
        </member>
        <member name="M:Matrix.Xmpp.Bookmarks.Storage.RemoveAllConferences">
            <summary>
            Removes all Items.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bosh.Body.Wait">
            <summary>
            Specifies the longest time (in seconds) that the connection manager is allowed to wait before responding to any request 
            during the session. This enables the client to limit the delay before it discovers any network failure, 
            and to prevent its HTTP/TCP connection from expiring due to inactivity.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bosh.Body.MaxPause">
            <summary>
            If the connection manager supports session pausing (inactivity) then it SHOULD advertise that to the client by including a 'maxpause'
            attribute in the session creation response element. The value of the attribute indicates the maximum length of a temporary 
            session pause (in seconds) that a client MAY request.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bosh.Body.To">
            <summary>
            Specifies the target domain of the first stream.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bosh.Body.Hold">
            <summary>
            specifies the maximum number of requests the connection manager is allowed to keep waiting at any one time during the session. 
            If the client is not able to use HTTP Pipelining then this SHOULD be set to "1".
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bosh.Body.Version">
            <summary>
            Specifies the highest version of the BOSH protocol that the client supports.
            The numbering scheme is major.minor (where the minor number MAY be incremented higher than a single digit,
            so it MUST be treated as a separate integer).
            </summary>
            <value>The version.</value>
            <remarks>
            The version should not be confused with the version of any protocol being transported.
            </remarks>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.BadRequest">
            <summary>
            The format of an HTTP header or binding element received from the client is unacceptable (e.g., syntax error).
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.HostGone">
            <summary>
            The target domain specified in the 'to' attribute or the target host or port specified in the 'route' attribute is no longer 
            serviced by the connection manager.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.HostUnknown">
            <summary>
            The target domain specified in the 'to' attribute or the target host or port specified in the 'route' attribute is unknown 
            to the connection manager.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.ImproperAddressing">
            <summary>
            The initialization element lacks a 'to' or 'route' attribute (or the attribute has no value) but the connection manager requires one.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.InternalServerError">
            <summary>
            The connection manager has experienced an internal error that prevents it from servicing the request.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.ItemNotFound">
            <summary>
            (1) 'sid' is not valid, 
            (2) 'stream' is not valid, 
            (3) 'rid' is larger than the upper limit of the expected window, 
            (4) connection manager is unable to resend response, 
            (5) 'key' sequence is invalid.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.OtherRequest">
            <summary>
            Another request being processed at the same time as this request caused the session to terminate.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.PolicyViolation">
            <summary>
            The client has broken the session rules (polling too frequently, requesting too frequently, sending too many simultaneous requests).
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.RemoteConnectionFailed">
            <summary>
            The connection manager was unable to connect to, or unable to connect securely to, or has lost its connection to, the server.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.RemoteStreamError">
            <summary>
            Encapsulates an error in the protocol being transported.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.SeeOtherUri">
            <summary>
            The connection manager does not operate at this URI (e.g., the connection manager accepts only SSL or TLS connections at some
            https: URI rather than the http: URI requested by the client). The client can try POSTing to the URI in the content of the
            &lt;uri/&gt; child element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.SystemShutdown">
            <summary>
            The connection manager is being shut down. All active HTTP sessions are being terminated. No new sessions can be created.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Bosh.Condition.UndefinedCondition">
            <summary>
            The error is not one of those defined herein; the connection manager SHOULD include application-specific information in the
            content of the <body/> wrapper.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bytestreams.Activate.Jid">
            <summary>
            the full JID of the Target to activate
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Bytestreams.Bytestream.AddStreamhost">
            <summary>
            Adds a atreamhost.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Bytestreams.Bytestream.AddStreamhost(Matrix.Xmpp.Bytestreams.Streamhost)">
            <summary>
            Adds the streamhost.
            </summary>
            <param name="shost">The streamhost.</param>
        </member>
        <member name="M:Matrix.Xmpp.Bytestreams.Bytestream.GetStreamhosts">
            <summary>
            Gets all streamhosts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Bytestreams.Bytestream.SetStreamhosts(System.Collections.Generic.IEnumerable{Matrix.Xmpp.Bytestreams.Streamhost})">
            <summary>
            Sets the streamhosts.
            </summary>
            <param name="shosts">The streamhosts.</param>
        </member>
        <member name="M:Matrix.Xmpp.Bytestreams.Bytestream.RemoveAllStreamhosts">
            <summary>
            Removes all streamhosts.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bytestreams.Streamhost.Host">
            <summary>
            the hostname or IP address of the StreamHost for SOCKS5 communications over TCP
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bytestreams.Streamhost.Zeroconf">
            <summary>
            specifies the zero-configuration service available for bytestreaming.
            This value SHOULD be present. The value SHOULD be '_jabber.bytestreams'.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bytestreams.Streamhost.Port">
            <summary>
            a port associated with the hostname or IP address for SOCKS5 communications over TCP
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bytestreams.StreamhostUsed.Jid">
            <summary>
            The Jabber id of the streamhost
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Capabilities.Caps.Node">
            <summary>
            Required node attribute
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Capabilities.Caps.Version">
            <summary>
            Required version attribute
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Capabilities.Caps.Hash">
            <summary>
            Required Hash-Type.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Capabilities.Caps.HashAlgorithm">
            <summary>
            Sets the hash algorithm. It does the same as the Hash member, only using a enum type instead of a string
            as parameter.
            </summary>
            <value>
            The hash algorithm.
            </value>
        </member>
        <member name="M:Matrix.Xmpp.Capabilities.Caps.SetVersion(Matrix.Xmpp.Disco.Info)">
            <summary>
            Builds and sets the caps ver attribute from a disco info object
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Matrix.Xmpp.Capabilities.Caps.BuildHash(Matrix.Xmpp.Disco.Info)">
            <summary>
            Build the caps hash from the given disco info object with the default hash algorithmn SHA1
            </summary>
            <param name="di"></param>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Chatstates.Active">
            <summary>
            User is actively participating in the chat session.
            User accepts an initial content message, sends a content message, 
            gives focus to the chat interface, or is otherwise paying attention to the conversation.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Chatstates.Active.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Chatstates.Active"/> class.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Chatstates.Chatstate">
            <summary>
            Enumeration of supported Chatstates (JEP-0085)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Chatstates.Chatstate.None">
            <summary>
            No Chatstate at all
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Chatstates.Chatstate.Active">
            <summary>
            Active Chatstate
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Chatstates.Chatstate.Inactive">
            <summary>
            Inactive Chatstate
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Chatstates.Chatstate.Composing">
            <summary>
            Composing Chatstate
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Chatstates.Chatstate.Gone">
            <summary>
            Gone Chatstate
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Chatstates.Chatstate.Paused">
            <summary>
            Paused Chatstate
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Chatstates.Composing">
            <summary>
            User is composing a message.
            User is interacting with a message input interface specific to this chat session 
            (e.g., by typing in the input area of a chat window).
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Chatstates.Composing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Chatstates.Composing"/> class.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Chatstates.Gone">
            <summary>
            User has effectively ended their participation in the chat session.
            User has not interacted with the chat interface, system, or device for a relatively long period of time 
            (e.g., 2 minutes), or has terminated the chat interface (e.g., by closing the chat window).
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Chatstates.Gone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Chatstates.Gone"/> class.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Chatstates.Inactive">
            <summary>
            User has not been actively participating in the chat session.
            User has not interacted with the chat interface for an intermediate period of time (e.g., 30 seconds).
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Chatstates.Inactive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Chatstates.Inactive"/> class.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Chatstates.Paused">
            <summary>
            User had been composing but now has stopped.
            User was composing but has not interacted with the message input interface for a short period of time (e.g., 5 seconds).
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Chatstates.Paused.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Chatstates.Paused"/> class.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Client.AuthIq">
            <summary>
            This class creates a Auth Iq.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.AuthIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.AuthIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.AuthIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.AuthIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.AuthIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.AuthIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.AuthIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.AuthIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.AuthIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.AuthIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.AuthIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.AuthIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.AuthIq.Auth">
            <summary>
            Auth object
            </summary>
            <value>The Auth object.</value>
        </member>
        <member name="P:Matrix.Xmpp.Client.BytestreamIq.Bytestream">
            <summary>
            Bytestream object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Client.DiscoInfoIq">
            <summary>
            Creates a Disco info iq request
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoInfoIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoInfoIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoInfoIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoInfoIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoInfoIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoInfoIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoInfoIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoInfoIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoInfoIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoInfoIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoInfoIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoInfoIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.DiscoInfoIq.Info">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.DiscoItemsIq">
            <summary>
            Creates a Disco Items iq request
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor(Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor(Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
            <param name="to">To Jis.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoItemsIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoItemsIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
            <param name="node">The node.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.DiscoItemsIq.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.DiscoManager">
            <summary>
            DiscoManager
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.DiscoManager.OnDiscoInfoRequest">
            <summary>
            Occurs when we receive a disco info request.
            </summary>      
        </member>
        <member name="E:Matrix.Xmpp.Client.DiscoManager.OnDiscoInfoResult">
            <summary>
            Occurs when we receive a disco info result.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.DiscoManager.OnDiscoInfoError">
            <summary>
            Occurs when we receive a disco error.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.DiscoManager.OnDiscoItemsRequest">
            <summary>
            Occurs when we receive a disco items request.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.DiscoManager.OnDiscoItemsResult">
            <summary>
            Occurs when we receive a disco items result.
            </summary>     
        </member>
        <member name="E:Matrix.Xmpp.Client.DiscoManager.OnDiscoItemsError">
            <summary>
            Occurs when we receive a disco items error.
            </summary>     
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoManager"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.DiscoManager"/> class.
            </summary>
            <param name="xmppClient">The XMPP client.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.DiscoManager.CapsStorage">
            <summary>
            The storage for caps information.
            You can look client capabilities in the dictionary.
            By default the MemoryStorage is set. But you should either add your own
            provider to store caps information across session or use the FileStorage provider.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.DiscoManager.AutoReplyToDiscoInfo">
            <summary>
            Should the DiscoManage automatically reply to DiscoInfo requests?
            Default value is false
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.DiscoManager.AutoSendCaps">
            <summary>
            Should the DiscoManager automatically include the Entity Capabilities to outoing presences?
            Default value is false
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.DiscoManager.AutoDiscover">
            <summary>
            Should the DiscoManager automatically discover entities which support caps? 
            Default value is false
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.DiscoManager.Node">
            <summary>
            The node value for the Entity Capabilities.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.AddFeature(System.String)">
            <summary>
            Adds a feature.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.RemoveFeature(System.String)">
            <summary>
            Removes a feature.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.ClearFeatures">
            <summary>
            Clears the features.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.AddIdentity(Matrix.Xmpp.Disco.Identity)">
            <summary>
            Adds an identity.
            </summary>
            <param name="identity">The identity.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.RemoveIdentity(Matrix.Xmpp.Disco.Identity)">
            <summary>
            Removes an identity.
            </summary>
            <param name="identity">The identity.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.ClearIdentities">
            <summary>
            Clears the identies.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.GetCapsHash">
            <summary>
            Gets the caps hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid)">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,Matrix.Jid)">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state objecz.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state objecz.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,System.String)">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="node">The node.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="node">The node.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="node">The node.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state objecz.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverInformation(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
             Discovering information about a xmpp entity.
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="node">The node.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state objecz.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid)">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,Matrix.Jid)">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state objecz.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state objecz.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,System.String)">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="node">The node.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="node">The node.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="node">The node.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state objecz.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.DiscoverItems(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Discovers the items associated with a xmpp entity
            </summary>
            <param name="to">To jid.</param>
            <param name="from">From jid.</param>
            <param name="node">The node.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state objecz.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.DiscoManager.XmppClient_OnIq(System.Object,Matrix.Xmpp.Client.IqEventArgs)">
            <summary>
            Handles the OnIq event of the XmppClient control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Matrix.Xmpp.Client.IqEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferEventArgs.Sid">
            <summary>
            sid for this file transfer
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferEventArgs.Description">
            <summary>
            description for this file
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferEventArgs.FileSize">
            <summary>
            the filesize
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferEventArgs.Accept">
            <summary>
            accept or deny incoming file transfer
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferEventArgs.Directory">
            <summary>
            where should incoming files be stored.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferEventArgs.Filename">
            <summary>
            filename with extension (not the complete Uri or path)
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferEventArgs.Abort">
            <summary>
            abort this transfer
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferEventArgs.SI">
            <summary>
            Stream Initiation
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferEventArgs.Finished">
            <summary>
            is the transfer done?
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.FileTransferManager.OnFile">
            <summary>
            A user wants to send us a file
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.FileTransferManager.OnDeny">
            <summary>
            The filetransfer was denied by the other party.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.FileTransferManager.OnEnd">
            <summary>
            The filetransfer ended properly
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.FileTransferManager.OnStart">
            <summary>
            A filetransfer started
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.FileTransferManager.OnProgress">
            <summary>
            The progress of a single filetransfer
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferManager.IbbBlocksize">
            <summary>
            Gets or sets the block size for IBB transfers, default is 4096.
            Its not recommended to change this until you know exactly what you are doing and what your
            XMPP server settings are.
            </summary>
            <value>
            The size of the ibb block.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Client.FileTransferManager.Blocking">
            <summary>
            Sets whether the OnFile events is blocking or not.
            When blocking is false then you have to Call AcceptFile Or DenyFile to continue with the filetransfer.
            True is the default value.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.FileTransferManager.Abort(System.String)">
            <summary>
            Abort a running file transfer
            </summary>
            <param name="sid">Sid of the file transfer to abort.</param>
            <returns>true when the transfer was aborted, otherwise false.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.FileTransferManager.XmppClient_OnMessage(System.Object,Matrix.Xmpp.Client.MessageEventArgs)">
            <summary>
            Handle Transport Data chunks in message stanzas.
            We always use Iqs for Transport Data, but some clients send them in messages
            anyway.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.FileTransferManager.ProcessIBBData(Matrix.Xmpp.IBB.Data)">
            <summary>
            Write Transport data to the filestream
            </summary>
            <param name="data"></param>
            <returns>fals if Transport session not found, otherwise true</returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.FileTransferManager.SupportsStreamMethod(Matrix.Xmpp.XData.Data,System.String)">
            <summary>
            is this stream method supported?
            </summary>
            <param name="data"></param>
            <param name="streamMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.FileTransferManager.DenyFile(Matrix.Xmpp.Client.FileTransferEventArgs)">
            <summary>
            Needed in NonBlocking mode to Deny a file transfer.
            </summary>
            <param name="ftea"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.FileTransferManager.AcceptFile(Matrix.Xmpp.Client.FileTransferEventArgs)">
            <summary>
            needed in Non Blocking mode to Accept a file transfer
            </summary>
            <param name="ftea"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.FileTransferManager.GetFileTransferEventArgs(System.String)">
            <summary>
            
            </summary>
            <param name="sid"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.FileTransferManager.SendStreamOffer(Matrix.Jid,System.String,System.String)">
            <summary>
            initiate a file transfer with SI
            </summary>
            <param name="to"></param>
            <param name="filename"></param>
            <param name="description"></param>
        </member>
        <member name="T:Matrix.Xmpp.Client.IqQuery`1">
            <summary>
            A class to create Iq queries with payloads of the given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqQuery`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqQuery`1" /> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqQuery`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqQuery`1" /> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqQuery`1.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqQuery`1" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqQuery`1.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqQuery`1" /> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqQuery`1.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqQuery`1" /> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqQuery`1.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqQuery`1" /> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqQuery`1.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqQuery`1" /> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="T:Matrix.Xmpp.Client.LastIq">
            <summary>
            Last activity IQ, XEP-0012
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.LastIq.Last">
            <summary>
            Last object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Client.LicenseIq">
            <summary>
            LicenseIq class
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.LicenseIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.LicenseIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.LicenseIq.#ctor(Matrix.License.License)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.LicenseIq"/> class.
            </summary>
            <param name="lic">The license.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.LicenseIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.LicenseIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.LicenseIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.LicenseIq"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.LicenseIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.LicenseIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.LicenseIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.LicenseIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.LicenseIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.LicenseIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.LicenseIq.License">
            <summary>
            Gets or sets the license.
            </summary>
            <value>The license.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.MucManager">
            <summary>
            Helper class for MUC.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.MucManager.OnInvite">
            <summary>
            An invite message stanza was received
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.MucManager.OnDeclineInvite">
            <summary>
            An Invite was declined
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.MucManager"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.MucManager"/> class.
            </summary>
            <param name="xmppClient">The XMPP client.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.EnterRoom(Matrix.Jid,System.String)">
            <summary>
            Enter a MUC room
            </summary>
            <param name="room">Jid of the room to join.</param>
            <param name="nickname">Nickname to use in the room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.EnterRoom(Matrix.Jid,System.String,System.Boolean)">
            <summary>
            Enter a MUC room
            </summary>
            <param name="room">Jid of the room to join.</param>
            <param name="nickname">Nickname to use in the room.</param>
            <param name="disableHistory">true for joining without chat room history.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.EnterRoom(Matrix.Jid,System.String,Matrix.Xmpp.Muc.History)">
            <summary>
            Enter a MUC room
            </summary>
            <param name="room">Jid of the room to join.</param>
            <param name="nickname">Nickname to use in the room.</param>
            <param name="history">passes a history object for retrieving the history on entering the room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.EnterRoom(Matrix.Jid,System.String,System.String,Matrix.Xmpp.Muc.History)">
            <summary>
            Enter a MUC room
            </summary>
            <param name="room">Jid of the room to join.</param>
            <param name="nickname">Nickname to use in the room.</param>
            <param name="password">The password.</param>
            <param name="history">passes a history object for retrieving the history on entering the room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.EnterRoom(Matrix.Jid,System.String,System.String)">
            <summary>
            Enter a MUC room
            </summary>
            <param name="room">Jid of the room to join.</param>
            <param name="nickname">Nickname to use in the room.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.EnterRoom(Matrix.Jid,System.String,System.String,System.Boolean)">
            <summary>
            Enter a MUC room
            </summary>
            <param name="room">Jid of the room to join</param>
            <param name="nickname">Nickname to use in the room.</param>
            <param name="password">Password for password protected chat rooms.</param>
            <param name="disableHistory">true for joining without chat room history.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.CreateEnterRoomStanza(Matrix.Jid,System.String)">
            <summary>
            Creates the enter room stanza.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.CreateEnterRoomStanza(Matrix.Jid,System.String,System.String)">
            <summary>
            Creates the enter room stanza.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.CreateEnterRoomStanza(Matrix.Jid,System.String,System.String,System.Boolean,Matrix.Xmpp.Muc.History)">
            <summary>
            Creates the enter room stanza.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="password">The password.</param>
            <param name="disableHistory">if set to <c>true</c> [disable history].</param>
            <param name="history">The history.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ExitRoom(Matrix.Jid,System.String)">
            <summary>
            Leave a conference room
            </summary>
            <param name="room"></param>
            <param name="nickname"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.CreateExitRoomStanza(Matrix.Jid,System.String)">
            <summary>
            Creates the exit room stanza.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.SendPresence(Matrix.Jid,Matrix.Xmpp.Show)">
            <summary>
            Sends the presence to a room. Use this to change the show type in a roon
            </summary>
            <param name="room">The room.</param>
            <param name="show">The show.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.SendPresence(Matrix.Jid,Matrix.Xmpp.Show,System.String)">
            <summary>
            Sends the presence to a room. Use this to change Status and show type in a roon
            </summary>
            <param name="room"></param>
            <param name="show"></param>
            <param name="status"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.Invite(Matrix.Jid,Matrix.Jid)">
            <summary>
            Invite a contact to join a chatroom
            </summary>
            <param name="to">The Jid of the contact to invite</param>
            <param name="room">The Jid of the chatroom</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.Invite(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Invite a contact to join a chatroom
            </summary>
            <param name="to">The Jid of the contact to invite</param>
            <param name="room">The Jid of the chatroom</param>
            <param name="reason">The reason for this invite.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.Invite(Matrix.Jid[],Matrix.Jid,System.String)">
            <summary>
            Invite multiple contacts to join a chatroom
            </summary>
            <param name="jids">The jids.</param>
            <param name="room">The room.</param>
            <param name="reason">The reason for this invite.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.Invite(Matrix.Jid[],Matrix.Jid,System.String,System.String)">
            <summary>
            Invites the specified jids.
            </summary>
            <param name="jids">The jids.</param>
            <param name="room">The room.</param>
            <param name="reason">The reason for this invite.</param>
            <param name="thread">The thread.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DeclineInvite(Matrix.Jid,Matrix.Jid)">
            <summary>
            Decline an invite
            </summary>
            <param name="to">Jid of the invitee</param>
            <param name="room">the room jid</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DeclineInvite(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Decline an invite
            </summary>
            <param name="to">Jid of the invitee</param>
            <param name="room">the room Jid</param>
            <param name="reason">a reason</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid)">
            <summary>
            Destroys a room.
            </summary>
            <param name="room">The room to destroy.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Destroys a room.
            </summary>
            <param name="room">The room to destroy.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Destroys a room.
            </summary>
            <param name="room">The room to destroy.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,System.String)">
            <summary>
            Destroys the room.
            </summary>
            <param name="room">The room.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Destroys a room.
            </summary>
            <param name="room">The room to destroy.</param>
            <param name="reason">A reason why the room gets destroyed.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Destroys a room.
            </summary>
            <param name="room">The room to destroy.</param>
            <param name="reason">A reason why the room gets destroyed.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,Matrix.Jid)">
            <summary>
            Destroys a room.
            </summary>
            <param name="room">The room.</param>
            <param name="alternativeRoom">An alternative room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Destroys the room.
            </summary>
            <param name="room">The room.</param>
            <param name="alternativeRoom">The alternative room.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Destroys the room.
            </summary>
            <param name="room">The room.</param>
            <param name="alternativeRoom">The alternative room.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Destroys a room.
            </summary>
            <param name="room">The room to destroy.</param>
            <param name="alternativeRoom">An alternative room.</param>
            <param name="reason">A reason why the room gets destroyed.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Destroys the room.
            </summary>
            <param name="room">The room to destroy.</param>
            <param name="alternativeRoom">An alternative room.</param>
            <param name="reason">A reason why the room gets destroyed.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DestroyRoom(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Destroys a room.
            </summary>
            <param name="room">The room to destroy.</param>
            <param name="alternativeRoom">An alternative room.</param>
            <param name="reason">A reason why the room gets destroyed.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DirectInvite(Matrix.Jid,Matrix.Jid)">
            <summary>
            Direct invite (XEP-0249= a contact to join a chatroom
            </summary>
            <param name="to">The Jid of the contact to invite</param>
            <param name="room">The Jid of the chatroom</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DirectInvite(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Direct invite (XEP-0249) a contact to join a chatroom
            </summary>
            <param name="to">The Jid of the contact to invite</param>
            <param name="room">The Jid of the chatroom</param>
            <param name="reason">The reason for this invite.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DirectInvite(Matrix.Jid,Matrix.Jid,System.String,System.String)">
            <summary>
            Direct invite (XEP-0249) a contact to join a chatroom
            </summary>
            <param name="to">To.</param>
            <param name="room">The room.</param>
            <param name="reason">The reason for this invite.</param>
            <param name="password">The password for the room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DirectInvite(Matrix.Jid[],Matrix.Jid)">
            <summary>
            Direct invite (XEP-0249) multiple contacts to join a chatroom
            </summary>
            <param name="jids">The jids.</param>
            <param name="room">The room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DirectInvite(Matrix.Jid[],Matrix.Jid,System.String)">
            <summary>
            Direct invite (XEP-0249) multiple contacts to join a chatroom
            </summary>
            <param name="jids">The jids.</param>
            <param name="room">The room.</param>
            <param name="reason">The reason for this invite.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.DirectInvite(Matrix.Jid[],Matrix.Jid,System.String,System.String)">
            <summary>
            Direct invites (XEP-0249) the specified jids.
            </summary>
            <param name="jids">The jids.</param>
            <param name="room">The room.</param>
            <param name="reason">The reason for this invite.</param>
            <param name="password">The password for the room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeSubject(Matrix.Jid,System.String)">
            <summary>
            Changes the subject of a room.
            </summary>
            <param name="room">The room.</param>
            <param name="newSubject">The new subject.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.KickUser(Matrix.Jid,System.String)">
            <summary>
            Kicks an occupant.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.KickUser(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Kicks an occupant.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.KickUser(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Kicks an occupant.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.KickUser(Matrix.Jid,System.String,System.String)">
            <summary>
            Kicks an occupant.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.KickUser(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Kicks an occupant.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.KickUser(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Kicks an occupant.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.BanUser(Matrix.Jid,Matrix.Jid)">
            <summary>
            Bans the user.
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.BanUser(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Bans the user.
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.BanUser(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Bans the user.
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.BanUser(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Bans the user.
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.BanUser(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Bans the user.
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.BanUser(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Bans the user.
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestAdminList(Matrix.Jid)">
            <summary>
            Requests the admin list.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestAdminList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests the admin list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestAdminList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the admin list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestBanList(Matrix.Jid)">
            <summary>
            Requests the ban list.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestBanList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests the ban list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestBanList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the ban list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestMemberList(Matrix.Jid)">
            <summary>
            Requests the member list.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestMemberList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests the member list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestMemberList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the member list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestModeratorList(Matrix.Jid)">
            <summary>
            Requests the moderator list.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestModeratorList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests the moderator list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestModeratorList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the moderator list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestOwnerList(Matrix.Jid)">
            <summary>
            Requests the owner list.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestOwnerList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests the owner list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestOwnerList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the owner list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestVoiceList(Matrix.Jid)">
            <summary>
            Requests the voice list.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestVoiceList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests the voice list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestVoiceList(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the voice list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantVoice(Matrix.Jid,System.String)">
            <summary>
            Granting voice to a visitor.
            <remarks>
            In a moderated room, a moderator may want to manage who does and does not have "voice" in the room 
            (i.e., the ability to send messages to all occupants). Voice is granted based on the visitor's room nickname, 
            which the service will convert into the visitor's full JID internally. The moderator grants voice to a visitor by 
            changing the visitor's role to "participant".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantVoice(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Grants the voice.
            <remarks>
            In a moderated room, a moderator may want to manage who does and does not have "voice" in the room
            (i.e., the ability to send messages to all occupants). Voice is granted based on the visitor's room nickname,
            which the service will convert into the visitor's full JID internally. The moderator grants voice to a visitor by
            changing the visitor's role to "participant".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantVoice(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Grants the voice.
            <remarks>
            In a moderated room, a moderator may want to manage who does and does not have "voice" in the room
            (i.e., the ability to send messages to all occupants). Voice is granted based on the visitor's room nickname,
            which the service will convert into the visitor's full JID internally. The moderator grants voice to a visitor by
            changing the visitor's role to "participant".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantVoice(Matrix.Jid,System.String,System.String)">
            <summary>
            Grants the voice.
            <remarks>
            In a moderated room, a moderator may want to manage who does and does not have "voice" in the room 
            (i.e., the ability to send messages to all occupants). Voice is granted based on the visitor's room nickname, 
            which the service will convert into the visitor's full JID internally. The moderator grants voice to a visitor by 
            changing the visitor's role to "participant".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantVoice(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Granting voice to a visitor.
            <remarks>
            In a moderated room, a moderator may want to manage who does and does not have "voice" in the room 
            (i.e., the ability to send messages to all occupants). Voice is granted based on the visitor's room nickname, 
            which the service will convert into the visitor's full JID internally. The moderator grants voice to a visitor by 
            changing the visitor's role to "participant".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantVoice(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Granting voice to a visitor.
            <remarks>
            In a moderated room, a moderator may want to manage who does and does not have "voice" in the room 
            (i.e., the ability to send messages to all occupants). Voice is granted based on the visitor's room nickname, 
            which the service will convert into the visitor's full JID internally. The moderator grants voice to a visitor by 
            changing the visitor's role to "participant".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantAdminPrivileges(Matrix.Jid,Matrix.Jid)">
            <summary>
            Grant administrative privileges.
            <remarks>
            An owner can grant administrative privileges to a 
            member or unaffiliated user; this is done by changing the user's affiliation to "admin":
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantAdminPrivileges(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Grant administrative privileges.
            <remarks>
            An owner can grant administrative privileges to a 
            member or unaffiliated user; this is done by changing the user's affiliation to "admin":
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantAdminPrivileges(Matrix.Jid,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Grant administrative privileges.
            <remarks>
            An owner can grant administrative privileges to a 
            member or unaffiliated user; this is done by changing the user's affiliation to "admin":
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantAdminPrivileges(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Grant administrative privileges.
            <remarks>
            An owner can grant administrative privileges to a 
            member or unaffiliated user; this is done by changing the user's affiliation to "admin":
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantAdminPrivileges(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Grant administrative privileges.
            <remarks>
            An owner can grant administrative privileges to a 
            member or unaffiliated user; this is done by changing the user's affiliation to "admin":
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantAdminPrivileges(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Grant administrative privileges.
            <remarks>
            An owner can grant administrative privileges to a 
            member or unaffiliated user; this is done by changing the user's affiliation to "admin":
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantMembership(Matrix.Jid,Matrix.Jid)">
            <summary>
            Grant membership.
            <remarks>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" (normally based on nick if the user is in the 
            room, or on bare JID if not; in either case, if the nick is provided, that nick becomes the user's default nick 
            in the room if that functionality is supported by the implementation).
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantMembership(Matrix.Jid,System.String)">
            <summary>
            Grant membership.
            <remarks>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" (normally based on nick if the user is in the 
            room, or on bare JID if not; in either case, if the nick is provided, that nick becomes the user's default nick 
            in the room if that functionality is supported by the implementation).
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantMembership(Matrix.Jid,System.String,System.String)">
            <summary>
            Grant membership.
            <remarks>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" (normally based on nick if the user is in the 
            room, or on bare JID if not; in either case, if the nick is provided, that nick becomes the user's default nick 
            in the room if that functionality is supported by the implementation).
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantMembership(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Grant membership.
            <remarks>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" (normally based on nick if the user is in the 
            room, or on bare JID if not; in either case, if the nick is provided, that nick becomes the user's default nick 
            in the room if that functionality is supported by the implementation).
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantMembership(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Grant membership.
            <remarks>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" (normally based on nick if the user is in the 
            room, or on bare JID if not; in either case, if the nick is provided, that nick becomes the user's default nick 
            in the room if that functionality is supported by the implementation).
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantMembership(Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Grant membership.
            <remarks>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" (normally based on nick if the user is in the 
            room, or on bare JID if not; in either case, if the nick is provided, that nick becomes the user's default nick 
            in the room if that functionality is supported by the implementation).
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantMembership(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Grant membership.
            <remarks>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" (normally based on nick if the user is in the 
            room, or on bare JID if not; in either case, if the nick is provided, that nick becomes the user's default nick 
            in the room if that functionality is supported by the implementation).
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.GrantMembership(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Grant membership.
            <remarks>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" (normally based on nick if the user is in the 
            room, or on bare JID if not; in either case, if the nick is provided, that nick becomes the user's default nick 
            in the room if that functionality is supported by the implementation).
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeVoice(Matrix.Jid,System.String)">
            <summary>
            Revoke voice from a participant.
            <remarks>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak. 
            The moderator can revoke voice from a participant by changing the participant's role to "visitor".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeVoice(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Revoke voice from a participant.
            <remarks>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak. 
            The moderator can revoke voice from a participant by changing the participant's role to "visitor".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeVoice(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Revoke voice from a participant.
            <remarks>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak. 
            The moderator can revoke voice from a participant by changing the participant's role to "visitor".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeVoice(Matrix.Jid,System.String,System.String)">
            <summary>
            Revoke voice from a participant.
            <remarks>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak. 
            The moderator can revoke voice from a participant by changing the participant's role to "visitor".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeVoice(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Revoke voice from a participant.
            <remarks>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak. 
            The moderator can revoke voice from a participant by changing the participant's role to "visitor".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeVoice(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Revoke voice from a participant.
            <remarks>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak. 
            The moderator can revoke voice from a participant by changing the participant's role to "visitor".
            </remarks>
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeMembership(Matrix.Jid,System.String)">
            <summary>
            Revokes the membership.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeMembership(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Revokes the membership.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeMembership(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Revokes the membership.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeMembership(Matrix.Jid,System.String,System.String)">
            <summary>
            Revokes the membership.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeMembership(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Revokes the membership.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RevokeMembership(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Revokes the membership.
            </summary>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestRoomConfiguration(Matrix.Jid)">
            <summary>
            Requests the room configuration.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestRoomConfiguration(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests the room configuration.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestRoomConfiguration(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the room configuration.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.SubmitRoomConfiguration(Matrix.Jid,Matrix.Xmpp.XData.Data)">
            <summary>
            Submits the room configuration.
            </summary>
            <param name="room">The room.</param>
            <param name="xdata">The xdata form.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.SubmitRoomConfiguration(Matrix.Jid,Matrix.Xmpp.XData.Data,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Submits the room configuration.
            </summary>
            <param name="room">The room.</param>
            <param name="xdata">The xdata form.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.SubmitRoomConfiguration(Matrix.Jid,Matrix.Xmpp.XData.Data,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Submit the room configuration.
            </summary>
            <param name="room">The room.</param>
            <param name="xdata">The data form.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestInstantRoom(Matrix.Jid)">
            <summary>
            Requests an instant room.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestInstantRoom(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests an instant room.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestInstantRoom(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests an instant room.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ModifyList(Matrix.Jid,Matrix.Xmpp.Muc.Admin.Item[])">
            <summary>
            Modify a Member, Voice, Ban, Moderator, Owner, Admin the list.
            </summary>
            <param name="room">The room.</param>
            <param name="items">The list to send.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ModifyList(Matrix.Jid,Matrix.Xmpp.Muc.Admin.Item[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Modify a Member, Voice, Ban, Moderator, Owner, Admin the list.
            </summary>
            <param name="room">The room.</param>
            <param name="items">The list to send.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ModifyList(Matrix.Jid,Matrix.Xmpp.Muc.Admin.Item[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Modify a Member, Voice, Ban, Moderator, Owner, Admin the list.
            </summary>
            <param name="room">The room.</param>
            <param name="items">The list to send.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.Send(Matrix.Xmpp.Client.Iq,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Sends the specified iq.
            </summary>
            <param name="iq">The iq.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
            <exception cref="T:Matrix.PropertyNotSetException">XmppClient</exception>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.Send(Matrix.Xml.XmppXElement)">
            <summary>
            Sends the specified el.
            </summary>
            <param name="el">The el.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeRole(Matrix.Xmpp.Muc.Role,Matrix.Jid,System.String)">
            <summary>
            Changes the role.
            </summary>
            <param name="role">The role.</param>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeRole(Matrix.Xmpp.Muc.Role,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Changes the role.
            </summary>
            <param name="role">The role.</param>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeRole(Matrix.Xmpp.Muc.Role,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Changes the role.
            </summary>
            <param name="role">The role.</param>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeRole(Matrix.Xmpp.Muc.Role,Matrix.Jid,System.String,System.String)">
            <summary>
            Changes the role.
            </summary>
            <param name="role">The role.</param>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeRole(Matrix.Xmpp.Muc.Role,Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Changes the role.
            </summary>
            <param name="role">The role.</param>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeRole(Matrix.Xmpp.Muc.Role,Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Changes the role.
            </summary>
            <param name="role">The role.</param>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeAffiliation(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Changes the affiliation.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeAffiliation(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Changes the affiliation.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeAffiliation(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Changes the affiliation.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="reason">The reason.</param>
            <param name="cb">Callback for the response.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeAffiliation(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,System.String,System.String)">
            <summary>
            Changes the affiliation.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeAffiliation(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Changes the affiliation.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeAffiliation(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Changes the affiliation.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeAffiliation(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,Matrix.Jid,System.String,System.String)">
            <summary>
            Changes the affiliation.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeAffiliation(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Changes the affiliation.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.ChangeAffiliation(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Changes the affiliation.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="user">The user.</param>
            <param name="nickname">The nickname.</param>
            <param name="reason">The reason.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestList(Matrix.Xmpp.Muc.Affiliation,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the list.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="room">The room.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.MucManager.RequestList(Matrix.Xmpp.Muc.Role,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the list.
            </summary>
            <param name="role">The role.</param>
            <param name="room">The room.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.OobIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.OobIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.OobIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.OobIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.OobIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.OobIq"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.OobIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.OobIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.OobIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.OobIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.OobIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.OobIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.OobIq.Oob">
            <summary>
            Gets or sets the oob.
            </summary>
            <value>
            The oob.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Client.PingIq.Ping">
            <summary>
            Ping object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Client.PresenceManager">
            <summary>
            Helper class for managing all presence related tasks like 
            subscription or incoming user presences
            </summary>   
        </member>
        <member name="E:Matrix.Xmpp.Client.PresenceManager.OnAvailablePresence">
            <summary>
            Used when one wants to send presence to someone/server/transport that you’re available. 
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.PresenceManager.OnUnavailablePresence">
            <summary>
            Used when one wants to send presence to someone/server/transport that you’re unavailable.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.PresenceManager.OnInvisiblePresence">
            <summary>
            Used when you want to see your roster, but don't want anyone on you roster to see you
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.PresenceManager.OnPresenceError">
            <summary>
            presence error
            </summary>        
        </member>
        <member name="E:Matrix.Xmpp.Client.PresenceManager.OnSubscribe">
            <summary>
            Used to send a subscription request to someone.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.PresenceManager.OnSubscribed">
            <summary>
            Used to accept a subscription request.
            </summary>		
        </member>
        <member name="E:Matrix.Xmpp.Client.PresenceManager.OnUnsubscribe">
            <summary>
            Used to unsubscribe someone from your presence. 
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.PresenceManager.OnUnsubscribed">
            <summary>
            Used to deny a subscription request.
            </summary>        
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PresenceManager"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceManager.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PresenceManager"/> class.
            </summary>
            <param name="xmppClient">The XMPP client.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceManager.Subscribe(Matrix.Jid)">
            <summary>
            Subscribe to a contact
            </summary>
            <param name="to">the Bare Jid we want to subscribe to</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceManager.Subscribe(Matrix.Jid,System.String)">
            <summary>        
            Subscribe to a users's presence
            </summary>        
            <param name="to">the Bare Jid we want to subscribe to</param>
            <param name="message">a message which normally contains the reason why we want to subscibe to this contact</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceManager.Subscribe(Matrix.Jid,System.String,System.String)">
            <summary>
            Subscribe to a users's presence
            </summary>
            <param name="to">To.</param>
            <param name="message">The message.</param>
            <param name="nickname">The nickname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceManager.Unsubscribe(Matrix.Jid)">
            <summary>
            Unsubscribe from a users's presence
            </summary>
            <param name="to">the Bare Jid we want to subscribe to</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceManager.ApproveSubscriptionRequest(Matrix.Jid)">
            <summary>
            Approve a subscription request
            </summary>
            <param name="to">bare Jid to approve</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceManager.DenySubscriptionRequest(Matrix.Jid)">
            <summary>
            Deny a subscription request
            </summary>
            <param name="to">Bare Jid</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceManager.CancelSubscription(Matrix.Jid)">
            <summary>
            Cancel a subscription that was previously granted to a user.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="T:Matrix.Xmpp.Client.MessageEventArgs">
            <summary>
            contains event data for Message handlers.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.MessageEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.MessageEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.MessageEventArgs.#ctor(Matrix.Xmpp.Client.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.MessageEventArgs"/> class.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.MessageEventArgs.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.PresenceEventArgs">
            <summary>
            contains event data for Presence handlers.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PresenceEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PresenceEventArgs.#ctor(Matrix.Xmpp.Client.Presence)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PresenceEventArgs"/> class.
            </summary>
            <param name="pres">The pres.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.PresenceEventArgs.Presence">
            <summary>
            Gets or sets the presence.
            </summary>
            <value>The presence.</value>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivacyIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivacyIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivacyIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivacyIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivacyIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.PrivacyIq.Privacy">
            <summary>
            Gets or sets the privacy object.
            </summary>
            <value>The vcard.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.PrivacyManager">
            <summary>
            Helper class for managing privacy lists
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivacyManager"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivacyManager"/> class.
            </summary>
            <param name="xmppClient">The XMPP client.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.GetLists">
            <summary>
            Requests names of privacy lists from server
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.GetLists(System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests names of privacy lists from server
            </summary>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.GetLists(System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests names of privacy lists from server
            </summary>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.GetList(System.String)">
            <summary>
            Requests a specific privacy list from the server by its name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.GetList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests a specific privacy list from the server by its name
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.GetList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests a specific privacy list from the server by its name
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.SetActiveList(System.String)">
            <summary>
            Change the active list
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.SetActiveList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Change the active list
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.SetActiveList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Change the active list
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.SetDefaultList(System.String)">
            <summary>
            Set the default list
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.SetDefaultList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Set the default list
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.SetDefaultList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Set the default list
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.DeclineActiveList(System.String)">
            <summary>
            Decline the use of any list
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.DeclineActiveList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Decline the use of any list
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.DeclineActiveList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Decline the use of any list
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.RemoveList(System.String)">
            <summary>
            Remove a list
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.RemoveList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Remove a list
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.RemoveList(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Remove a list
            </summary>
            <param name="name"></param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.AddList(System.String,Matrix.Xmpp.Privacy.Item[])">
            <summary>
            Add a new list with the given name and a set of rules.
            </summary>
            <param name="name"></param>
            <param name="rules"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.AddList(System.String,Matrix.Xmpp.Privacy.Item[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Add a new list with the given name and a set of rules.
            </summary>
            <param name="name"></param>
            <param name="rules"></param>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.AddList(System.String,Matrix.Xmpp.Privacy.Item[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Add a new list with the given name and a set of rules.
            </summary>
            <param name="name"></param>
            <param name="rules"></param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.UpdateList(System.String,Matrix.Xmpp.Privacy.Item[])">
            <summary>
            Update the list with the given name and a set of rules.
            </summary>
            <param name="name"></param>
            <param name="rules"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.UpdateList(System.String,Matrix.Xmpp.Privacy.Item[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Update the list with the given name and a set of rules.
            </summary>
            <param name="name"></param>
            <param name="rules"></param>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.UpdateList(System.String,Matrix.Xmpp.Privacy.Item[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Update the list with the given name and a set of rules.
            </summary>
            <param name="name"></param>
            <param name="rules"></param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.AllowByJid(Matrix.Jid,System.Int32)">
            <summary>
            Allow all communication by jid
            </summary>
            <param name="jid"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.BlockByJid(Matrix.Jid,System.Int32)">
            <summary>
            Block all communication by jid.
            </summary>
            <param name="jid"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.BlockByJid(Matrix.Jid,Matrix.Xmpp.Privacy.Stanza,System.Int32)">
            <summary>
            Block communication by jid.
            </summary>
            <param name="jid"></param>
            <param name="stanza"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.AllowByGroup(System.String,System.Int32)">
            <summary>
            Allow all communication based on group
            </summary>
            <param name="group"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.BlockByGroup(System.String,System.Int32)">
            <summary>
            Block all communication based on group
            </summary>
            <param name="group"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.BlockByGroup(System.String,Matrix.Xmpp.Privacy.Stanza,System.Int32)">
            <summary>
            Block communication based on group.
            </summary>
            <param name="group"></param>
            <param name="stanza"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.AllowBySubscription(Matrix.Xmpp.Roster.Subscription,System.Int32)">
            <summary>
            Allow all communication based on subscription.
            </summary>
            <param name="subscription"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.BlockBySubscription(Matrix.Xmpp.Roster.Subscription,System.Int32)">
            <summary>
            Block all communication based on subscription.
            </summary>
            <param name="subscription"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.BlockBySubscription(Matrix.Xmpp.Roster.Subscription,Matrix.Xmpp.Privacy.Stanza,System.Int32)">
            <summary>
            Block communication based on subscription.
            </summary>
            <param name="subscription"></param>
            <param name="stanza"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.AllowAll(System.Int32)">
            <summary>
            Allow all communication.
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.BlockAll(System.Int32)">
            <summary>
            Block all communication.
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.AllowAll(Matrix.Xmpp.Privacy.Stanza,System.Int32)">
            <summary>
            Allow all communication.
            </summary>
            <param name="stanza"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivacyManager.BlockAll(Matrix.Xmpp.Privacy.Stanza,System.Int32)">
            <summary>
            Block all communication.
            </summary>
            <param name="stanza"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivateIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivateIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivateIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivateIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PrivateIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.PrivateIq.Private">
            <summary>
            Gets or sets the private object.
            </summary>
            <value>The vcard.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.PubSubManager">
            <summary>
            Helper class for Publish Subscribe.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.PubSubManager.OnEvent">
            <summary>
            PubSub event notification
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PubSubManager"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PubSubManager"/> class.
            </summary>
            <param name="xmppClient">The underlying XmppClient for sending and receiving the stanzas.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateInstantNode(Matrix.Jid)">
            <summary>
            Create an instant node.
            </summary>
            <remarks>Instant nodes are nodes whose node is is automatically generated by a pubsub service.</remarks>
            <param name="to">Jid of the PubSub service.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateInstantNode(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Create an instant node.
            </summary>
            /// <remarks>Instant nodes are nodes whose node is is automatically generated by a pubsub service.</remarks>
            <param name="to">Jid of the PubSub service.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateInstantNode(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Create an instant node
            </summary>
            <remarks>Instant nodes are nodes whose node is is automatically generated by a pubsub service.</remarks>
            <param name="to">Jid of the PubSub service.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateInstantNodeStanza(Matrix.Jid)">
            <summary>
            
            </summary>
            <remarks>Instant nodes are nodes whose node is is automatically generated by a pubsub service.</remarks>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateNode(Matrix.Jid,System.String)">
            <summary>
            Creates a new node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateNode(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Creates a new node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateNode(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Creates a new node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateNode(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Configure)">
            <summary>
            Creates a new node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="config">The config.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateNode(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Configure,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Creates a new node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="config">The config.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateNode(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Configure,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Creates a new node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="config">The config.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.CreateNodeStanza(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Configure)">
            <summary>
            Creates a new node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestNodeConfiguration(Matrix.Jid,System.String)">
            <summary>
            Requests the node configuration.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestNodeConfiguration(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Requests the node configuration.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestNodeConfiguration(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Requests the node configuration.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestNodeConfigurationStanza(Matrix.Jid,System.String)">
            <summary>
            Requests the node configuration stanza.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.SubmitNodeConfiguration(Matrix.Jid,System.String,Matrix.Xmpp.XData.Data)">
            <summary>
            Submits the node configuration.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="form">The configuration form.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.SubmitNodeConfiguration(Matrix.Jid,System.String,Matrix.Xmpp.XData.Data,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Submits the node configuration.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="form">The configuration form.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.SubmitNodeConfiguration(Matrix.Jid,System.String,Matrix.Xmpp.XData.Data,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Submits the node configuration.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="form">The configuration form.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.SubmitNodeConfigurationStanza(Matrix.Jid,System.String,Matrix.Xmpp.XData.Data)">
            <summary>
            Builds the submit node configuration stanza.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="data">The from of teh node configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestSubscriptions(Matrix.Jid,System.String)">
            <summary>
            Request the subscriptions from a specific node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestSubscriptions(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Request the subscriptions from a specific node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestSubscriptions(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Request the subscriptions from a specific node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAllSubscriptions(Matrix.Jid)">
            <summary>
            Request all current subscriptions.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAllSubscriptions(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Request all current subscriptions.
            </summary>
            <param name="to">To.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAllSubscriptions(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Request all current subscriptions.
            </summary>
            <param name="to">To.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAllSubscriptionsStanza(Matrix.Jid)">
             <summary>
            
             </summary>
             <param name="to">To.</param>
             <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAllItems(Matrix.Jid,System.String)">
            <summary>
            Request all items of node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAllItems(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Request all items of node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAllItems(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Request all items of node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAllItemsStanza(Matrix.Jid,System.String)">
            <summary>
            Requests all items stanza.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <returns>Iq.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestSubscriptionsList(Matrix.Jid,System.String)">
            <summary>
            Retrieve Subscriptions List
            </summary>
            <param name="to"></param>
            <param name="node"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestSubscriptionsList(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Retrieve Subscriptions List
            </summary>
            <param name="to"></param>
            <param name="node"></param>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestSubscriptionsList(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Retrieve Subscriptions List
            </summary>
            <param name="to"></param>
            <param name="node"></param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestSubscriptionsListStanza(Matrix.Jid,System.String)">
            <summary>
            
            </summary>
            <param name="to"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAffiliationsList(Matrix.Jid,System.String)">
            <summary>
            Retrieve the affiliations list of a node
            </summary>
            <param name="to"></param>
            <param name="node"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAffiliationsList(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Retrieve the affiliations list of a node
            </summary>
            <param name="to"></param>
            <param name="node"></param>
            <param name="cb"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RequestAffiliationsList(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Retrieve the affiliations list of a node
            </summary>
            <param name="to"></param>
            <param name="node"></param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.ModifyAffiliationsList(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Owner.Affiliation)">
            <summary>
            Edit the affiliation of an entity associated with a given node or set the affiliation for a new entity.
            </summary>
            <param name="to">Jid of the PubSub service.</param>
            <param name="node">The node.</param>
            <param name="affiliation">The affiliation.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.ModifyAffiliationsList(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Owner.Affiliation,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Edit the affiliation of an entity associated with a given node or set the affiliation for a new entity.
            </summary>
            <param name="to">Jid of the PubSub service.</param>
            <param name="node">The node.</param>
            <param name="affiliation">The affiliation.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.ModifyAffiliationsList(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Owner.Affiliation,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Edit the affiliation of an entity associated with a given node or set the affiliation for a new entity.
            </summary>
            <param name="to">Jid of the PubSub service.</param>
            <param name="node">The node.</param>
            <param name="affiliation">The affiliation.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.ModifyAffiliationsList(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Owner.Affiliation[])">
            <summary>
            Edit the affiliations of an entity associated with a given node or set the affiliations for a new entity.
            The owner MUST send only modified affiliations (i.e., a "delta"), not the complete list.  
            </summary>
            <param name="to">Jid of the PubSub service.</param>
            <param name="node">The node.</param>
            <param name="affiliations">The affiliations.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.ModifyAffiliationsList(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Owner.Affiliation[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Edit the affiliations of an entity associated with a given node or set the affiliations for a new entity.
            The owner MUST send only modified affiliations (i.e., a "delta"), not the complete list.  
            </summary>
            <param name="to">Jid of the PubSub service.</param>
            <param name="node">The node.</param>
            <param name="affiliations">The affiliations.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.ModifyAffiliationsList(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Owner.Affiliation[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Edit the affiliations of an entity associated with a given node or set the affiliations for a new entity.
            The owner MUST send only modified affiliations (i.e., a "delta"), not the complete list.
            </summary>
            <param name="to">Jid of the PubSub service.</param>
            <param name="node">The node.</param>
            <param name="affiliations">The affiliations.</param>
            <param name="cb">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.ModifyAffiliationsStanza(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Owner.Affiliation[])">
            <summary>
            Builds the modify affiliations stanza.
            </summary>
            <param name="to">Jid of the PubSub service.</param>
            <param name="node">The node.</param>
            <param name="affiliations">The affiliations.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.DeleteNode(Matrix.Jid,System.String)">
            <summary>
            Deletes a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.DeleteNode(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Deletes a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.DeleteNode(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Deletes a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.Subscribe(Matrix.Jid,System.String,Matrix.Jid)">
            <summary>
            Subscribes to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="jid">The jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.Subscribe(Matrix.Jid,System.String,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Subscribes to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="jid">The jid.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.Subscribe(Matrix.Jid,System.String,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Subscribes to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="jid">The jid.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.Unsubscribe(Matrix.Jid,System.String,Matrix.Jid)">
            <summary>
            Unsubscribes from a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="jid">The jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.Unsubscribe(Matrix.Jid,System.String,System.String,Matrix.Jid)">
            <summary>
            Unsubscribes from a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="subId">The sub id.</param>
            <param name="jid">The jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.Unsubscribe(Matrix.Jid,System.String,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Unsubscribes from a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="jid">The jid.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.Unsubscribe(Matrix.Jid,System.String,System.String,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Unsubscribes from a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="subId">The sub id.</param>
            <param name="jid">The jid.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.Unsubscribe(Matrix.Jid,System.String,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Unsubscribes from a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="jid">The jid.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.Unsubscribe(Matrix.Jid,System.String,System.String,Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Unsubscribes from a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="subId">The sub id.</param>
            <param name="jid">The jid.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.UnsubscribeStanza(Matrix.Jid,System.String,Matrix.Jid)">
            <summary>
            Builds a unsubscribe stanza.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="jid">The jid.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.UnsubscribeStanza(Matrix.Jid,System.String,System.String,Matrix.Jid)">
            <summary>
            Builds a unsubscribe stanza.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="subId">The sub id.</param>
            <param name="jid">The jid.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PublishItem(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Item)">
            <summary>
            Publishes an item to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PublishItem(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Item,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Publishes an item to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="item">The item.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PublishItem(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Item,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Publishes an item to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="item">The item.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PublishItemStanza(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Item)">
            <summary>
            Publishes an item to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PublishItems(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Item[])">
            <summary>
            Publishes multiple items to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PublishItems(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Item[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Publishes multiple items to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="item">The item.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PublishItems(Matrix.Jid,System.String,Matrix.Xmpp.PubSub.Item[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Publishes multiple items to a node.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="item">The item.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RetractItem(Matrix.Jid,System.String,System.String)">
            <summary>
            Retracts the item.
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
            <param name="itemId">The item id.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RetractItem(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Retracts the item.
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
            <param name="itemId">The item id.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RetractItem(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Retracts the item.
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
            <param name="itemId">The item id.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RetractItemStanza(Matrix.Jid,System.String,System.String)">
            <summary>
            Retracts the item.
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node"></param>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RetractItems(Matrix.Jid,System.String,System.String[])">
            <summary>
            Retracts the items.
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
            <param name="itemIds">The item ids.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RetractItems(Matrix.Jid,System.String,System.String[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Retracts the items.
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
            <param name="itemIds">The item ids.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RetractItems(Matrix.Jid,System.String,System.String[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Retracts the items.
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
            <param name="itemIds">The item ids.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.RetractItemsStanza(Matrix.Jid,System.String,System.String[])">
            <summary>
            Retracts the items stanza.
            </summary>
            <param name="to">To.</param>
            <param name="node">The node.</param>
            <param name="itemIds">The item ids.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PurgeNode(Matrix.Jid,System.String)">
            <summary>
            Purges all node item.
            <remarks>
            If a service persists published items, a node owner may want to purge 
            the node of all published items (thus removing all items from the 
            persistent store, with the exception of the last published item, 
            which MAY be cached). It is OPTIONAL for a service to implement this 
            feature.
            </remarks> 
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PurgeNode(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Purges all node item.
            <remarks>
            If a service persists published items, a node owner may want to purge 
            the node of all published items (thus removing all items from the 
            persistent store, with the exception of the last published item, 
            which MAY be cached). It is OPTIONAL for a service to implement this 
            feature.
            </remarks> 
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PurgeNode(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Purges all node item.
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
            <remarks>
            If a service persists published items, a node owner may want to purge
            the node of all published items (thus removing all items from the
            persistent store, with the exception of the last published item,
            which MAY be cached). It is OPTIONAL for a service to implement this
            feature.
            </remarks>
        </member>
        <member name="M:Matrix.Xmpp.Client.PubSubManager.PurgeNodeStanza(Matrix.Jid,System.String)">
            <summary>
            Builds the purge node stanza.
            </summary>
            <param name="to">Jid of the pubsub service for this request</param>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Client.PubSubOwnerIq">
            <summary>
            Pubsub owner iq
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Client.RpcIq">
            <summary>
            This class creates a Roster Iq.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.RpcIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RpcIq" /> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.RpcIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RpcIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RpcIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RpcIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RpcIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RpcIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RpcIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RpcIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RpcIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RpcIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.RpcIq.Rpc">
            <summary>
            The Rpc object
            </summary>
            <value>The Rpc object.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.SearchIq">
            <summary>
            This class creates a Roster Iq.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.SearchIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.SearchIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.SearchIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.SearchIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.SearchIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.SearchIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.SearchIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.SearchIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.SearchIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.SearchIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.SearchIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.SearchIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.SearchIq.Search">
            <summary>
            The Search object
            </summary>
            <value>The search.</value>
        </member>
        <member name="M:Matrix.Xmpp.Client.BookmarkStorageIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.BookmarkStorageIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.BookmarkStorageIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.BookmarkStorageIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.BookmarkStorageIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.PrivateIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.BookmarkStorageIq.Private">
            <summary>
            Gets or sets the private object.
            </summary>
            <value>The vcard.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.VersionIq">
            <summary>
            Software Version IQ, XEP-0092
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.VersionIq.Version">
            <summary>
            Version object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Client.RegisterIq">
            <summary>
            This class creates a Register Iq.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.RegisterIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RegisterIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.RegisterIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RegisterIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RegisterIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RegisterIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RegisterIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RegisterIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RegisterIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RegisterIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RegisterIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RegisterIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.RegisterIq.Register">
            <summary>
            Gets or sets the register.
            </summary>
            <value>The register.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.VcardIq">
            <summary>
            Vcard Iq
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.VcardIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.VcardIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.VcardIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.VcardIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.VcardIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.VcardIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.VcardIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.VcardIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.VcardIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.VcardIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.VcardIq.Vcard">
            <summary>
            Gets or sets the vcard.
            </summary>
            <value>The vcard.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.XmppClient">
            <summary>
            Initializes instances of the XmppClient class.
            <remarks>
            The XmppClient class is used to create a client connection to a XMPP server.
            </remarks>
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnRosterStart">
            <summary>
            we start to receive the complete contact list
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnRosterEnd">
            <summary>
            complete contact list was received
            </summary>     
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnRosterItem">
            <summary>
            a new contct is received, a existing contact gets updated or removed
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnPresence">
            <summary>
            A presence stanza was received
            </summary>        
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnInitialPresence">
            <summary>
            Occurs when we receive back our initial presence from the server.
            This event should be used to indicate that the XMPP session is ready for sending data.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnMessage">
            <summary>
            a message stanza was received
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnIq">
            <summary>
            an iq stanza was received
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnRegisterInformation">
            <summary>
            Information for account registration was received.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnRegister">
            <summary>
            Occurs after sucessful account registration.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnAccountRemoved">
            <summary>
            Occurs after the account was removed successful from the server.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnPasswordChanged">
            <summary>
            Occurs after the password was changed successful.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnRegisterError">
            <summary>
            Occurs when account registration or account removal failed.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnBind">
            <summary>
            a resource was successfully bound
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnBindStart">
            <summary>
            before thie resource bind request gets send.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnPrebind">
            <summary>
            a resource was successfully bound
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnStreamHeader">
            <summary>
            Stream header received
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnStreamFeatures">
            <summary>
            Stream features received
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnBeforeSasl">
            <summary>
            Before Sasl authentication
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnBeforeSendPresence">
            <summary>
            Occurs before the presence build from the SendPresence() member gets sent.
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnSendBody">
            <summary>
            debug handler for outgoing body in BOSH
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.XmppClient.OnReceiveBody">
            <summary>
            debug handler for incoming body in BOSH
            </summary>      
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.Port">
            <summary>
            Port number, normally there is no need to change this
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.Compression">
            <summary>
            Compress the stream when supported by the server?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.StartTls">
            <summary>
            StartTls to encrypt the stream when supported by the server
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.Username">
            <summary>
            the user part of the jid (user@jabber.org)
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.Resource">
            <summary>
            Gets or sets the resource identifier.
            </summary>
            <value>The resource.</value>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.ClientCertificate">
            <summary>
            Gets or sets the client certificate.
            </summary>
            <value>The client certificate.</value>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.PrincipalHostname">
            <summary>
            Gets or sets the XEP-0233 principal hostname.
            </summary>
            <value>
            The principal hostname.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.UseSso">
            <summary>
            Gets or sets a value indicating whether single sign on (SSO) should be used.
            </summary>
            <remarks>
            SSO is on the GSSAPI SASL mechanism which must be supported by the server in order to use SSO.
            </remarks>
            <value><c>true</c> if [use sso]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.PreferredSsoSaslMechanism">
            <summary>
            Gets or sets the preferred sasl mechanism for SSO authentication.
            </summary>
            <value>
            The preferred sso sasl mechanism.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.AutoRoster">
            <summary>
            automatically request roster on each login
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.AutoPresence">
            <summary>
            send own presence automatically after successful login to the server
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.AutoReplyToPing">
            <summary>
            automatically respon to XMPP Pings
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.Status">
            <summary>
            The OPTIONAL status contains a natural-language description of availability status. 
            It is normally used in conjunction with the show element to provide a detailed description of an availability state 
            (e.g., "In a meeting").
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.Show">
            <summary>
            The OPTIONAL show element contains non-human-readable XML character data that specifies the particular availability
            status of an entity or specific resource.
            </summary>    
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.Priority">
            <summary>
            The priority level of the resource. The value MUST be an integer between -128 and +127. 
            If no priority is provided, a server SHOULD consider the priority to be zero.         
            </summary>
            <remarks>
            For information regarding the semantics of priority values in stanza routing 
            within instant messaging and presence applications, refer to Server Rules 
            for Handling XML StanzasServer Rules for Handling XML Stanzas.
            </remarks>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.AnonymousLogin">
            <summary>
            Gets or sets a value indicating whether we want to login anonymous.
            This works only when supported by the server. Otherwise an error is raised.
            </summary>
            <value><c>true</c> if for anonymous login; otherwise, <c>false</c>.</value>    
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.RegisterNewAccount">
            <summary>
            Gets or sets a value indicating whether a new Account should be registered on the server.
            </summary>
            <value><c>true</c> if you want to try to register new account; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.StreamManagement">
            <summary>
            When set to true MatriX automatically enables XEP-0198: Stream Management when the server
            supports it.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.XmppClient.StreamResumption">
            <summary>
            When set to true MatriX automatically enables stream resumption as defined in XEP-0198: Stream Management.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.XmppClient"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.XmppClient"/> class.
            </summary>
            <param name="xmppDomain"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.XmppClient" /> class.
            </summary>
            <param name="jid">The jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.#ctor(Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.XmppClient" /> class.
            </summary>
            <param name="jid">The jid.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.XmppClient"/> class.
            </summary>
            <param name="user"></param>
            <param name="xmppDomain"></param>
            <param name="password"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.XmppClient"/> class.
            </summary>
            <param name="user"></param>
            <param name="xmppDomain"></param>
            <param name="resource"></param>
            <param name="password"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.Resume">
            <summary>
            Resumes a stream using XEP-0198: Stream Management
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.Resume(System.String,System.Int32)">
            <summary>
            Resumes the stream with teh given stream id and stanza counter
            </summary>
            <param name="resumptionId"></param>
            <param name="countStanzasIncoming"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.ProcessStreamFeatures(Matrix.Xmpp.Stream.StreamFeatures)">
            <summary>
            Process stream features
            </summary>
            <param name="features"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.ChangePassword(System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Changes the password of the currently logged in user.
            </summary>
            <param name="newPass">the new password</param>
            <param name="cb">callback for the result</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.ChangePassword(System.String)">
            <summary>
            Changes the password of the currently logged in user.
            </summary>
            <param name="newPass">the new password</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.RemoveAccount(System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Removes the current logged in account from the server. All stored information for this account will be removed from the server.
            On success the OnAccountRemoved event gets raised.
            On failure the OnRegisterError event gets raised.
            </summary>
            <param name="cb">callback for the response</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.RemoveAccount">
            <summary>
            Removes the current logged in account from the server. All stored information for this account will be removed from the server.
            On success the OnAccountRemoved event gets raised.
            On failure the OnRegisterError event gets raised.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.RequestRoster">
            <summary>
            Request the roster from the server
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.RequestRoster(System.String)">
            <summary>
            Request the roster fro the server when using roster versioning
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SendUnavailablePresence">
            <summary>
            Sends the unavailable presence.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SendUnavailablePresence(System.String)">
            <summary>
            Sends the unavailable presence.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SendPresence">
            <summary>
            Sends the presence.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SendPresence(Matrix.Xmpp.Client.Presence)">
            <summary>
            sends a presence out and raises the OnBeforeSendPresenceEvent
            </summary>
            <param name="pres"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SendPresence(Matrix.Xmpp.Show)">
            <summary>
            Sends a presence packet to the server.
            </summary>
            <param name="show">The show.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SendPresence(Matrix.Xmpp.Show,System.String)">
            <summary>
            Sends a presence packet to the server.
            </summary>
            <param name="show">The show.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SendPresence(Matrix.Xmpp.Show,System.String,System.Int32)">
            <summary>
            Sends a presence packet to the server.
            </summary>
            <param name="show">The show.</param>
            <param name="status">The status.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SetUsername(System.String)">
            <summary>
            sets the username and prepares it according to the jid escaping and
            stringprep rules.
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SetXmppDomain(System.String)">
            <summary>
            sets the XmppDomain and prepares it according to the nameprep rules.
            </summary>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.SetResource(System.String)">
            <summary>
            sets the Resource and prepares it according to the Resourceprep rules.
            </summary>
            <param name="resource">The resource.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.StreamReset">
            <summary>
            Do a stream reset
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.XmppClient.Send(Matrix.Xml.XmppXElement)">
            <summary>
            Sends a XmppXElement over the connection
            </summary>
            <param name="el">the XmppXElement to send.</param>
            <returns></returns>
            <exception cref="T:Matrix.XmppStreamException"></exception>
        </member>
        <member name="P:Matrix.Xmpp.Client.BindIq.Bind">
            <summary>
            Bind object
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.Iq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Iq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.Iq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Iq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Iq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Iq"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Iq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Iq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Iq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Iq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Iq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Iq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.Iq.Error">
            <summary>
            Error object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Client.IqEventArgs">
            <summary>
            contains event data for Iq handlers.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqEventArgs.#ctor(Matrix.Xmpp.Client.Iq)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqEventArgs"/> class.
            </summary>
            <param name="iq">The iq.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqEventArgs.#ctor(Matrix.Xmpp.Client.Iq,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.IqEventArgs"/> class.
            </summary>
            <param name="iq">The iq.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.IqEventArgs.Iq">
            <summary>
            Gets or sets the iq.
            </summary>
            <value>The iq.</value>
        </member>
        <member name="P:Matrix.Xmpp.Client.IqEventArgs.Handled">
            <summary>
            Was this iq already handled?
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.IqEventArgs.Clone">
            <summary>
            Clones this instance memberwise.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Client.Message">
            <summary>
            Message class
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
            <param name="thread">The thread.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(System.String,Matrix.Xmpp.MessageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="type">The type.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Xmpp.MessageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="type">The type.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(System.String,Matrix.Xmpp.MessageType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="type">The type.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Xmpp.MessageType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="type">The type.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(System.String,Matrix.Xmpp.MessageType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="type">The type.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
            <param name="thread">The thread.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Xmpp.MessageType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="type">The type.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
            <param name="thread">The thread.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Jid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Jid,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
            <param name="thread">The thread.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.MessageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.MessageType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Message.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.MessageType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Message"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="body">The body.</param>
            <param name="subject">The subject.</param>
            <param name="thread">The thread.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.Message.Error">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Client.Message.Error"/>.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.Presence">
            <summary>
            Presence object
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.Presence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Presence"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.Presence.#ctor(Matrix.Xmpp.Show)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Presence"/> class.
            </summary>
            <param name="show">The <see cref="T:Matrix.Xmpp.Show"/>.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Presence.#ctor(Matrix.Xmpp.PresenceType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Presence"/> class.
            </summary>
            <param name="type">The <see cref="T:Matrix.Xmpp.PresenceType"/>.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Presence.#ctor(Matrix.Xmpp.Show,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Presence"/> class.
            </summary>
            <param name="show">The show.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.Presence.#ctor(Matrix.Xmpp.Show,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.Presence"/> class.
            </summary>
            <param name="show">The <see cref="T:Matrix.Xmpp.Show"/>.</param>
            <param name="status">The status.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.Presence.Error">
            <summary>
            Error object
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Client.Presence.Nick">
            <summary>
            Gets or sets the nickname.
            </summary>
            <value>The nick.</value>
        </member>
        <member name="T:Matrix.Xmpp.Client.RosterIq">
            <summary>
            This class creates a Roster Iq.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RosterIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RosterIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RosterIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RosterIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RosterIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RosterIq"/> class.
            </summary>
            <param name="to">To Jid.</param>
            <param name="from">From Jid.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Client.RosterIq.Roster">
            <summary>
            Roster object
            </summary>
            <value>The roster.</value>
        </member>
        <member name="P:Matrix.Xmpp.Client.SessionIq.Session">
            <summary>
            Session object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Client.RosterManager">
            <summary>
            Helper Class that makes it easier to manage your contact list
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Client.RosterManager.OnRosterExchange">
            <summary>
            This event occurs when somebody wants exchange contacts with us.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RosterManager"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Client.RosterManager"/> class.
            </summary>
            <param name="xmppClient">The XMPP client.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid)">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.String,System.String)">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="nickname">Nickname for the RosterItem</param>
            <param name="group">The group to which the roteritem should be added</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="nickname">Nickname for the RosterItem</param>
            <param name="group">The group to which the roteritem should be added</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="nickname">Nickname for the RosterItem</param>
            <param name="group">The group to which the roteritem should be added</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.String)">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="nickname">Nickname for the RosterItem</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="nickname">Nickname for the RosterItem</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="nickname">Nickname for the RosterItem</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.String,System.String[])">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="nickname">Nickname for the RosterItem</param>
            <param name="group">An Array of groups when you want to add the Rosteritem to multiple groups</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.String,System.String[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="nickname">Nickname for the RosterItem</param>
            <param name="group">An Array of groups when you want to add the Rosteritem to multiple groups</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Add(Matrix.Jid,System.String,System.String[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Add a Rosteritem to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="nickname">Nickname for the RosterItem</param>
            <param name="group">An Array of groups when you want to add the Rosteritem to multiple groups</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.String)">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid"></param>
            <param name="nickname"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid">The jid.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid">The jid.</param>
            <param name="nickname">The nickname.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid)">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid">The jid.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid">The jid.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.String,System.String)">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid">The jid.</param>
            <param name="nickname">The nickname.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid">The jid.</param>
            <param name="nickname">The nickname.</param>
            <param name="group">The group.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.String,System.String,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid">The jid.</param>
            <param name="nickname">The nickname.</param>
            <param name="group">The group.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.String,System.String[])">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid"></param>
            <param name="nickname"></param>
            <param name="group"></param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.String,System.String[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid">The jid.</param>
            <param name="nickname">The nickname.</param>
            <param name="group">The group.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Update(Matrix.Jid,System.String,System.String[],System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Update a Rosteritem
            </summary>
            <param name="jid">The jid.</param>
            <param name="nickname">The nickname.</param>
            <param name="group">The group.</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Remove(Matrix.Jid)">
            <summary>
            Removes a contact from the contact list
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Remove(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Removes a contact from the contact list
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.Remove(Matrix.Jid,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Removes a contact from the contact list
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
            <param name="cb">The cb.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.SendRosterItems(Matrix.Jid,Matrix.Xmpp.RosterItemExchange.RosterExchangeItem[])">
            <summary>
            Send contacts
            </summary>
            <param name="to">the Jid you want to send the contacts to</param>
            <param name="items">the contacts to send</param>
        </member>
        <member name="M:Matrix.Xmpp.Client.RosterManager.SendRosterItems(Matrix.Jid,Matrix.Xmpp.RosterItemExchange.RosterExchangeItem[],System.String)">
            <summary>
            Send contacts
            </summary>
            <param name="to">the Jid you want to send the contacts to</param>
            <param name="items">the contacts to send</param>
            <param name="body">optional text or description</param>
        </member>
        <member name="T:Matrix.Xmpp.Client.Stream">
            <summary>
            Represents a XMPP client to server stream header
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Ags.LicenseIq.License">
            <summary>
            License object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Component.IqQuery`1">
            <summary>
            A class to create Iq queries with payloads of the given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Matrix.Xmpp.Component.IqQuery`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Component.IqQuery`1"/> class.
            A new id gets automatically created.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Component.IqQuery`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Component.IqQuery`1"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Matrix.Xmpp.Component.IqQuery`1.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Component.IqQuery`1"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Component.IqQuery`1.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Component.IqQuery`1"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Component.IqQuery`1.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Component.IqQuery`1"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Component.IqQuery`1.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Component.IqQuery`1"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Component.IqQuery`1.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Component.IqQuery`1"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Component.PingIq.Ping">
            <summary>
            Ping object
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Component.Iq.Error">
            <summary>
            Error object
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Component.Message.Error">
            <summary>
            Error object
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Component.Presence.Error">
            <summary>
            Error object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Component.Stream">
            <summary>
            Represents a XMPP client to server stream header
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Component.XmppComponent">
            <summary>
                This class implements the Jabber Component Protocol 
            </summary>
            <remarks>
                <a href="http://www.xmpp.org/extensions/xep-0114.html">XEP-0114: Jabber Component Protocol</a>
            </remarks>
        </member>
        <member name="E:Matrix.Xmpp.Component.XmppComponent.OnPresence">
            <summary>
            A presence stanza was received
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Component.XmppComponent.OnMessage">
            <summary>
            a message stanza was received
            </summary>
        </member>
        <member name="E:Matrix.Xmpp.Component.XmppComponent.OnIq">
            <summary>
            an iq stanza was received
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Component.XmppComponent.Port">
            <summary>
                Port number for this external component
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Compression.Compression.AddMethod(Matrix.Xmpp.Compression.Methods)">
            <summary>
            Add a compression method/algorithm
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Matrix.Xmpp.Compression.Compression.Supports(Matrix.Xmpp.Compression.Methods)">
            <summary>
            Is the given compression method/algrithm supported?
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Compression.Compress.#ctor(Matrix.Xmpp.Compression.Methods)">
            <summary>
            Constructor with a given method/algorithm for Stream compression
            </summary>
            <param name="method">method/algorithm used to compressing the stream</param>
        </member>
        <member name="P:Matrix.Xmpp.Compression.Compress.Method">
            <summary>
            method/algorithm used to compressing the stream
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Compression.FailureCondition.UnknownCondition">
            <summary>
            unknown error condition
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Compression.FailureCondition.SetupFailed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Compression.FailureCondition.ProcessingFailed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Compression.FailureCondition.UnsupportedMethod">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Dialback.Verify.GenerateDialbackKey(System.String,System.String,System.String,System.String)">
            <summary>
            Generates a Dialback key as described in XEP-0185
            </summary>
            <param name="secret"></param>
            <param name="receivingServer"></param>
            <param name="originatingServer"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="P:Matrix.Xmpp.Dialback.Verify.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Matrix.Xmpp.Dialback.Verify.DialbackKey">
            <summary>
            The dialbackkey
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Dialback.Verify.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.ExtendedStanzaAddressing.Address.Jid">
            <summary>
            Is used to specify a simple Jabber ID associated with this address. 
            If the Jid is specified, the Uri proprty MUST NOT be set.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.ExtendedStanzaAddressing.Address.Description">
            <summary>
            The Description is used to specify human-readable information for this address. 
            This data may be used by clients to provide richer address-book integration. 
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.ExtendedStanzaAddressing.Address.Node">
            <summary>
            This property is used to specify a sub-addressable unit at a particular JID, corresponding to a Service Discovery node.
            A node property MAY be set if a 'Jid' is specified. If a 'Uri' is specified, the 'Node' MUST NOT be specified.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.ExtendedStanzaAddressing.Address.Uri">
            <summary>
            Is used to specify an external system address, such as a sip:, sips:, or im: URI.
            If the Uri is set, the Jid and Node peroperties MUST NOT be specified.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.ExtendedStanzaAddressing.Address.Delivered">
            <summary>
            When a multicast service delivers the stanza to a non-bcc address, it MUST set Delivered = true.
            A multicast service MUST NOT deliver to an address that was marked with Delivered = true
            when the service received the stanza. 
            A multicast service SHOULD attempt to deliver to all addresses that are not marked with Delivered = true.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.ExtendedStanzaAddressing.Addresses.AddAddress">
            <summary>
            Adds the address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.ExtendedStanzaAddressing.Addresses.AddAddress(Matrix.Xmpp.ExtendedStanzaAddressing.Address)">
            <summary>
            Adds the address.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:Matrix.Xmpp.ExtendedStanzaAddressing.Addresses.GetAddresses">
            <summary>
            Gets the addresses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.ExtendedStanzaAddressing.Addresses.SetAddresses(System.Collections.Generic.IEnumerable{Matrix.Xmpp.ExtendedStanzaAddressing.Address})">
            <summary>
            Sets the addresses.
            </summary>
            <param name="addresses">The items.</param>
        </member>
        <member name="M:Matrix.Xmpp.ExtendedStanzaAddressing.Addresses.RemoveAllAddresses">
            <summary>
            Removes all addresses.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Framing.Close">
            <summary>
            Websocket framing close tag
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Framing.Close.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Framing.Close"/> class.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Framing.Open">
            <summary>
            Websocket framing open tag
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Framing.Open.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Framing.Open"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.GeoLoc.GeoLoc.#ctor">
            <summary>
            XEP-0080 Geographical Location (GeoLoc)
            Defines a format for capturing data about an entity's geographical location (geoloc).
            The format defined herein is intended to provide a semi-structured format for 
            describing a geographical location that may change fairly frequently, 
            where the geoloc information is provided as Global Positioning System (GPS) coordinates.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Description">
            <summary>
            A natural-language name for or description of the location.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.PostalCode">
            <summary>
            A code used for postal delivery (eg. 74080).
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Region">
            <summary>
            An administrative region of the nation, such as a state or province.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Room">
            <summary>
            A particular room in a building.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Street">
            <summary>
            A thoroughfare within the locality, or a crossing of two thoroughfares.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Text">
            <summary>
            A catch-all element that captures any other information about the location.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Datum">
            <summary>
            The GPS datum.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Building">
            <summary>
            A specific building on a street or in an area.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Country">
            <summary>
            The nation where the user is located.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.CountryCode">
            <summary>
            The ISO 3166 two-letter country code (eg. "US").
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Area">
            <summary>
            A named area such as a campus or neighborhood.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Locality">
            <summary>
            A locality within the administrative region, such as a town or city.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Floor">
            <summary>
            A particular floor in a building.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Altitude">
            <summary>
            Altitude in meters above or below sea level
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Bearing">
            <summary>
            GPS bearing (direction in which the entity is heading to reach its next waypoint),
            measured in decimal degrees relative to true north.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Accuracy">
            <summary>
            Horizontal GPS error in meters. This property obsoletes the Error property.
            </summary>
            <value>
            The accuracy.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Speed">
            <summary>
            The speed at which the entity is moving, in meters per second.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Latitude">
            <summary>
            Latitude in decimal degrees North.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Longitude">
            <summary>
            Longitude in decimal degrees East.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Error">
            <summary>
            Horizontal GPS error in arc minutes.
            This property is deprecated in favor of Accuracy.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Timestamp">
            <summary>
            UTC timestamp specifying the moment when the reading was taken.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.GeoLoc.GeoLoc.Uri">
            <summary>
            A URI or URL pointing to information about the location.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Google.Push.Data.Value">
            <summary>
            Set the value of the data element, the date gets converted to and from base64 automatically.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.IBB.Close.Sid">
            <summary>
            Sid
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.IBB.Data.Sequence">
            <summary>
            the sequence
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.IBB.Open.BlockSize">
            <summary>
            Block size
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.IBB.Open.Stanza">
            <summary>
            Defines whether the data will be sent using iq stanzas or message stanzas.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Apps.Rtp.Description.Media">
            <summary>
            specifies the media type, such as "audio" or "video".
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Apps.Rtp.Description.Ssrc">
            <summary>
            The 32-bit synchronization source for this media stream, as defined in RFC 3550.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Apps.Rtp.Description.AddPayloadType">
            <summary>
            Adds the type of the payload.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Apps.Rtp.Description.AddPayloadType(Matrix.Xmpp.Jingle.Apps.Rtp.PayloadType)">
            <summary>
            Adds the payload.
            </summary>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Apps.Rtp.Description.AddPayloadTypes(Matrix.Xmpp.Jingle.Apps.Rtp.PayloadType[])">
            <summary>
            Addpayloads the types.
            </summary>
            <param name="payloadTypes">The payload types.</param>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Apps.Rtp.Description.GetPayloadTypes">
            <summary>
            Gets the payload types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Apps.Rtp.Description.SetPayloadTypes(System.Collections.Generic.IEnumerable{Matrix.Xmpp.Jingle.Apps.Rtp.PayloadType})">
            <summary>
            Sets the payloadType.
            </summary>
            <param name="payloadTypes">The payload types.</param>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Apps.Rtp.Description.RemoveAllPayloadTypes">
            <summary>
            Removes all payload types.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Candidates.CandidateRawUdp.GenerateId">
            <summary>
            generates a new unique Sid
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Jingle.Condition">
            <summary>
            The defined conditions ofr the reason element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.UnknownCondition">
            <summary>
            unknown condition.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.AlternativeSession">
            <summary>
            The party prefers to use an existing session with the peer rather than initiate a new session. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.Busy">
            <summary>
            The party is busy and cannot accept a session.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.Cancel">
            <summary>
            The initiator wishes to formally cancel the session initiation request.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.ConnectivityError">
            <summary>
            The action is related to connectivity problems.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.Decline">
            <summary>
            The party wishes to formally decline the session.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.Expired">
            <summary>
            The session length has exceeded a pre-defined time limit (e.g., a meeting hosted at a conference service).
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.FailedApplication">
            <summary>
            The party has been unable to initialize processing related to the application type.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.FailedTransport">
            <summary>
            The party has been unable to establish connectivity for the transport method.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.GeneralError">
            <summary>
            The action is related to a non-specific application error.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.Gone">
            <summary>
            The entity is going offline or is no longer available.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.IncompatibleParameters">
            <summary>
            The party supports the offered application type but does not support the offered or negotiated parameters.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.MediaError">
            <summary>
            The action is related to media processing problems.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.SecurityError">
            <summary>
            The action is related to a violation of local security policies.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.Success">
            <summary>
            The action is generated during the normal course of state management and does not reflect any error.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.Timeout">
            <summary>
            A request has not been answered so the sender is timing out the request.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.UnsupportedApplications">
            <summary>
            The party supports none of the offered application types.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Jingle.Condition.UnsupportedTransports">
            <summary>
            The party supports none of the offered transport methods.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Content.Creator">
            <summary>
            Which party originally generated the content type (used to prevent race conditions regarding modifications);.
            The defined values are "Initiator" and "Responder" (where the default is "Initiator").
            The value of the 'creator' for a given content type MUST always match the party that originally generated the content type, 
            even for Jingle actions that are sent by the other party in relation to that content type
             (e.g., subsequent content-modify or transport-info messages). 
            The combination of the 'creator' attribute and the 'name' attribute is unique among both parties to a Jingle session.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Content.Name">
            <summary>
            A unique name or identifier for the content type according to the creator, which MAY have meaning to a human user in order
            to differentiate this content type from other content types 
            (e.g., two content types containing video media could differentiate between "room-pan" and "slides"). 
            If there are two content types with the same value for the 'name' attribute, they shall understood as alternative
             definitions for the same purpose (e.g., a legacy method and a standards-based method for establishing a voice call), 
            typically to smooth the transition from an older technology to Jingle.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Content.Senders">
            <summary>
            Which parties in the session will be generating content; the allowable values are 
            "initiator", "none", "responder", and "both" (where the default is "both").
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Content.Disposition">
            <summary>
            ow the content definition is to be interpreted by the recipient.
            The meaning of this Property matches the "Content-Disposition" header as defined in RFC 2183 and applied to SIP by RFC 3261. 
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Jingle.GenerateSid">
            <summary>
            generates a new unique Sid
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Jingle.Media">
            <summary>
            Media Types
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Reason.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Reason.Text">
            <summary>
            Provides a human-readable information about the reason for this action.
            </summary>
            <value>The human-readable text.</value>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Transports.TransportIceUdp.Ufrag">
            <summary>
            The ice-ufrag attribute which can be 4 to 256 bytes long
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Jingle.Transports.TransportIceUdp.Pwd">
            <summary>
            The ice-pwd attribute which can be 22 to 256 bytes long
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportIceUdp.AddCandidate">
            <summary>
            Adds the candidate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportIceUdp.AddCandidate(Matrix.Xmpp.Jingle.Candidates.CandidateIceUdp)">
            <summary>
            Adds the candidate.
            </summary>
            <param name="cand">The cand.</param>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportIceUdp.AddItems(Matrix.Xmpp.Jingle.Candidates.CandidateIceUdp[])">
            <summary>
            Adds the items.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportIceUdp.SetCandidates(System.Collections.Generic.IEnumerable{Matrix.Xmpp.Jingle.Candidates.CandidateIceUdp})">
            <summary>
            Sets the candidates.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportIceUdp.RemoveAllCandidates">
            <summary>
            Removes all candidates.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportRawUdp.AddCandidate">
            <summary>
            Adds the candidate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportRawUdp.AddCandidate(Matrix.Xmpp.Jingle.Candidates.CandidateRawUdp)">
            <summary>
            Adds the candidate.
            </summary>
            <param name="cand">The cand.</param>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportRawUdp.AddItems(Matrix.Xmpp.Jingle.Candidates.CandidateRawUdp[])">
            <summary>
            Adds the items.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportRawUdp.SetCandidates(System.Collections.Generic.IEnumerable{Matrix.Xmpp.Jingle.Candidates.CandidateRawUdp})">
            <summary>
            Sets the candidates.
            </summary>
            <param name="candidates">The candidates.</param>
        </member>
        <member name="M:Matrix.Xmpp.Jingle.Transports.TransportRawUdp.RemoveAllCandidates">
            <summary>
            Removes all candidates.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.LastMessageCorrection.Replace">
            <summary>
            XEP-0308: Last Message Correction
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.LastMessageCorrection.Replace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.LastMessageCorrection.Replace"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Last.Last.Seconds">
            <summary>
            Seconds since the last activity.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.ArchiveBase.Next">
            <summary>
            Gets or sets the link to the "next" collection.
            </summary>
            <value>
            The next.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.ArchiveBase.Previous">
            <summary>
            Gets or sets the link to the "previous" collection.
            </summary>
            <value>
            The previous.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.MessageArchiving.ArchiveEvent">
            <summary>
            Base class with "Start", "With" and "Version" attributes
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.ArchiveItem.TimeStamp">
            <summary>
            Gets or sets the UTC time stamp of the absolute time the note was created. 
            </summary>
            <value>
            The time stamp.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Default.Otr">
            <summary>
            Specifies the user's default setting for OTR Mode.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Default.Save">
            <summary>
            Specifies the user's default setting for Save Mode
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Default.Expire">
            <summary>
            If "Save" is not set to 'false' then is RECOMMENDED to also include an "Expire" value, which indicates 
            how many seconds after messages are archived that the server SHOULD delete them.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Default.Unset">
            <summary>
            If the user has never set the default Modes, the 'Save' and 'Otr' values SHOULD specify the server's default settings,
            and the 'unset' value SHOULD be set to 'true'.
            Note: The 'unset' value defaults to 'false'.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Item.Otr">
            <summary>
            Specifies the user's default setting for OTR Mode.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Item.Save">
            <summary>
            Specifies the user's default setting for Save Mode. The allowable values are:
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Item.Expire">
            <summary>
            If "Save" is not set to 'false' then is RECOMMENDED to also include an "Expire" value, which indicates 
            how many seconds after messages are archived that the server SHOULD delete them.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.MessageArchiving.Link">
            <summary>
            Base class with "Start" and "With" attribute
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.MessageItem.Body">
            <summary>
            Gets or sets the content of a message.
            </summary>
            <value>
            The body.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.MessageItem.Seconds">
            <summary>
            Gets or sets the seconds of the message relative to the previous message in the collection 
            (or, for the first message, relative to the start of the collection)
            </summary>
            <value>
            The seconds.
            </value>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.MethodType.Auto">
            <summary>
             preferences for use of automatic archiving on the user's server.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.MethodType.Local">
            <summary>
             Preferences for use of local archiving to a file or database on the user's machine or device.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.MethodType.Manual">
            <summary>
            Preferences for use of manual archiving by the user's client to the user's server.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.MessageArchiving.Note">
            <summary>
            The Note specifies a private note about the conversation. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.OtrType.Approve">
            <summary>
            approve -- the user MUST explicitly approve off-the-record communication.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.OtrType.Concede">
            <summary>
            concede -- communications MAY be off the record if requested by another user.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.OtrType.Forbid">
            <summary>
            communications MUST NOT be off the record.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.OtrType.Oppose">
            <summary>
            communications SHOULD NOT be off the record even if requested.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.OtrType.Prefer">
            <summary>
            communications SHOULD be off the record if possible.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.OtrType.Require">
            <summary>
             communications MUST be off the record.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.SaveType.Body">
            <summary>
            the saving entity SHOULD save only <body/> elements. *
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.SaveType.False">
            <summary>
            the saving entity MUST save nothing.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.SaveType.Message">
            <summary>
            the saving entity SHOULD save the full XML content of each <message/> element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.SaveType.Stream">
            <summary>
             the saving entity SHOULD save every byte that passes over the stream in either direction.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Session.Save">
            <summary>
            Specifies the user's default setting for Save Mode.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Session.Otr">
            <summary>
            Specifies the user's default setting for OTR Mode.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageArchiving.Session.Timeout">
            <summary>
            The 'timeout' indicates how long this rule will stay in server after the latest message in this thread is exchanged. 
            Server MUST NOT forget this rule before 'timeout' seconds after latest message in this thread is exchanged but MAY keep this rule
             longer than 'timeout' value specifies.
            Client MUST NOT set this , but wait for server's answer to know this value.
            If the client wants to keep this rule longer, it must send a new <session/> element to the server before this timeour expires.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.UseType.Concede">
            <summary>
            this method MAY be used if no other methods are available.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.UseType.Forbid">
            <summary>
            this method MUST NOT be used.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageArchiving.UseType.Prefer">
            <summary>
            this method SHOULD be used if available.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageCarbons.ForwardContainer.Forwarded">
            <summary>
            Gets or sets the forwarded.
            </summary>
            <value>
            The forwarded.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.MessageEvents.Event">
            <summary>
            XEP-0022: Message Events
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.MessageEvents.Event.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.MessageEvents.Event"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageEvents.Event.IsOffline">
            <summary>
            Indicates that the message has been stored offline by the intended recipient's server.
            This event is triggered only if the intended recipient's server supports offline storage, 
            has that support enabled, and the recipient is offline when the server receives the message for delivery.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageEvents.Event.IsDelivered">
            <summary>
            Indicates that the message has been delivered to the recipient. 
            This signifies that the message has reached the recipient's Jabber client, 
            but does not necessarily mean that the message has been displayed. 
            This event is to be raised by the Jabber client.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageEvents.Event.IsDisplayed">
            <summary>
            Once the message has been received by the recipient's Jabber client, 
            it may be displayed to the user. 
            This event indicates that the message has been displayed, and is to be raised by the Jabber client.
            Even if a message is displayed multiple times, this event should be raised only once.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageEvents.Event.IsComposing">
            <summary>
            In threaded chat conversations, this indicates that the recipient is composing a reply to a message.
            The event is to be raised by the recipient's Jabber client. 
            A Jabber client is allowed to raise this event multiple times in response to the same request, 
            providing the original event is cancelled first.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageEvents.Event.Type">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.MessageEvents.Event.Id">
            <summary>
            'id' attribute of the original message to which this event notification pertains.
            (If no 'id' attribute was included in the original message, then the id tag must still be included with no 
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.MessageEvents.EventType">
            <summary>
            XEP-0022: Message Event types
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageEvents.EventType.None">
            <summary>
            No event type specified.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageEvents.EventType.Offline">
            <summary>
            Indicates that the message has been stored offline by the intended recipient's server.
            This event is triggered only if the intended recipient's server supports offline storage, 
            has that support enabled, and the recipient is offline when the server receives the message for delivery.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageEvents.EventType.Delivered">
            <summary>
            Indicates that the message has been delivered to the recipient. 
            This signifies that the message has reached the recipient's Jabber client, 
            but does not necessarily mean that the message has been displayed. 
            This event is to be raised by the Jabber client.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageEvents.EventType.Displayed">
            <summary>
            Once the message has been received by the recipient's Jabber client, 
            it may be displayed to the user. 
            This event indicates that the message has been displayed, and is to be raised by the Jabber client.
            Even if a message is displayed multiple times, this event should be raised only once.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageEvents.EventType.Composing">
            <summary>
            In threaded chat conversations, this indicates that the recipient is composing a reply to a message.
            The event is to be raised by the recipient's Jabber client. 
            A Jabber client is allowed to raise this event multiple times in response to the same request, 
            providing the original event is cancelled first.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Mood.Mood">
            <summary>
            XEP-0107: User Mood
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Mood.Mood.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Mood.Mood"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Mood.Mood.MoodText">
            <summary>
            Gets or sets the optional mood text.
            </summary>
            <value>
            The mood text.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Mood.Mood.UserMood">
            <summary>
            Gets or sets the user mood.
            </summary>
            <value>
            The user mood.
            </value>
        </member>
        <member name="M:Matrix.Xmpp.Mood.Mood.ToPubSub">
            <summary>
            Creates the Pubsub XmppXElement for this Mood.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Mood.Mood.RemoveAllMoods">
            <summary>
            Removed all User Mood tags
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.None">
            <summary>
            No mood set
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Afraid">
            <summary>
            Impressed with fear or apprehension; in fear; apprehensive.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Amazed">
            <summary>
             Astonished; confounded with fear, surprise or wonder.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Amorous">
            <summary>
            Inclined to love; having a propensity to love, or to sexual enjoyment; loving, fond, affectionate, passionate, lustful, sexual, etc.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Angry">
            <summary>
            Displaying or feeling anger, i.e., a strong feeling of displeasure, hostility or antagonism towards someone or something, usually combined with an urge to harm.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Annoyed">
            <summary>
            To be disturbed or irritated, especially by continued or repeated acts.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Anxious">
            <summary>
            Full of anxiety or disquietude; greatly concerned or solicitous, esp. respecting something future or unknown; being in painful suspense.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Aroused">
            <summary>
            To be stimulated in one's feelings, especially to be sexually stimulated.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Ashamed">
             <summary>
            Feeling shame or guilt.
             </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Bored">
            <summary>
            Suffering from boredom; uninterested, without attention.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Brave">
            <summary>
            Strong in the face of fear; courageous.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Calm">
            <summary>
            Peaceful, quiet.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Cautious">
            <summary>
            Taking care or caution; tentative.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Cold">
             <summary>
            Feeling the sensation of coldness, especially to the point of discomfort.
             </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Confident">
            <summary>
            Feeling very sure of or positive about something, especially about one's own capabilities.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Confused">
            <summary>
            Chaotic, jumbled or muddled.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Contemplative">
            <summary>
            Feeling introspective or thoughtful.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Contented">
            <summary>
            Pleased at the satisfaction of a want or desire; satisfied.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Cranky">
            <summary>
            Grouchy, irritable; easily upset.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Crazy">
            <summary>
            Feeling out of control; feeling overly excited or enthusiastic.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Creative">
            <summary>
            Feeling original, expressive, or imaginative.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Curious">
            <summary>
            Inquisitive; tending to ask questions, investigate, or explore.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Dejected">
            <summary>
            Feeling sad and dispirited.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Depressed">
            <summary>
            Severely despondent and unhappy.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Disappointed">
            <summary>
            Defeated of expectation or hope; let down.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Disgusted">
            <summary>
            Filled with disgust; irritated and out of patience.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Dismayed">
            <summary>
            Feeling a sudden or complete loss of courage in the face of trouble or danger.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Distracted">
            <summary>
            Having one's attention diverted; preoccupied.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Embarrassed">
            <summary>
            Having a feeling of shameful discomfort.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Envious">
            <summary>
            Feeling pain by the excellence or good fortune of another.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Excited">
            <summary>
            Having great enthusiasm.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Flirtatious">
            <summary>
            In the mood for flirting.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Frustrated">
            <summary>
            Suffering from frustration; dissatisfied, agitated, or discontented because one is unable to perform an action or fulfill a desire.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Grateful">
            <summary>
            Feeling appreciation or thanks.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Grieving">
             <summary>
            Feeling very sad about something, especially something lost; mournful; sorrowful.
             </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Grumpy">
            <summary>
            Unhappy and irritable.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Guilty">
             <summary>
            Feeling responsible for wrongdoing; feeling blameworthy.
             </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Happy">
            <summary>
            Experiencing the effect of favourable fortune; having the feeling arising from the consciousness of well-being or of enjoyment; enjoying good of any kind, as peace, tranquillity, comfort; contented; joyous.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Hopeful">
            <summary>
            Having a positive feeling, belief, or expectation that something wished for can or will happen.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Hot">
            <summary>
            Feeling the sensation of heat, especially to the point of discomfort.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Humbled">
            <summary>
            Having or showing a modest or low estimate of one's own importance; feeling lowered in dignity or importance.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Humiliated">
            <summary>
            Feeling deprived of dignity or self-respect.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Hungry">
            <summary>
            Having a physical need for food.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Hurt">
            <summary>
            Wounded, injured, or pained, whether physically or emotionally.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Impressed">
            <summary>
            Favourably affected by something or someone.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.InAwe">
            <summary>
            Feeling amazement at something or someone; or feeling a combination of fear and reverence.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.InLove">
            <summary>
            Feeling strong affection, care, liking, or attraction..
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Indignant">
            <summary>
            The indignant
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Interested">
            <summary>
            Showing great attention to something or someone; having or showing interest.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Intoxicated">
            <summary>
            Under the influence of alcohol; drunk.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Invincible">
            <summary>
            Feeling as if one cannot be defeated, overcome or denied.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Jealous">
            <summary>
            Fearful of being replaced in position or affection.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Lonely">
            <summary>
            Feeling isolated, empty, or abandoned.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Lost">
            <summary>
            Unable to find one's way, either physically or emotionally.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Lucky">
            <summary>
            Feeling as if one will be favored by luck.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Mean">
            <summary>
            Causing or intending to cause intentional harm; bearing ill will towards another; cruel; malicious.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Moody">
            <summary>
            Given to sudden or frequent changes of mind or feeling; temperamental.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Nervous">
            <summary>
            Easily agitated or alarmed; apprehensive or anxious.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Neutral">
            <summary>
            Not having a strong mood or emotional state.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Offended">
            <summary>
            Feeling emotionally hurt, displeased, or insulted.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Outraged">
            <summary>
            Feeling resentful anger caused by an extremely violent or vicious attack, or by an offensive, immoral, or indecent act.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Playful">
            <summary>
            Interested in play; fun, recreational, unserious, lighthearted; joking, silly.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Proud">
             <summary>
            Feeling a sense of one's own worth or accomplishment.
             </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Relaxed">
            <summary>
            Having an easy-going mood; not stressed; calm.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Relieved">
            <summary>
            Feeling uplifted because of the removal of stress or discomfort.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Remorseful">
            <summary>
            Feeling regret or sadness for doing something wrong.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Restless">
            <summary>
            Without rest; unable to be still or quiet; uneasy; continually moving.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Sad">
            <summary>
            Feeling sorrow; sorrowful, mournful.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Sarcastic">
            <summary>
            Mocking and ironical.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Satisfied">
            <summary>
            Pleased at the fulfillment of a need or desire.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Serious">
            <summary>
            Without humor or expression of happiness; grave in manner or disposition; earnest; thoughtful; solemn.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Shocked">
            <summary>
            Surprised, startled, confused, or taken aback.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Shy">
            <summary>
            Feeling easily frightened or scared; timid; reserved or coy.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Sick">
            <summary>
            Feeling in poor health; ill.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Sleepy">
            <summary>
            Feeling the need for sleep.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Spontaneous">
            <summary>
            Acting without planning; natural; impulsive.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Stressed">
            <summary>
            Suffering emotional pressure.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Strong">
            <summary>
            Capable of producing great physical force; or, emotionally forceful, able, determined, unyielding.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Surprised">
            <summary>
            Experiencing a feeling caused by something unexpected.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Thankful">
            <summary>
            Showing appreciation or gratitude.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Thirsty">
            <summary>
            Feeling the need to drink.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Tired">
            <summary>
            In need of rest or sleep.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Undefined">
            <summary>
            [Feeling any emotion not defined here.]
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Weak">
            <summary>
            Lacking in force or ability, either physical or emotional.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Mood.Moods.Worried">
            <summary>
            Thinking about unpleasant things that have happened or that might happen; feeling afraid and unhappy.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Muc.Conference">
            <summary>
            XEP-0249: Direct MUC Invitations
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Conference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Conference"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Conference.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Conference"/> class.
            </summary>
            <param name="jid">The jid of the conference room.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.Conference.Password">
            <summary>
            specifies a password needed for entry into a password-protected room.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Muc.Conference.Reason">
            <summary>
            specifies a human-readable purpose for the invitation.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Muc.Owner.OwnerIq">
            <summary>
            Represents a Muc Owner Iq.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Owner.OwnerIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Owner.OwnerIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Owner.OwnerIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Owner.OwnerIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Owner.OwnerIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Owner.OwnerIq"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Owner.OwnerIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Owner.OwnerIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Owner.OwnerIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Owner.OwnerIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Owner.OwnerIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Owner.OwnerIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.Owner.OwnerIq.OwnerQuery">
            <summary>
            Gets or sets the owner query.
            </summary>
            <value>The admin.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.Owner.OwnerQuery">
            <summary>
            Owner Query
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Owner.OwnerQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Owner.OwnerQuery"/> class.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Muc.Admin.AdminQuery">
            <summary>
            Admin
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="N:Matrix.Xmpp.Muc.Admin"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminQuery.#ctor(Matrix.Xmpp.Muc.Admin.Item)">
            <summary>
            Initializes a new instance of the <see cref="N:Matrix.Xmpp.Muc.Admin"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminQuery.#ctor(Matrix.Xmpp.Muc.Admin.Item[])">
            <summary>
            Initializes a new instance of the <see cref="N:Matrix.Xmpp.Muc.Admin"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminQuery.AddItem(Matrix.Xmpp.Muc.Admin.Item)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminQuery.AddItems(Matrix.Xmpp.Muc.Admin.Item[])">
            <summary>
            Adds the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminQuery.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Muc.Admin.AdminIq">
            <summary>
            Represents a Muc Admin Iq.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminIq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.AdminIq"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminIq.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.AdminIq"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminIq.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.AdminIq"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminIq.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.AdminIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.AdminIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.AdminIq.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.AdminIq"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.Admin.AdminIq.AdminQuery">
            <summary>
            Gets or sets the admin.
            </summary>
            <value>The admin.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.Admin.Item">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.Item"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.Item.#ctor(Matrix.Xmpp.Muc.Affiliation)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.Item"/> class.
            </summary>
            <param name="affiliation">The affiliation.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.Item.#ctor(Matrix.Xmpp.Muc.Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.Item"/> class.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.Item.#ctor(Matrix.Xmpp.Muc.Role,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.Item"/> class.
            </summary>
            <param name="role">The role.</param>
            <param name="nick">The nick.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.Item.#ctor(Matrix.Xmpp.Muc.Role,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.Item"/> class.
            </summary>
            <param name="role">The role.</param>
            <param name="nick">The nick.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.Item.#ctor(Matrix.Xmpp.Muc.Affiliation,Matrix.Xmpp.Muc.Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.Item"/> class.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="role">The role.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.Item.#ctor(Matrix.Xmpp.Muc.Affiliation,Matrix.Xmpp.Muc.Role,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.Item"/> class.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="role">The role.</param>
            <param name="jid">The jjid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Admin.Item.#ctor(Matrix.Xmpp.Muc.Affiliation,Matrix.Xmpp.Muc.Role,Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Admin.Item"/> class.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="role">The role.</param>
            <param name="jid">The jid.</param>
            <param name="nick">The nick.</param>
        </member>
        <member name="T:Matrix.Xmpp.Muc.Affiliation">
            <summary>
            There are five defined affiliations that a user may have in relation to a room
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.Affiliation.None">
            <summary>
            the absence of an affiliation
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.Affiliation.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.Affiliation.Admin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.Affiliation.Member">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.Affiliation.Outcast">
            <summary>
            
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Muc.History">
            <summary>
            Class for managing Muc history
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.History.#ctor">
            <summary>
            Initializes a new instance of the <see cref="N:Matrix.Xmpp.Muc"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.History.#ctor(System.DateTime)">
            <summary>
            get the history starting from a given date when available
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.History.#ctor(System.Int32)">
            <summary>
            Specify the maximum nunber of messages to retrieve from the history
            </summary>
            <param name="max"></param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.History.Seconds">
            <summary>
            request the last xxx seconds of history when available
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Muc.History.MaxStanzas">
            <summary>
            Request maximum stanzas of history when available
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Muc.History.Since">
            <summary>
            Request history from a given date when available
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Muc.History.MaxCharacters">
            <summary>
            Limit the total number of characters in the history to "X" 
            (where the character count is the characters of the complete XML stanzas, 
            not only their XML character data).
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.History.op_Implicit(System.Int32)~Matrix.Xmpp.Muc.History">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Matrix.Xmpp.Muc.History"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Muc.History.op_Implicit(System.DateTime)~Matrix.Xmpp.Muc.History">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Matrix.Xmpp.Muc.History"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Muc.History.op_Implicit(Matrix.Xmpp.Muc.History)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:Matrix.Xmpp.Muc.History"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="history">The history.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Muc.History.op_Implicit(Matrix.Xmpp.Muc.History)~System.DateTime">
            <summary>
            Performs an implicit conversion from <see cref="T:Matrix.Xmpp.Muc.History"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="history">The history.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Matrix.Xmpp.Muc.Item">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.Item.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.Item"/> class.
            </summary>
            <param name="ns">The namespace.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.Item.Role">
            <summary>
            Gets or sets the role.
            </summary>
            <value>The role.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.Item.Affiliation">
            <summary>
            Gets or sets the affiliation.
            </summary>
            <value>The affiliation.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.Item.Nickname">
            <summary>
            Gets or sets the nickname.
            </summary>
            <value>The nickname.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.Item.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.Role">
            <summary>
            There are four defined roles that an occupant may have
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.Role.None">
            <summary>
            the absence of a role
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.Role.Moderator">
            <summary>
            A moderator is the most powerful occupant within the context of the room, 
            and can to some extent manage other occupants's roles in the room.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.Role.Participant">
            <summary>
            A participant has fewer privileges than a moderator, although he or she always has the right to speak.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.Role.Visitor">
            <summary>
            A visitor is a more restricted role within the context of a moderated room, 
            since visitors are not allowed to send messages to all occupants.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Muc.User.Actor">
            <summary>
            Actor
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Actor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Actor"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Actor.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Actor"/> class.
            </summary>
            <param name="jid">The jid.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Actor.Nickname">
            <summary>
            Gets or sets the nickname.
            </summary>
            <value>The nickname.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.User.Continue">
            <summary>
            Continue
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Continue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Continue"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Continue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Continue"/> class.
            </summary>
            <param name="thread">The thread.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Continue.Thread">
            <summary>
            Gets or sets the thread.
            </summary>
            <value>The thread.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.User.Decline">
            <summary>
            Decline
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Decline.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Decline"/> class.
            </summary>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Decline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Decline"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Decline.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Decline"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Decline.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Decline"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Decline.#ctor(Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Decline"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Decline.#ctor(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Decline"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Decline.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.User.Destroy">
            <summary>
            Destroy
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Destroy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Destroy"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Destroy.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Destroy"/> class.
            </summary>
            <param name="jid">The jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Destroy.#ctor(Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Destroy"/> class.
            </summary>
            <param name="jid">The jid.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Destroy.Jid">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Muc.User.Destroy.Jid"/>.
            </summary>
            <value>The jid.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Destroy.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.User.Invite">
            <summary>
            Invite
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Invite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Invite"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Invite.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Invite"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Invite.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Invite"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Invite.#ctor(Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Invite"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Invite.#ctor(Matrix.Jid,Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Invite"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Invite.Continue">
            <summary>
            Gets or sets the continue object.
            </summary>
            <value>The continue.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Invite.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.User.Item">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Item"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Item.#ctor(Matrix.Xmpp.Muc.Affiliation)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Item"/> class.
            </summary>
            <param name="affiliation">The affiliation.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Item.#ctor(Matrix.Xmpp.Muc.Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Item"/> class.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Item.#ctor(Matrix.Xmpp.Muc.Affiliation,Matrix.Xmpp.Muc.Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Item"/> class.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="role">The role.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Item.#ctor(Matrix.Xmpp.Muc.Affiliation,Matrix.Xmpp.Muc.Role,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Item"/> class.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="role">The role.</param>
            <param name="jid">The jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Item.#ctor(Matrix.Xmpp.Muc.Affiliation,Matrix.Xmpp.Muc.Role,Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Item"/> class.
            </summary>
            <param name="affiliation">The affiliation.</param>
            <param name="role">The role.</param>
            <param name="jid">The jid.</param>
            <param name="nick">The nick.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Item.Continue">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Muc.User.Item.Continue"/>.
            </summary>
            <value>The continue.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Item.Actor">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Muc.User.Item.Actor"/>.
            </summary>
            <value>The actor.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.User.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Status.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Status"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Status.#ctor(Matrix.Xmpp.Muc.User.StatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Status"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.Status.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.Status"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Status.CodeInt">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>The code as integer.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.Status.Code">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="T:Matrix.Xmpp.Muc.User.StatusCode">
            <summary>
            StatusCode
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.Unknown">
            <summary>
            Unkown status code.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.FullJidVisible">
            <summary>
            Inform user that any occupant is allowed to see the user's full JID.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.AffiliationChanged">
            <summary>
            Inform user that his or her affiliation changed while not in the room.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.ShowUnavailableMembers">
            <summary>
            Inform occupants that room now shows unavailable members.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.HideUnavailableMembers">
            <summary>
            Inform occupants that room now does not show unavailable members .
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.ConfigurationChanged">
            <summary>
            Inform occupants that a non-privacy-related room configuration change has occurred.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.SelfPresence">
            <summary>
            Inform user that presence refers to one of its own room occupants .
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.LoggingEnabled">
            <summary>
            Inform occupants that room logging is now enabled.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.LoggingDisabled">
            <summary>
            Inform occupants that room logging is now disabled. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.RoomNonAnonymous">
            <summary>
            Inform occupants that the room is now non-anonymous.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.RoomSemiAnonymous">
            <summary>
            Inform occupants that the room is now semi-anonymous.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.RoomAnonymous">
            <summary>
            Inform occupants that the room is now fully-anonymous. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.RoomCreated">
            <summary>
            Inform user that a new room has been created. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.ModifiedNick">
            <summary>
             Inform user that service has assigned or modified occupant's roomnick.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.Banned">
            <summary>
            Inform user that he or she has been banned from the room. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.NewNickname">
            <summary>
            Inform all occupants of new room nickname. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.Kicked">
            <summary>
            Inform user that he or she has been kicked from the room. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.AffiliationChange">
            <summary>
            Inform user that he or she is being removed from the room because of an affiliation change.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.MembersOnly">
            <summary>
            Inform user that he or she is being removed from the room because the room 
            has been changed to members-only and the user is not a member.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Muc.User.StatusCode.Shutdown">
            <summary>
            Inform user that he or she is being removed from the room because of a system shutdown.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Muc.User.X">
            <summary>
            X
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.X.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.User.X"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.X.Password">
            <summary>
            Gets or sets the room password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.X.Item">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Muc.User.X.Item"/>.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.X.Decline">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Muc.User.X.Decline"/>.
            </summary>
            <value>The declice.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.User.X.Destroy">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Muc.User.X.Destroy"/>.
            </summary>
            <value>The destroy.</value>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.X.AddStatus(Matrix.Xmpp.Muc.User.Status)">
            <summary>
            Adds a status.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.X.GetStatuses">
            <summary>
            Gets the statuses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.X.HasStatus(Matrix.Xmpp.Muc.User.StatusCode)">
            <summary>
            Determines whether the specified status is included.
            </summary>
            <param name="scode">The scode.</param>
            <returns>
            	<c>true</c> if the specified scode has status; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.X.HasStatus(System.Int32)">
            <summary>
            Determines whether the specified code is included.
            </summary>
            <param name="code">The code.</param>
            <returns>
            	<c>true</c> if the specified code has status; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.X.AddInvite(Matrix.Xmpp.Muc.User.Invite)">
            <summary>
            Adds the invite.
            </summary>
            <param name="invite">The invite.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.User.X.GetInvites">
            <summary>
            Gets all <see cref="T:Matrix.Xmpp.Muc.User.Invite"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Muc.X">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.X.#ctor">
            <summary>
            Initializes a new instance of the <see cref="N:Matrix.Xmpp.Muc"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Muc.X.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="N:Matrix.Xmpp.Muc"/> class.
            </summary>
            <param name="pass">The room password.</param>
        </member>
        <member name="M:Matrix.Xmpp.Muc.X.#ctor(Matrix.Xmpp.Muc.History)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Muc.X"/> class.
            </summary>
            <param name="history">The <see cref="P:Matrix.Xmpp.Muc.X.History"/>.</param>
        </member>
        <member name="P:Matrix.Xmpp.Muc.X.Password">
            <summary>
            Gets or sets the room password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Matrix.Xmpp.Muc.X.History">
            <summary>
            Gets or sets the <see cref="P:Matrix.Xmpp.Muc.X.History"/>
            </summary>
            <value>The history.</value>
        </member>
        <member name="T:Matrix.Xmpp.Oob.Oob">
            <summary>
            XEP-0066: Out of Band Data
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Oob.Oob.Sid">
            <summary>
            Gets or sets the session id.
            </summary>
            <value>
            The sid.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Oob.Oob.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Oob.Oob.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Oob.Oob.Description">
            <summary>
            Gets or sets a description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.Oob.XOob">
            <summary>
            XEP-0066: Out of Band Data
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Ping.Ping">
            <summary>
            XEP-0199: XMPP Ping
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Privacy.Action">
            <summary>
            privacy list action
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Action.Allow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Action.Deny">
            <summary>
            
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Privacy.Item.Order">
            <summary>
            The order of this rule
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Privacy.Item.Val">
            <summary>
            The value to match of this rule
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Privacy.Item.BlockIq">
            <summary>
            Block Iq stanzas
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Privacy.Item.BlockMessage">
            <summary>
            Block messages
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Privacy.Item.BlockIncomingPresence">
            <summary>
            Block incoming presence
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Privacy.Item.BlockOutgoingPresence">
            <summary>
            Block outgoing presence
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Privacy.Item.Stanza">
            <summary>
            which stanzas should be blocked?
            the enum values can be combined.
            </summary>
            <example>
            item.Stanza = Stanza.Message | Stanza.IncomingPresence;
            </example>
        </member>
        <member name="T:Matrix.Xmpp.Privacy.List">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Privacy.List.GetItems">
            <summary>
            Gets all Rules (Items) when available
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Privacy.List.AddItem">
            <summary>
            Adds an item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Privacy.List.AddItem(Matrix.Xmpp.Privacy.Item)">
            <summary>
            Add Item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Matrix.Xmpp.Privacy.List.AddItems(Matrix.Xmpp.Privacy.Item[])">
            <summary>
            Add multiple Items
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Matrix.Xmpp.Privacy.List.SetItems(System.Collections.Generic.IEnumerable{Matrix.Xmpp.Privacy.Item})">
            <summary>
            Sets the Items.
            </summary>
            <param name="items">The Items.</param>
        </member>
        <member name="M:Matrix.Xmpp.Privacy.List.RemoveAllItems">
            <summary>
            Remove all items/rules of this list
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Privacy.Privacy.AddList(Matrix.Xmpp.Privacy.List)">
            <summary>
            Add a privacy list
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Matrix.Xmpp.Privacy.Privacy.GetLists">
            <summary>
            get all Lists
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.Xmpp.Privacy.Privacy.Active">
            <summary>
            The active list
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Privacy.Privacy.Default">
            <summary>
            The default list
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Privacy.Stanza">
            <summary>
            enum for block or allow communications.
            This flags could be combined under the following conditions.
            </summary>
            <remarks>
            <list type="bullet">
                <item>All must stand alone, its not allowed to combine thsi flag</item>
                <item>Message, Iq, IncomingPresence and Outgoing Presence could be combined, 
                    <b>but</b> its not allowed to combine more than 3 of this flag.
                    If you need all of them you have to use the All flag</item>
            </list>
            </remarks>    
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Stanza.All">
            <summary>
            Block all stanzas
            !!! Don't combine this flag with others!!!
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Stanza.Message">
            <summary>
            Block messages
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Stanza.Iq">
            <summary>
            Block IQs
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Stanza.IncomingPresence">
            <summary>
            Block Incoming Presences
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Stanza.OutgoingPresence">
            <summary>
            Block Outgoing Presences
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Privacy.Type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Type.Jid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Type.Group">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Privacy.Type.Subscription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Affiliation.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Affiliations.AddAffiliation">
            <summary>
            Adds the affiliation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Affiliations.AddAffiliation(Matrix.Xmpp.PubSub.Affiliation)">
            <summary>
            Adds the item.
            </summary>
            <param name="affiliation">The affiliation.</param>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Affiliations.GetAffiliations">
            <summary>
            Gets the affiliations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Affiliations.SetAffiliations(System.Collections.Generic.IEnumerable{Matrix.Xmpp.PubSub.Affiliation})">
            <summary>
            Sets the items.
            </summary>
            <param name="affiliations">The affiliations.</param>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Affiliations.RemoveAllAffiliations">
            <summary>
            Removes all affiliations.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Configure.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Create.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Delete.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Event.Associate.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Event.Collection.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Event.Disassociate.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Event.Item.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Event.Item.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Event.Items.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.AddItem">
            <summary>
            Adds an item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.AddItem(Matrix.Xmpp.PubSub.Event.Item)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.GetItems">
            <summary>
            Gets all items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.SetItems(System.Collections.Generic.IEnumerable{Matrix.Xmpp.PubSub.Event.Item})">
            <summary>
            Sets the Items.
            </summary>
            <param name="items">The Items.</param>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.RemoveAllItems">
            <summary>
            Removes all Items.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.AddRetract">
            <summary>
            Adds the retract.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.AddRetract(Matrix.Xmpp.PubSub.Event.Retract)">
            <summary>
            Adds the retract.
            </summary>
            <param name="retract">The retract.</param>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.GetRetracts">
            <summary>
            Gets the retracts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.SetRetracts(System.Collections.Generic.IEnumerable{Matrix.Xmpp.PubSub.Event.Retract})">
            <summary>
            Sets the retracts.
            </summary>
            <param name="retracts">The retract.</param>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Event.Items.RemoveAllRetracts">
            <summary>
            Removes all retracts.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Event.Retract.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Event.Subscription.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.PubSub.Item"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Item.#ctor(Matrix.Xml.XmppXElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.PubSub.Item"/> class and adds the given payload.
            </summary>
            <param name="payload">The payload.</param>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Item.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Items.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Items.Id">
            <summary>
            Gets or sets the subscription id.
            </summary>
            <value>The subscription id.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Items.MaxItems">
            <summary>
            A service MAY allow entities to request the most recent N items. 
            When max_items is used, implementations SHOULD return the N most recent 
            (as opposed to the N oldest) items.
            </summary>
            <value>The max items.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Owner.Affiliation.Jid">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Matrix.Xmpp.PubSub.Owner.Affiliations">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.Affiliations.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.PubSub.Owner.Affiliations"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.Affiliations.AddAffiliation">
            <summary>
            Adds the affiliation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.Affiliations.AddAffiliation(Matrix.Xmpp.PubSub.Owner.Affiliation)">
            <summary>
            Adds the item.
            </summary>
            <param name="affiliation">The affiliation.</param>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.Affiliations.GetAffiliations">
            <summary>
            Gets the affiliations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.Affiliations.SetAffiliations(System.Collections.Generic.IEnumerable{Matrix.Xmpp.PubSub.Owner.Affiliation})">
            <summary>
            Sets the items.
            </summary>
            <param name="affiliations">The affiliations.</param>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.Affiliations.RemoveAllAffiliations">
            <summary>
            Removes all affiliations.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.PubSub.Owner.PubSub">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.PubSub.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.PubSub.Owner.PubSub"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Owner.PubSub.Affiliations">
            <summary>
            Gets or sets the Affiliations.
            </summary>
            <value>
            The affiliations.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Owner.PubSub.Subscriptions">
            <summary>
            Gets or sets the Subscriptions.
            </summary>
            <value>
            The subscriptions.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.PubSub.Owner.Subscriptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.Subscriptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.PubSub.Owner.Subscriptions"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.Subscriptions.AddSubscription">
            <summary>
            Adds a subscription.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Owner.Subscriptions.GetSubscriptions">
            <summary>
            Gets the subscriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Publish.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.PubSub.Publish"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Publish.#ctor(Matrix.Xmpp.PubSub.Item)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.PubSub.Publish"/> class and adds the given item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Publish.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Publish.AddItem">
            <summary>
            Adds an Item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Publish.AddItem(Matrix.Xmpp.PubSub.Item)">
            <summary>
            Adds an Item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Publish.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.PubSub.PubSub">
            <summary>
            
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.PubSub.Affiliations">
            <summary>
            Gets or sets the affiliations.
            </summary>
            <value>
            The affiliations.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.PubSub.Subscriptions">
            <summary>
            Gets or sets the subscriptions.
            </summary>
            <value>
            The subscriptions.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.PubSub.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.PubSub.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Purge.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Subscribe.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Subscribe.Jid">
            <summary>
            Gets or sets the jid.
            </summary>
            <value>The jid.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Subscription.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Subscription.SubscribeOptions">
            <summary>
            Gets or sets the subscribe options.
            </summary>
            <value>The subscribe options.</value>
        </member>
        <member name="T:Matrix.Xmpp.PubSub.Subscriptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Subscriptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.PubSub.Subscriptions"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Subscriptions.AddSubscription">
            <summary>
            Adds a subscription.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.PubSub.Subscriptions.GetSubscriptions">
            <summary>
            Gets the subscriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Matrix.Xmpp.PubSub.SubscriptionState.None">
            <summary>
            The node MUST NOT send event notifications or payloads to the Entity.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PubSub.SubscriptionState.Pending">
            <summary>
            An entity has requested to subscribe to a node and the request 
            has not yet been approved by a node owner. The node MUST NOT 
            send event notifications or payloads to the entity while it 
            is in this state.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PubSub.SubscriptionState.Unconfigured">
            <summary>
            An entity has subscribed but its subscription options have not yet 
            been configured. The node MAY send event notifications or payloads 
            to the entity while it is in this state. 
            The service MAY timeout unconfigured subscriptions.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PubSub.SubscriptionState.Subscribed">
            <summary>
            An entity is subscribed to a node. The node MUST send all event 
            notifications (and, if configured, payloads) to the entity while 
            it is in this state (subject to subscriber configuration and 
            content filtering).
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.PubSub.Unsubscribe.SubId">
            <summary>
            Gets or sets the subscription id.
            </summary>
            <value>The subscription id.</value>
        </member>
        <member name="T:Matrix.Xmpp.Register.RegisterEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Register.RegisterEventArgs.Register">
            <summary>
            Gets or sets the register.
            </summary>
            <value>The register.</value>
        </member>
        <member name="T:Matrix.Xmpp.Register.Register">
            <summary>
            XEP-0077: In-Band Registration
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Register.Register.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Register.Register"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Register.Register.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Register.Register"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Instructions">
            <summary>
            Gets or sets the instructions.
            </summary>
            <value>The instructions.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Name">
            <summary>
            Gets the name of this element.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Xml.Linq.XName"/> that contains the name of this element.
            </returns>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.First">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Last">
            <summary>
            Gets or sets the last name.
            </summary>
            <value>The last.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Misc">
            <summary>
            Gets or sets the misc.
            </summary>
            <value>The misc.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Zip">
            <summary>
            Gets or sets the zip.
            </summary>
            <value>The zip.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Nick">
            <summary>
            Gets or sets the nick.
            </summary>
            <value>The nick.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Remove">
            <summary>
            Remove registration from the server
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.Registered">
            <summary>
            Gets or sets a value indicating whether the entity is already registered with a sevice.
            </summary>
            <value><c>true</c> if registered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Register.Register.XData">
            <summary>
            Gets or sets the xdata form.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Matrix.Xmpp.Bind.Bind.Required">
            <summary>
            Is Bind required (for stream feature only)?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bind.Bind.Resource">
            <summary>
            The resource to bind
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Bind.Bind.Jid">
            <summary>
            The jid the server created
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Delay.Delay">
            <summary>
            XEP-0203: Delayed Delivery
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Delay.Delay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Delay.Delay"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Delay.Delay.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Delay.Delay"/> class.
            </summary>
            <param name="stamp">The stamp.</param>
        </member>
        <member name="M:Matrix.Xmpp.Delay.Delay.#ctor(System.DateTime,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Delay.Delay"/> class.
            </summary>
            <param name="stamp">The stamp.</param>
            <param name="from">From.</param>
        </member>
        <member name="P:Matrix.Xmpp.Delay.Delay.From">
            <summary>
            The Jabber ID of the entity that originally sent the XML stanza or that delayed the delivery of the stanza 
            (for example, the address of a multi-user chat room).
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Matrix.Xmpp.Delay.Delay.Stamp">
            <summary>
            Gets or sets the stamp. The time when the XML stanza was originally sent.        
            </summary>
            <value>The stamp.</value>
        </member>
        <member name="T:Matrix.Xmpp.Delay.XDelay">
            <summary>
            XEP-0091: Delayed Delivery
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Delay.XDelay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Delay.XDelay"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Delay.XDelay.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Delay.XDelay"/> class.
            </summary>
            <param name="stamp">The stamp.</param>
        </member>
        <member name="M:Matrix.Xmpp.Delay.XDelay.#ctor(System.DateTime,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Delay.XDelay"/> class.
            </summary>
            <param name="stamp">The stamp.</param>
            <param name="from">From.</param>
        </member>
        <member name="P:Matrix.Xmpp.Delay.XDelay.From">
            <summary>
            The Jabber ID of the entity that originally sent the XML stanza or that delayed the delivery of the stanza 
            (for example, the address of a multi-user chat room).
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Matrix.Xmpp.Delay.XDelay.Stamp">
            <summary>
            Gets or sets the stamp. The time when the XML stanza was originally sent.
            </summary>
            <value>The stamp.</value>
        </member>
        <member name="T:Matrix.Xmpp.Disco.DiscoIqEventArgs">
            <summary>
            Disco EventArgs.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Disco.DiscoIqEventArgs.#ctor(Matrix.Xmpp.Client.Iq,Matrix.Xmpp.Disco.Items)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.DiscoIqEventArgs"/> class.
            </summary>
            <param name="iq">The iq.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Matrix.Xmpp.Disco.DiscoIqEventArgs.#ctor(Matrix.Xmpp.Client.Iq,Matrix.Xmpp.Disco.Info)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.DiscoIqEventArgs"/> class.
            </summary>
            <param name="iq">The iq.</param>
            <param name="info">The info.</param>
        </member>
        <member name="P:Matrix.Xmpp.Disco.DiscoIqEventArgs.Info">
            <summary>
            Gets the disco info.
            </summary>
            <value>The disco info.</value>
        </member>
        <member name="P:Matrix.Xmpp.Disco.DiscoIqEventArgs.Items">
            <summary>
            Gets the disco items.
            </summary>
            <value>The disco items.</value>
        </member>
        <member name="P:Matrix.Xmpp.Disco.Feature.Var">
            <summary>
            protocol namespace or other feature offered by the entity
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Disco.Identity.Type">
            <summary>
            type category name for the entity
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Disco.Identity.Name">
            <summary>
            natural-language name for the entity
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Disco.Identity.Category">
            <summary>
            category name for the entity
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Disco.Info">
            <summary>
            Disco Information
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.Info"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.Info"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Matrix.Xmpp.Disco.Info.Node">
            <summary>
            Optional node Attrib
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.AddIdentity">
            <summary>
            Adds a identity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.AddIdentity(Matrix.Xmpp.Disco.Identity)">
            <summary>
            Adds a identity.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.AddFeature">
            <summary>
            Adds a feature.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.AddFeature(Matrix.Xmpp.Disco.Feature)">
            <summary>
            Adds a feature.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.GetIdentities">
            <summary>
            Gets the identities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.GetFeatures">
            <summary>
            Gets all Features
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.HasFeature(System.String)">
            <summary>
            Check if a feature is supported
            </summary>
            <param name="var">The var.</param>
            <returns>
            	<c>true</c> if the specified feature exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.GetDataForms">
            <summary>
            Gets all XData Froms
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Info.AddDataForm(Matrix.Xmpp.XData.Data)">
            <summary>
            Add a xdata form
            </summary>
            <param name="form"></param>
        </member>
        <member name="P:Matrix.Xmpp.Disco.Info.XData">
            <summary>
            Gets or sets the Xdata object.
            </summary>
            <value>The X data.</value>
        </member>
        <member name="T:Matrix.Xmpp.Disco.Item">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.Item"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Item.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.Item"/> class.
            </summary>
            <param name="jid">The jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Item.#ctor(Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.Item"/> class.
            </summary>
            <param name="jid">The jid.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Item.#ctor(Matrix.Jid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.Item"/> class.
            </summary>
            <param name="jid">The jid.</param>
            <param name="node">The node.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Matrix.Xmpp.Disco.Item.Jid">
            <summary>
            Gets or sets the Jid.
            </summary>
            <value>The Jid.</value>
        </member>
        <member name="P:Matrix.Xmpp.Disco.Item.Name">
            <summary>
            Gets the name of this element.
            </summary>
            <value>The name</value>        
        </member>
        <member name="P:Matrix.Xmpp.Disco.Item.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Matrix.Xmpp.Disco.Items">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Items.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.Items"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Items.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Disco.Items"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Matrix.Xmpp.Disco.Items.Node">
            <summary>
            The node to discover (Optional)
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Items.AddItem">
            <summary>
            Adds an item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Items.AddItem(Matrix.Xmpp.Disco.Item)">
            <summary>
            Adds an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Items.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Items.SetItems(System.Collections.Generic.IEnumerable{Matrix.Xmpp.Disco.Item})">
            <summary>
            Sets the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Matrix.Xmpp.Disco.Items.RemoveAllItems">
            <summary>
            Removes all items.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.IqType">
            <summary>
            The 'type' attribute is REQUIRED for IQ stanzas.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.IqType.Get">
            <summary>
            The stanza is a request for information or requirements.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.IqType.Set">
            <summary>
            The stanza provides required data, sets new values, or replaces existing values.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.IqType.Result">
            <summary>
            The stanza is a response to a successful get or set request.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.IqType.Error">
            <summary>
            An error has occurred regarding processing or delivery of a previously-sent get or set (see Stanza Errors (Stanza Errors)).
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Nickname.Nick">
            <summary>
            XEP-0172: User Nickname
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Nickname.Nick.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Nickname.Nick"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Nickname.Nick.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Nickname.Nick"/> class.
            </summary>
            <param name="nickname">The nickname.</param>
        </member>
        <member name="T:Matrix.Xmpp.ResultSetManagement.Set">
            <summary>
            XEP-0059: Result Set Management
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.ResultSetManagement.Set.Maximum">
            <summary>
            Gets or sets the maximum for limiting the number of items.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.ResultSetManagement.Set.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.ResultSetManagement.Set.Last">
            <summary>
            Gets or sets a reference the last item.
            </summary>
            <value>
            The last.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.ResultSetManagement.Set.First">
            <summary>
            Gets or sets a reference the first item.
            </summary>
            <value>
            The first.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.RosterItemExchange.Exchange">
            <summary>
            XEP-0144 Roster Item exchange
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.RosterItemExchange.Exchange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.RosterItemExchange.Exchange" /> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.RosterItemExchange.Exchange.GetRosterExchangeItems">
            <summary>
            Gets the roster exchange items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.RosterItemExchange.Exchange.AddRosterExchangeItem(Matrix.Xmpp.RosterItemExchange.RosterExchangeItem)">
            <summary>
            Adds the roster exchange item.
            </summary>
            <param name="ri">The ri.</param>
        </member>
        <member name="T:Matrix.Xmpp.Roster.Roster">
            <summary>
            Roster class, this represents a contact list in XMPP aka roster.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Roster.Roster.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Roster.Roster"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Roster.Roster.Version">
            <summary>
            A string that identifies a particular version of the roster information.
            The value MUST be generated only by the server and MUST be treated by the client as opaque.
            The server can use any appropriate method for generating the version ID, such as a hash of the roster data 
            or a strictly-increasing sequence number.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Roster.Roster.GetRoster">
            <summary>
            Get all groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Roster.Roster.AddRosterItem(Matrix.Xmpp.Roster.RosterItem)">
            <summary>
            Adds the roster item.
            </summary>
            <param name="ri">The ri.</param>
        </member>
        <member name="M:Matrix.Xmpp.Roster.Roster.ContainsRosterItem(Matrix.Jid)">
            <summary>
            Does the Roster contain an RosterItem with the given Jid?
            </summary>
            <param name="jid"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Roster.Roster.RemoveRosterItem(Matrix.Jid)">
            <summary>
            Removes the RosterItem from the roster with the given Jid
            </summary>
            <param name="jid">The jid.</param>
            <returns>true when removed, false when the item did not exists and could not be removed.</returns>
        </member>
        <member name="T:Matrix.Xmpp.Roster.RosterItem">
            <summary>
            RosterItem represents a contact object.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Roster.RosterItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Roster.RosterItem"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Roster.RosterItem.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Roster.RosterItem"/> class.
            </summary>
            <param name="jid">The jid.</param>
        </member>
        <member name="M:Matrix.Xmpp.Roster.RosterItem.#ctor(Matrix.Jid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Roster.RosterItem"/> class.
            </summary>
            <param name="jid">The jid.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Matrix.Xmpp.Roster.RosterItem.#ctor(Matrix.Jid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Roster.RosterItem"/> class.
            </summary>
            <param name="jid">The jid.</param>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
        </member>
        <member name="P:Matrix.Xmpp.Roster.RosterItem.Subscription">
            <summary>
            Gets or sets the subscription.
            </summary>
            <value>The subscription.</value>
        </member>
        <member name="P:Matrix.Xmpp.Roster.RosterItem.Ask">
            <summary>
            Gets or sets the ask.
            </summary>
            <value>The ask.</value>
        </member>
        <member name="P:Matrix.Xmpp.Roster.RosterItem.Approved">
            <summary>
            Approved is used to signal subscription pre-approval.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Roster.Subscription.None">
            <summary>
            the user does not have a subscription to the contact's presence information, 
            and the contact does not have a subscription to the user's presence information
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Roster.Subscription.To">
            <summary>
            the user has a subscription to the contact's presence information, but the contact does 
            not have a subscription to the user's presence information
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Roster.Subscription.From">
            <summary>
            the contact has a subscription to the user's presence information, but the user does not have a subscription 
            to the contact's presence information
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Roster.Subscription.Both">
            <summary>
            both the user and the contact have subscriptions to each other's presence information
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Roster.Subscription.Remove">
            <summary>
            for requests to remove the contact from the roster
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Rpc.MethodCall.MethodName">
            <summary>
            The RPC Method name
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Rpc.MethodResponse.IsError">
            <summary>
            Is this response and error?
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Rpc.XmlRpcParser.ParseParams(Matrix.Xml.XmppXElement)">
            <summary>
            parse the response
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Rpc.XmlRpcParser.ParseStruct(Matrix.Xml.XmppXElement)">
            <summary>
            parse a response struct
            </summary>
            <param name="el">The el.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Rpc.XmlRpcParser.ParseValue(Matrix.Xml.XmppXElement)">
            <summary>
            Parse a single response value
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Rpc.XmlRpcParser.ParseArray(Matrix.Xml.XmppXElement)">
            <summary>
            parse a response array
            </summary>
            <param name="elArray">The el array.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Rpc.XmlRpcWriter.WriteValue(System.Object,System.Xml.Linq.XElement)">
            <summary>
            Writes a single value to a call
            </summary>
            <param name="param"></param>
            <param name="parent"></param>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Auth">
            <summary>
            Summary description for Auth.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Auth.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Sasl.Auth"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Auth.#ctor(Matrix.Xmpp.Sasl.SaslMechanism)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Sasl.Auth"/> class.
            </summary>
            <param name="mechanism">The mechanism.</param>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Auth.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Sasl.Auth"/> class.
            </summary>
            <param name="mechanism">The sasl mechanism name as string.</param>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Auth.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Sasl.Auth"/> class.
            </summary>
            <param name="mechanism">The mechanism.</param>
            <param name="text">The value of the auth tag.</param>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Auth.#ctor(Matrix.Xmpp.Sasl.SaslMechanism,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Sasl.Auth"/> class.
            </summary>
            <param name="mechanism">The mechanism.</param>
            <param name="text">The value of the auth tag.</param>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.Auth.SaslMechanism">
            <summary>
            Gets or sets the sasl mechanism.
            </summary>
            <value>
            The sasl mechanism.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Hostname">
            <summary>
            Hostname for XEP-0233: Domain-Based Service Names in XMPP SASL Negotiation.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.Facebook.FacebookProperties">
            <summary>
            Extended SASL properties required by the X-FACEBOOK-PLATFORM Sasl mechanism
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.Facebook.FacebookProcessor">
            <summary>
            An implementation of the X-FACEBOOK-PLATFORM Sasl mechanism.
            http://developers.facebook.com/docs/chat#auth
            http://forum.developers.facebook.net/viewtopic.php?pid=204996#p204996
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.Gssapi.GssapiProcessor">
            <summary>
            Handels the GSSAPI/Kerberos authentication
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Processor.Gssapi.GssapiProcessor.GetNtDomain">
            <summary>
            returns the NT domain, this is used for building the kerberos principal when none is provided.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.LiveMessenger.LiveMessengerProcessor">
            <summary>
            An implementation of Microsofts X-MESSENGER-OAUTH2 Sasl mechanism.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.LiveMessenger.LiveMessengerProperties">
            <summary>
            Extended SASL properties required by the X-MESSENGER-OAUTH2 Sasl mechanism
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.Ntlm.NtlmProcessor">
            <summary>
            NTLM SASL processor
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.SaslProperties">
            <summary>
            Extended SASL properties required by some mechanism
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.Digest.Step1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.Processor.Digest.Step1.m_Qop">
            <summary>
            default Qop to "auth" when not present as documented in rfc2831
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.Digest.Step2">
            <summary>
            Summary description for Step2.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Processor.Digest.Step2.#ctor(Matrix.Xmpp.Sasl.Processor.Digest.Step1,Matrix.Xmpp.Sasl.Processor.SaslProcessor)">
            <summary>
            builds a step2 message reply to the given step1 message
            </summary>
            <param name="step1">The step1.</param>
            <param name="proc">The proc.</param>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Processor.Digest.Step2.AddQuotes(System.String)">
            <summary>
            return the given string with quotes
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Processor.External.ExternalProcessor.GetAuthzId">
            <summary>
            Gets the authz id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.Plain.PlainProcessor">
            <summary>
            Processor for SASL PLAIN
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.SaslProcessor">
            <summary>
            abstract SaslProcessor
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.Processor.SaslProcessor.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.Processor.SaslProcessor.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.Processor.SaslProcessor.Server">
            <summary>
            Gets or sets the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Processor.SaslProcessor.Init(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            
            </summary>
            <param name="con">The con.</param>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Processor.SaslProcessor.Parse(Matrix.Xmpp.Sasl.Challenge)">
            <summary>
            Parses the specified ch.
            </summary>
            <param name="ch">The challenge.</param>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.Scram.ScramSha1Processor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Processor.XToken.XGoogleTokenProcessor">
            <summary>
            X-GOOGLE-TOKEN Authentication
            This can be used for secure authentication to google talk on (unsecure) plain sockets
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.Processor.XToken.XGoogleTokenProcessor.BareJid">
            <summary>
            builds the bare jid from the XmppClient
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Failure">
            <summary>
            Sasl failure object.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Failure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Sasl.Failure"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Failure.#ctor(Matrix.Xmpp.Sasl.FailureCondition)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Sasl.Failure"/> class.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.Failure.Condition">
            <summary>
            The failure condition
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.Failure.Text">
            <summary>
            An optional text description for the authentication failure.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.Aborted">
            <summary>
            The receiving entity acknowledges an abort element sent by the initiating entity; sent in reply to the abort element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.AccountDisabled">
            <summary>
            The account of the initiating entity has been temporarily disabled; sent in reply to an auth element (with or without initial response data) or a response element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.CredentialsExpired">
            <summary>
            The authentication failed because the initiating entity provided credentials that have expired; sent in reply to a response element or an auth element with initial response data.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.EncryptionRequired">
            <summary>
            The mechanism requested by the initiating entity cannot be used unless the confidentiality and integrity of the underlying stream are protected (typically via TLS); sent in reply to an <auth/> element (with or without initial response data).
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.IncorrectEncoding">
            <summary>
            The data provided by the initiating entity could not be processed because the [BASE64] (Josefsson, S., “The Base16, Base32, and Base64 Data Encodings,” July 2003.) encoding is incorrect (e.g., because the encoding does not adhere to the definition in Section 3 of [BASE64] (Josefsson, S., “The Base16, Base32, and Base64 Data Encodings,” July 2003.)); sent in reply to a <response/> element or an <auth/> element with initial response data.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.InvalidAuthzId">
            <summary>
            The authzid provided by the initiating entity is invalid, either because it is incorrectly formatted or because the initiating entity does not have permissions to authorize that ID; sent in reply to a <response/> element or an <auth/> element with initial response data.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.InvalidMechanism">
            <summary>
            The initiating entity did not provide a mechanism or requested a mechanism that is not supported by the receiving entity; sent in reply to an <auth/> element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.MalformedRequest">
            <summary>
            The request is malformed (e.g., the <auth/> element includes initial response data but the mechanism does not allow that, or the data sent violates the syntax for the specified SASL mechanism); sent in reply to an abort, auth, challenge, or response element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.MechanismTooWeak">
            <summary>
            The mechanism requested by the initiating entity is weaker than server policy permits for that initiating entity; sent in reply to a <response/> element or an <auth/> element with initial response data.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.NotAuthorized">
            <summary>
            The authentication failed because the initiating entity did not provide valid credentials (this includes but is not limited to the case of an unknown username); sent in reply to a <response/> element or an <auth/> element with initial response data.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.TemporaryAuthFailure">
            <summary>
            The authentication failed because of a temporary error condition within the receiving entity; sent in reply to an <auth/> element or <response/> element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Sasl.FailureCondition.UnknownCondition">
            <summary>
            Unknown Condition
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Mechanism">
            <summary>
            Represents a sasl mechanism
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Mechanism.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Sasl.Mechanism"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Sasl.Mechanism.#ctor(Matrix.Xmpp.Sasl.SaslMechanism)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Sasl.Mechanism"/> class.
            </summary>
            <param name="mechanism">The mechanism.</param>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.Mechanism.SaslMechanism">
            <summary>
            get or set the SASL mechanis as enum
            </summary>
            <value>The sasl mechanism.</value>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Mechanisms">
            <summary>
            SASL Mechanisms
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.Mechanisms.PrincipalHostname">
            <summary>
            XEP-0233 Principal Hostname for Sasl authentication.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.SaslEventArgs.Auto">
            <summary>
            Should the library automatically choose the most appropriate SASL mechanism?
            When set to false you have to specify the SASL mechanism manual.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.SaslEventArgs.SaslProperties">
            <summary>
            Extended properties required by some Sasl mechanisms
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Sasl.SaslEventArgs.CustomSaslProcessor">
            <summary>
            Gets or sets the custom SASL processor.
            </summary>
            <value>
            The custom sasl processor class.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.Sasl.Success">
            <summary>
            Sasl success
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Search.Search.Instructions">
            <summary>
            Gets or sets the instructions.
            </summary>
            <value>
            The instructions.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Search.Search.First">
            <summary>
            Gets or sets the firstname.
            </summary>
            <value>
            The first.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Search.Search.Last">
            <summary>
            Gets or sets the lastname.
            </summary>
            <value>
            The last.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Search.Search.Nick">
            <summary>
            Gets or sets the nickname.
            </summary>
            <value>
            The nick.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Search.Search.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Search.SearchItem.First">
            <summary>
            Gets or sets the firstname.
            </summary>
            <value>
            The firstname.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Search.SearchItem.Last">
            <summary>
            Gets or sets the lastname.
            </summary>
            <value>
            The lastname.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Search.SearchItem.Nick">
            <summary>
            Gets or sets the nickname.
            </summary>
            <value>
            The nickname.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Search.SearchItem.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.SecurityLabels.Color">
            <summary>
            CSS colors (W3C colors + "Orange")
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.SecurityLabels.DisplayMarking">
            <summary>
            Contains a display string for use by implementations which are unable to utilize the applicable security policy 
            to generate display markings.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.SecurityLabels.DisplayMarking.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.SecurityLabels.DisplayMarking"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.SecurityLabels.DisplayMarking.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground. Default is Black
            </summary>
            <value>
            The color of the foreground.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.SecurityLabels.DisplayMarking.BackgroundColor">
            <summary>
            Gets or sets the color of the background. Default is White.
            </summary>
            <value>
            The color of the background.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.SecurityLabels.Item">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.SecurityLabels.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.SecurityLabels.Item"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.SecurityLabels.Item.Selector">
            <summary>
            Gets or sets the selector.
            The selector represents the item's placement in a hierarchical organization of the items.
            If one item has a selecto, all items should have a selector.
            The value of the selector conforms to the selector-value ABNF production:
            </summary>
            <value>
            The selector.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.SecurityLabels.Item.Default">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Matrix.Xmpp.SecurityLabels.Item"/> is the default.
            One and only one of the items may be the default item. The client should default the label selection to this item in cases where the user has not selected an item.
            </summary>
            <value>
              <c>true</c> if default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.SecurityLabels.Item.SecurityLabel">
            <summary>
            Gets or sets the security label.
            </summary>
            <value>
            The security label.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.SecurityLabels.SecurityLabel">
            <summary>
            A XEP-0258 security label
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.SecurityLabels.SecurityLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.SecurityLabels.SecurityLabel"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.SecurityLabels.SecurityLabel.DisplayMarking">
            <summary>
            Gets or sets the display marking.
            </summary>
            <value>
            The display marking.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.SecurityLabels.SecurityLabel.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="M:Matrix.Xmpp.SecurityLabels.SecurityLabel.AddEquivalentLabel">
            <summary>
            Adds the equivalent label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.SecurityLabels.SecurityLabel.AddItem(Matrix.Xmpp.SecurityLabels.EquivalentLabel)">
            <summary>
            Adds the item.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:Matrix.Xmpp.SecurityLabels.SecurityLabel.AddItems(Matrix.Xmpp.SecurityLabels.EquivalentLabel[])">
            <summary>
            Adds the items.
            </summary>
            <param name="labels">The labels.</param>
        </member>
        <member name="M:Matrix.Xmpp.SecurityLabels.SecurityLabel.GetEquivalentLabels">
            <summary>
            Gets the equivalent labels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.SecurityLabels.SecurityLabel.SetItems(System.Collections.Generic.IEnumerable{Matrix.Xmpp.SecurityLabels.EquivalentLabel})">
            <summary>
            Sets the items.
            </summary>
            <param name="labels">The labels.</param>
        </member>
        <member name="M:Matrix.Xmpp.SecurityLabels.SecurityLabel.RemoveAllEquivalentLabels">
            <summary>
            Removes all equivalent labels.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Server.Iq.Error">
            <summary>
            Error object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Server.IqQuery`1">
            <summary>
            A class to create Iq queries with payloads of the given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Matrix.Xmpp.Server.IqQuery`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Server.IqQuery`1"/> class.
            A new id gets automatically created.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Server.IqQuery`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Server.IqQuery`1"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Matrix.Xmpp.Server.IqQuery`1.#ctor(Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Server.IqQuery`1"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Server.IqQuery`1.#ctor(Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Server.IqQuery`1"/> class.
            </summary>
            <param name="to">To.</param>
        </member>
        <member name="M:Matrix.Xmpp.Server.IqQuery`1.#ctor(Matrix.Jid,Matrix.Jid)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Server.IqQuery`1"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
        </member>
        <member name="M:Matrix.Xmpp.Server.IqQuery`1.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Server.IqQuery`1"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Matrix.Xmpp.Server.IqQuery`1.#ctor(Matrix.Jid,Matrix.Jid,Matrix.Xmpp.IqType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Server.IqQuery`1"/> class.
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Matrix.Xmpp.Server.Message.Error">
            <summary>
            Error object
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Server.PingIq.Ping">
            <summary>
            Ping object
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Server.Presence.Error">
            <summary>
            Error object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Server.Stream">
            <summary>
            Represents a XMPP Server to server stream header
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Server.Stream.#ctor">
            <summary>
            Initializes a Server Stream header.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Server.Stream.#ctor(System.Boolean)">
            <summary>
            Initializes a Server Stream header.
            </summary>
            <param name="includeDialbackNameSpaceDeclaration">if set to <c>true</c> includes dialback name space declaration.</param>
        </member>
        <member name="M:Matrix.Xmpp.Server.Stream.AddDialbackNameSpaceDeclaration">
            <summary>
            Adds the Dialback Namespace declaration to the stream element (xmlns:db='jabber:server:dialback')
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Shim.Header">
             <summary>
            <a href="http://xmpp.org/extensions/xep-0131.html">XEP-0131</a> SHIM Header
             </summary>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Header.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Shim.Header"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Header.#ctor(Matrix.Xmpp.Shim.HeaderNames,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Shim.Header"/> class.
            </summary>
            <param name="name">The header name.</param>
            <param name="val">The header value.</param>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Header.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Shim.Header"/> class.
            </summary>
            <param name="name">The header name.</param>
            <param name="val">The header value.</param>
        </member>
        <member name="P:Matrix.Xmpp.Shim.Header.Name">
            <summary>
            Gets the name of this header.
            </summary>
            <value>The header name.</value>
        </member>
        <member name="T:Matrix.Xmpp.Shim.HeaderNames">
            <summary>
            Enum HeaderNames
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Accept">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.AcceptCharset">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.AcceptEncoding">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.AcceptLanguage">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.AcceptRanges">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Age">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.AlertInfo">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Allow">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.AuthenticationInfo">
            <summary>
            see RFC 2617
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.CacheControl">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.CallId">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.CallInfo">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Classification">
            <summary>
            a level within a classification scheme
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Comments">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Connection">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Contact">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentDescription">
            <summary>
            see RFC 2045
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentDisposition">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentEncoding">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentId">
            <summary>
            see RFC 2045
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentLanguage">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentLength">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentLocation">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentMd5">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentRange">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentTransferEncoding">
            <summary>
            see RFC 2045
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ContentType">
            <summary>
            see RFC 2045 or RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Contributor">
            <summary>
            an entity other than the primary Creator who helped to create a resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Coverage">
            <summary>
            the spatial or temporal characteristics of a resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Created">
            <summary>
            date and time of stanza creation in ISO 8601 format
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Creator">
            <summary>
            the person or organization responsible for creating the content of a resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.CSeq">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Date">
            <summary>
            a string that conforms to the Date profile specified in XEP-0082
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.DateTime">
            <summary>
            a string that conforms to the DateTime profile specified in XEP-0082
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Description">
            <summary>
            a textual description of the content of a resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Distribute">
            <summary>
            whether or not the stanza may be further distributed
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ErrorInfo">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ETag">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Expect">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Expires">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Format">
            <summary>
            the data format of a resourcec (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Host">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Identifier">
            <summary>
            a string or number used to identity a resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.IfMatch">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.IfModifiedSince">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.IfNoneMatch">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.IfRange">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.IfUnmodifiedSince">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.InReplyTo">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Keywords">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Language">
            <summary>
            the language in expressing the content of a resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.LastModified">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Location">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.MaxForwards">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.MessageId">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.MimeVersion">
            <summary>
            see RFC 2045
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Organization">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Pragma">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Priority">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ProxyAuthenticate">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ProxyAuthorization">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Publisher">
            <summary>
            the entity responsible for making a resource available (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Range">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Received">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.RecordRoute">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.References">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Referer">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Relation">
            <summary>
            the identifier of a second resource related to a primary resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ReplyTo">
            <summary>
            see RFC 3261 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Require">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ResentBcc">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ResentCc">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ResentDate">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ResentFrom">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ResentMessageId">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ResentSender">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ResentTo">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.RetryAfter">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.ReturnPath">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Rfc2822Date">
            <summary>
            the datetime associated with an email message, SIP exchange, or HTTP request (RFC 2822)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Rights">
            <summary>
            a rights management statement, identifier, or link (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Route">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Sender">
            <summary>
            see RFC 2822
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Server">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Source">
            <summary>
            information about the original source of the present resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Store">
            <summary>
            whether or not the stanza may be stored or archived (XEP-0131)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Subject">
            <summary>
            the human-readable topic of a message or resource (RFC 2822 or RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Supported">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Te">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Time">
            <summary>
            a string that conforms to the Time profile specified in XEP-0082
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Timestamp">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Title">
            <summary>
            the name given to a resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Trailer">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.TransferEncoding">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Ttl">
            <summary>
            a time to live for the stanza, in seconds
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Type">
            <summary>
            the category of a resource (RFC 2413)
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Unsupported">
            <summary>
            see RFC 3261
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Upgrade">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Urgency">
            <summary>
            the time sensitivity of a stanza ("high", "medium", or "low")
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.UserAgent">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Vary">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Via">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Shim.HeaderNames.WwwAuthenticate">
            <summary>
            see RFC 2616
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Shim.Headers">
            <summary>
            <a href="http://xmpp.org/extensions/xep-0131.html">XEP-0131</a> Stanza Header collection onject
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Shim.Headers"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.AddHeader">
            <summary>
            Adds a new Header
            </summary>
            <returns>a new Header.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.AddHeader(Matrix.Xmpp.Shim.Header)">
            <summary>
            Adds the given Header
            </summary>
            <param name="header">The header.</param>
            <returns>returns the given Header</returns>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.AddHeader(Matrix.Xmpp.Shim.HeaderNames,System.String)">
            <summary>
            Add new Header
            </summary>
            <param name="name">header name</param>
            <param name="val">header value</param>
            <returns>Header.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.AddHeader(System.String,System.String)">
            <summary>
            Adds a new Header
            </summary>
            <param name="name">header name</param>
            <param name="val">header value</param>
            <returns>returns the new added header</returns>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.SetHeader(Matrix.Xmpp.Shim.HeaderNames,System.String)">
            <summary>
            Sets the header.
            </summary>
            <param name="name">The header name.</param>
            <param name="val">The header value.</param>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.SetHeader(System.String,System.String)">
            <summary>
            Sets the header.
            </summary>
            <param name="name">The header name.</param>
            <param name="val">The header value.</param>
        </member>
        <member name="P:Matrix.Xmpp.Shim.Headers.Item(Matrix.Xmpp.Shim.HeaderNames)">
            <summary>
            Gets the <see cref="T:Matrix.Xmpp.Shim.Header"/> with the specified name.
            </summary>
            <param name="name">The header name.</param>
            <returns>the Header.</returns>
        </member>
        <member name="P:Matrix.Xmpp.Shim.Headers.Item(System.String)">
            <summary>
            Gets the <see cref="T:Matrix.Xmpp.Shim.Header"/> with the specified name.
            </summary>
            <param name="name">The header name.</param>
            <returns>the Header.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.HasHeader(Matrix.Xmpp.Shim.HeaderNames)">
            <summary>
            Determines whether a header with the specified name exists.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the header exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.HasHeader(System.String)">
            <summary>
            Determines whether a header with the specified name exists.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the header exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Matrix.Xmpp.Shim.Headers.HasHeaders">
            <summary>
            Gets a value indicating whether this instance has any headers.
            </summary>
            <value><c>true</c> if this instance has headers; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.GetHeader(Matrix.Xmpp.Shim.HeaderNames)">
            <summary>
            Gets the header with the given header name.
            </summary>
            <param name="name">The header name.</param>
            <returns>Header.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.GetHeader(System.String)">
            <summary>
            Gets the header with the given header name.
            </summary>
            <param name="name">The header name.</param>
            <returns>Header.</returns>
        </member>
        <member name="M:Matrix.Xmpp.Shim.Headers.GetHeaders">
            <summary>
            Gets all headers.
            </summary>
            <returns>IEnumerable&lt;Header&gt;.</returns>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.Profile.FileTansfer.File.FileName">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.Profile.FileTansfer.File.Size">
            <summary>
            FileSize of the file.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.Profile.FileTansfer.File.Hash">
            <summary>
            a Hash checksum of the file
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.Profile.FileTansfer.File.Date">
            <summary>
            file date
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.Profile.FileTansfer.File.Description">
            <summary>
            is used to provide a sender-generated description of the file so the receiver can better understand what is being sent. 
            It MUST NOT be sent in the result.
            </summary>		 
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.Profile.FileTansfer.File.Range">
            <summary>
            Gets or sets the feature.
            </summary>
            <value>The feature.</value>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.Profile.FileTansfer.Range.Offset">
            <summary>
            Specifies the position, in bytes, to start transferring the file data from.
            This defaults to zero (0) if not specified.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.Profile.FileTansfer.Range.Length">
            <summary>
            Specifies the number of bytes to retrieve starting at offset.
            This defaults to the length of the file from offset to the end.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.StreamInitiation.SI">
            <summary>
            XEP-0095: Stream Initiation
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.SI.Id">
            <summary>
            An opaque identifier. 
            This value MUST be present on type='set', and MUST be a valid string. 
            This SHOULD NOT be sent back on type='result', since the Id provides the only context needed.
            This value is generated by the Sender, and the same value MUST be used throughout a session when talking to the Receiver.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.SI.MimeType">
            <summary>
            Iidentifies the MIME-type for the data across the stream.
            This value MUST be a valid MIME-type as registered with the Internet Assigned Numbers Authority (IANA) [3] 
            (specifically, as listed at "http://www.iana.org/assignments/media-types"). 
            During negotiation, this value SHOULD be present, and is otherwise not required. 
            If not included during negotiation, its value is assumed to be "binary/octect-stream".
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.SI.Profile">
            <summary>
            Defines the SI profile in use. This value MUST be present during negotiation,
            and is the namespace of the profile to use.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.SI.File">
            <summary>
            Gets or sets the file.
            </summary>
            <value>The file.</value>
        </member>
        <member name="P:Matrix.Xmpp.StreamInitiation.SI.Feature">
            <summary>
            Gets or sets the feature.
            </summary>
            <value>The feature.</value>
        </member>
        <member name="T:Matrix.Xmpp.StreamManagement.Ack.AckEventArgs">
            <summary>
            AckEventArgs, used for XMPP Stream management
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamManagement.Ack.AckEventArgs.Counter">
            <summary>
            Counter
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamManagement.Ack.Answer.LastHandledStanza">
            <summary>
            Identifies the last handled stanza (i.e., the last stanza that the receiver will acknowledge as having received).
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamManagement.Enable.MaxResumptionTime">
            <summary>
            The initiating entity's preferred maximum resumption time in seconds.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamManagement.Enable.StanzasBetweenAcks">
            <summary>
            The initiating entity's preferred number of stanzas between acks.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamManagement.Enabled.Id">
            <summary>
            the stream identifier.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamManagement.Resume.LastHandledStanza">
            <summary>
            The sequenze number of the last handled stanza of the previous connection.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamManagement.Resume.PreviousId">
            <summary>
            The SM-ID of the former stream.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.StreamManagement.StreamManagementEventArgs">
            <summary>
            StreamManagementEventArgs
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.StreamManagement.StreamManagementEventArgs.CanResume">
            <summary>
            Gets or sets a value indicating whether the server allows to resume the stream
            </summary>
            <value>
            <c>true</c> if the stream can be resumed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.StreamManagement.StreamManagementEventArgs.Id">
            <summary>
            Gets or sets the identifier of the stream.
            </summary>
            <value>
            The stream identifier.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.Stream.Error">
            <summary>
            Stream Errors &lt;stream:error&gt;
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.Error.Text">
            <summary>
            <para>
            The &lt;text/&gt; element is OPTIONAL. If included, it SHOULD be used only to provide descriptive or diagnostic information
            that supplements the meaning of a defined condition or application-specific condition. 
            </para>
            <para>
            It SHOULD NOT be interpreted programmatically by an application.
            It SHOULD NOT be used as the error message presented to a user, but MAY be shown in addition to the error message 
            associated with the included condition element (or elements).
            </para>
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.Features.StreamFeature.Optional">
            <summary>
            Is this feature optional?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.Features.StreamFeature.Required">
            <summary>
            Is this feature required?
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.UnknownCondition">
            <summary>
            unknown error condition
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.BadFormat">
            <summary>
            the entity has sent XML that cannot be processed; this error MAY be used instead of the more 
            specific XML-related errors, such as &lt;bad-namespace-prefix/&gt;, &lt;invalid-xml/&gt;, 
            &lt;restricted-xml/&gt;, &lt;unsupported-encoding/&gt;, and &lt;xml-not-well-formed/&gt;, 
            although the more specific errors are preferred.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.BadNamespacePrefix">
            <summary>
            the entity has sent a namespace prefix that is unsupported, or has sent no namespace prefix on an
            element that requires such a prefix (see XML Namespace Names and Prefixes (XML Namespace Names and Prefixes)).
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.Conflict">
            <summary>
            the server is closing the active stream for this entity because a new stream has been initiated 
            that conflicts with the existing stream.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.ConnectionTimeout">
            <summary>
            the entity has not generated any traffic over the stream for some period of time 
            (configurable according to a local service policy).
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.HostGone">
            <summary>
            the value of the 'to' attribute provided by the initiating entity in the stream header corresponds to a hostname that is no longer hosted by the server.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.HostUnknown">
            <summary>
            the value of the 'to' attribute provided by the initiating entity in the stream header does not
            correspond to a hostname that is hosted by the server.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.ImproperAddressing">
            <summary>
            a stanza sent between two servers lacks a 'to' or 'from' attribute (or the attribute has no value).
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.InternalServerError">
            <summary>
            the server has experienced a misconfiguration or an otherwise-undefined internal error 
            that prevents it from servicing the stream.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.InvalidFrom">
            <summary>
            the JID or hostname provided in a 'from' address does not match an authorized JID or 
            validated domain negotiated between servers via SASL or dialback, or between a client 
            and a server via authentication and resource binding.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.InvalidId">
            <summary>
            the stream ID or dialback ID is invalid or does not match an ID previously provided.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.InvalidNamespace">
            <summary>
            the streams namespace name is something other than "http://etherx.jabber.org/streams" or the 
            dialback namespace name is something other than "jabber:server:dialback" 
            (see XML Namespace Names and Prefixes (XML Namespace Names and Prefixes)).
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.InvalidXml">
            <summary>
            the entity has sent invalid XML over the stream to a server that performs validation.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.NotAuthorized">
            <summary>
            the entity has attempted to send data before the stream has been authenticated, or otherwise is not
            authorized to perform an action related to stream negotiation; the receiving entity MUST NOT process 
            the offending stanza before sending the stream error.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.PolicyViolation">
            <summary>
            the entity has violated some local service policy; the server MAY choose to specify the policy in the &lt;text/&gt; element or an application-specific condition element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.RemoteConnectionFailed">
            <summary>
            the server is unable to properly connect to a remote entity that is required for authentication or authorization.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.ResourceConstraint">
            <summary>
            the server lacks the system resources necessary to service the stream.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.RestrictedXml">
            <summary>
            the entity has attempted to send restricted XML features such as a comment, processing instruction, DTD, 
            entity reference, or unescaped character (see Restrictions (Restrictions)).
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.SeeOtherHost">
            <summary>
            the server will not provide service to the initiating entity but is redirecting traffic to another host; 
            the server SHOULD specify the alternate hostname or IP address (which MUST be a valid domain identifier)
            as the XML character data of the &lt;see-other-host/&gt; element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.SystemShutdown">
            <summary>
            the server is being shut down and all active streams are being closed.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.UndefinedCondition">
            <summary>
            the error condition is not one of those defined by the other conditions in this list; this error condition 
            SHOULD be used only in conjunction with an application-specific condition.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.UnsupportedEncoding">
            <summary>
            the initiating entity has encoded the stream in an encoding that is not supported by the server.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.UnsupportedStanzaType">
            <summary>
            the initiating entity has sent a first-level child of the stream that is not supported by the server.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.UnsupportedVersion">
            <summary>
            the value of the 'version' attribute provided by the initiating entity in the stream header specifies a 
            version of XMPP that is not supported by the server; the server MAY specify the version(s) it supports in the 
            &lt;text/&gt; element.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Stream.ErrorCondition.XmlNotWellFormed">
            <summary>
            the initiating entity has sent XML that is not well-formed as defined by the XML specs.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Stream.StreamFeatures">
            <summary>
            Summary description for Features.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.StartTls">
            <summary>
            StartTls stream feature
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.Mechanisms">
            <summary>
            Sasl mechanisms stream feature
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.Bind">
            <summary>
            Resource Bind stream feature
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.Session">
            <summary>
            Session stream feature
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.Compression">
            <summary>
            Cmmpression stream feature
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.Auth">
            <summary>
            The old Jabber style auth stream feature
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.Register">
            <summary>
            The registration stream feature
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.RosterVersioning">
            <summary>
            Gets or sets the roster versioning.
            </summary>
            <value>The roster versioning.</value>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.StreamManagement">
            <summary>
            Gets or sets the stream management.
            </summary>
            <value>The stream management.</value>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.Caps">
            <summary>
            The server capabilities
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.Bidi">
            <summary>
            Bidirectional Server-to-Server Connections
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.MessageArchiving">
            <summary>
            Gets or sets the server supports message archiving (XEP-0136).
            </summary>
            <value>
            The message archiving.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsCaps">
            <summary>
            Are Caps supported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsBind">
            <summary>
            Is resource binding supported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsStartTls">
            <summary>
            Is StartTls xupported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.TlsIsRequired">
            <summary>
            Gets a value indicating whether TLS is required.
            </summary>
            <value>
              <c>true</c> if TLS is required] otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsSession">
            <summary>
            Are sessions supported? This is old Jabebr stuff which should not be used anymore in XMPP.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsCompression">
            <summary>
            Is Stream Compression supported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsZlibCompression">
            <summary>
            Is ZLib Compression supported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsAuth">
            <summary>
            Is old jabber style authentication (XEP-0078: Non-SASL Authentication) supported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsRegistration">
            <summary>
            Is Registration supported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsRosterVersioning">
            <summary>
            Is roster versioning supported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsStreamManagement">
            <summary>
            Is stream management supported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsBidi">
            <summary>
            Are bidirectional Server-to-Server Connections supported?
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Stream.StreamFeatures.SupportsMessageArchiving">
            <summary>
            Is message archiving supported? (XEP-0136)
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Time.Time">
            <summary>
            XEP-0202: Entity Time
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Time.Time.UtcOffset">
            <summary>
            Gets or sets the UTC offset.
            </summary>
            <value>The UTC offset.</value>
        </member>
        <member name="P:Matrix.Xmpp.Time.Time.DateTime">
            <summary>
            Gets or sets the date time.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="M:Matrix.Xmpp.Time.Time.SetDateTimeNow">
            <summary>
            Sets the utc offset and time automatically.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Tls.Proceed">
            <summary>
            StartTls object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Tls.StartTls">
            <summary>
            StartTls object
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.MessageType">
            <summary>
            Enumeration that represents the type of a message
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageType.Normal">
            <summary>
            This in a normal message, much like an email. You don't expect a fast reply.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageType.Error">
            <summary>
            a error messages
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageType.Chat">
            <summary>
            is for chat like messages, person to person. Send this if you expect a fast reply. reply or no reply at all.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageType.GroupChat">
            <summary>
            is used for sending/receiving messages from/to a chatroom (IRC style chats) 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.MessageType.Headline">
            <summary>
            Think of this as a news broadcast, or RRS Feed, the message will normally have a URL and Description Associated with it.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.PresenceType">
            <summary>
            Enumeration for the Presence Type structure. 
            This enum is used to describe what type of Subscription Type the current subscription is.
            When sending a presence or receiving a subscription this type is used to easily identify the type of subscription it is.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Available">
            <summary>
            Used when one wants to send presence to someone/server/transport that you’re available. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Subscribe">
            <summary>
            Used to send a subscription request to someone.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Subscribed">
            <summary>
            Used to accept a subscription request.
            </summary>		
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Unsubscribe">
            <summary>
            Used to unsubscribe someone from your presence. 
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Unsubscribed">
            <summary>
            Used to deny a subscription request.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Unavailable">
            <summary>
            Used when one wants to send presence to someone/server/transport that you’re unavailable.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Invisible">
            <summary>
            Used when you want to see your roster, but don't want anyone on you roster to see you
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Visible">
            <summary>
            If a user chooses to become visible after being invisible, the client will send undirected presence with a type="visible" attribute.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Error">
            <summary>
            presence error
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.PresenceType.Probe">
            <summary>
            used in server to server protocol to request presences
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Show">
            <summary>
            Enumeration that represents the online state.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Show.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Show.Away">
            <summary>
            The entity or resource is temporarily away.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Show.Chat">
            <summary>
            The entity or resource is actively interested in chatting.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Show.DoNotDisturb">
            <summary>
            The entity or resource is busy (dnd = "Do Not Disturb").
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.Show.ExtendedAway">
            <summary>
            The entity or resource is away for an extended period (xa = "eXtended Away").
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.Tune.Tune">
            <summary>
            XEP-0118: User Tune
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Tune.Tune.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Tune.Tune"/> class.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Tune.Tune.Artist">
            <summary>
            Gets or sets the artist or performer of the song or piece.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Tune.Tune.Length">
            <summary>
            Gets or sets the duration of the song or piece in seconds.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Tune.Tune.Rating">
            <summary>
            Gets or sets the user's rating of the song or piece, from 1 (lowest) to 10 (highest).
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Tune.Tune.Source">
            <summary>
            Gets or sets the collection (e.g., album) or other source (e.g., a band website that hosts streams or audio files).
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Tune.Tune.Title">
            <summary>
            Gets or sets the title of the song or piece.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Tune.Tune.Track">
            <summary>
            Gets or sets a unique identifier for the tune; e.g., the track number within a collection or the specific URI for the object (e.g., a stream or audio file).
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Tune.Tune.Uri">
            <summary>
            gets or sets a URI or URL pointing to information about the song, collection, or artist.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Tune.Tune.ToPubSub">
            <summary>
            Creates the Pubsub XmppXElement for this Tune.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.Vcard.Address">
            <summary>
            
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.IsInternational">
            <summary>
            Gets or sets a value indicating whether this instance is an international address.
            </summary>
            <value>
            	<c>true</c> if this instance is an international address; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.IsDomestic">
            <summary>
            Gets or sets a value indicating whether this instance is a domestic delivery address.
            </summary>
            <value>
            	<c>true</c> if this instance is a domestic delivery address; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.IsHome">
            <summary>
            Gets or sets a value indicating whether this instance is a home address.
            </summary>
            <value><c>true</c> if this instance is a home address; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.IsWork">
            <summary>
            Gets or sets a value indicating whether this instance is a work address.
            </summary>
            <value><c>true</c> if this instance is a work address; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.IsPostal">
            <summary>
            Gets or sets a value indicating whether this instance is a postal address.
            </summary>
            <value><c>true</c> if this instance is a postal address; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.IsParcel">
            <summary>
            Gets or sets a value indicating whether this instance is a parcel delivery address.
            </summary>
            <value><c>true</c> if this instance is parcel delivery address; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.IsPreferred">
            <summary>
            Gets or sets a value indicating whether this instance is a preferred address.
            </summary>
            <value>
            	<c>true</c> if this instance is a preferred address; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.PoBox">
            <summary>
            Gets or sets the po box.
            </summary>
            <value>The po box.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.ExtraAddress">
            <summary>
            Gets or sets the extra address.
            </summary>
            <value>The extra address.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.Street">
            <summary>
            Gets or sets the street.
            </summary>
            <value>The street.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.Locality">
            <summary>
            Gets or sets the locality.
            </summary>
            <value>The locality.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.Region">
            <summary>
            Gets or sets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.PostCode">
            <summary>
            Gets or sets the post code.
            </summary>
            <value>The post code.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Address.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Email.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Email"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Email.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Email"/> class.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Email.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Email"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="preferred">if set to <c>true</c> this is a preferred address.</param>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Email.Address">
            <summary>
            The email Adress
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Email.IsHome">
            <summary>
            Gets or sets a value indicating whether this instance is a home email address.
            </summary>
            <value><c>true</c> if this instance is a home email address; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Email.IsWork">
            <summary>
            Gets or sets a value indicating whether this instance is a work email address.
            </summary>
            <value><c>true</c> if this instance is a work email address; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Email.IsInternet">
            <summary>
            Gets or sets a value indicating whether this instance is an internet (SMTP) email address.
            </summary>
            <value>
            	<c>true</c> if this instance is an internet (SMTP) email address; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Email.IsX400">
            <summary>
            Gets or sets a value indicating whether this instance an X.400 service email address.
            </summary>
            <value><c>true</c> if this instance is an X.400 service email address; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Email.IsPreferred">
            <summary>
            Gets or sets a value indicating whether this instance is a preferred email address.
            </summary>
            <value>
            	<c>true</c> if this instance is a preferred email address; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.Vcard.Photo">
            <summary>
            Photo in <see cref="T:Matrix.Xmpp.Vcard.Vcard"/>
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Photo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Photo"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Photo.#ctor(System.Byte[],System.Drawing.Imaging.ImageFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Photo"/> class.
            </summary>
            <param name="imageBytes">The image bytes.</param>
            <param name="imageFormat">The image format.</param>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Photo.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Photo"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Photo.Image">
            <summary>
            Gets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Photo.Type">
            <summary>
            Gets or sets the image type.
            </summary>
            <value>The image type.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Photo.Binval">
            <summary>
            Gets or sets the binval.
            </summary>
            <value>The binval.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Photo.Extval">
            <summary>
            Gets or sets the extval.
            </summary>
            <value>The extval.</value>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Photo.SetImageFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Sets the image format.
            </summary>
            <param name="imgFormat">The img format.</param>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Photo.SetImageBytes(System.Byte[])">
            <summary>
            Sets the image bytes.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="T:Matrix.Xmpp.Vcard.Telephone">
            <summary>
            Telephone number object in <see cref="T:Matrix.Xmpp.Vcard.Vcard"/>
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Telephone.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Telephone"/> class.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Telephone.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Telephone"/> class.
            </summary>
            <param name="number">The number.</param>
            <param name="preferred">if set to <c>true</c> this is a preferred number.</param>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.Number">
            <summary>
            Gets or sets the telephone number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsHome">
            <summary>
            Gets or sets a value indicating whether this is a home numer.
            </summary>
            <value><c>true</c> if this instance is a home number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsWork">
            <summary>
            Gets or sets a value indicating whether this is a work numer.
            </summary>
            <value><c>true</c> if this instance is a work number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsVoice">
            <summary>
            Gets or sets a value indicating whether this instance is a voice numer.
            </summary>
            <value><c>true</c> if this instance is a voice number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsFax">
            <summary>
            Gets or sets a value indicating whether this instance is a fax numer.
            </summary>
            <value><c>true</c> if this instance is a fax number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsPager">
            <summary>
            Gets or sets a value indicating whether this instance is a pager number.
            </summary>
            <value><c>true</c> if this instance is a pager number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsMessagingService">
            <summary>
            Gets or sets a value indicating whether this instance is a messaging service number.
            </summary>
            <value><c>true</c> if this instance is a messaging service number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsCellular">
            <summary>
            Gets or sets a value indicating whether this instance is a cellular number.
            </summary>
            <value>
            	<c>true</c> if this instance is a cellular number; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsVideo">
            <summary>
            Gets or sets a value indicating whether this instance is a video number.
            </summary>
            <value><c>true</c> if this instance is video number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsBBS">
            <summary>
            Gets or sets a value indicating whether this instance is a BBS number.
            </summary>
            <value><c>true</c> if this instance is a BBSnumber ; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsModem">
            <summary>
            Gets or sets a value indicating whether this instance is a modem number.
            </summary>
            <value><c>true</c> if this instance is a modem number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsISDN">
            <summary>
            Gets or sets a value indicating whether this instance is a ISDN number.
            </summary>
            <value><c>true</c> if this instance is a ISDN number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsPCS">
            <summary>
            Gets or sets a value indicating whether this instance is a personal communication services number.
            </summary>
            <value><c>true</c> if this instance is a personal communication services number; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Telephone.IsPreferred">
            <summary>
            Gets or sets a value indicating whether this instance is preferred umber.
            </summary>
            <value>
            	<c>true</c> if this instance is preferreda preferred number; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.Vcard.Update.X">
            <summary>
            Vcard update
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Update.X.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Update.X"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Update.X.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.Vcard.Update.X"/> class.
            </summary>
            <param name="photo">The photo.</param>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Update.X.Photo">
            <summary>
            Gets or sets the photo hash.
            </summary>
            <value>The photo.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Vcard.Fullname">
            <summary>
            Gets or sets the fullname.
            </summary>
            <value>The fullname.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Vcard.Nickname">
            <summary>
            Gets or sets the nickname.
            </summary>
            <value>The nickname.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Vcard.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Vcard.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Vcard.Role">
            <summary>
            Gets or sets the role.
            </summary>
            <value>The role.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Vcard.Birthday">
            <summary>
            Gets or sets the birthday.
            </summary>
            <value>The birthday.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Vcard.Jid">
            <summary>
            Gets or sets the jid.
            </summary>
            <value>The jid.</value>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Vcard.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Vcard.Telephones">
            <summary>
            Gets  a collection of <see cref="T:Matrix.Xmpp.Vcard.Telephone"/> numbers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Vcard.AddTelephone(Matrix.Xmpp.Vcard.Telephone)">
            <summary>
            Adds a <see cref="T:Matrix.Xmpp.Vcard.Telephone"/> number.
            </summary>
            <param name="telephone">The telephone.</param>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Vcard.GetAddresses">
            <summary>
            Gets a collection of <see cref="T:Matrix.Xmpp.Vcard.Address"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Vcard.AddAddress(Matrix.Xmpp.Vcard.Address)">
            <summary>
            Adds a <see cref="T:Matrix.Xmpp.Vcard.Address"/>.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Vcard.GetEmails">
            <summary>
            Gets a colection of <see cref="T:Matrix.Xmpp.Vcard.Email"/> addresses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.Vcard.Vcard.AddEmail(Matrix.Xmpp.Vcard.Email)">
            <summary>
            Adds a <see cref="T:Matrix.Xmpp.Vcard.Email"/> address.
            </summary>
            <param name="email">The email.</param>
        </member>
        <member name="P:Matrix.Xmpp.Vcard.Vcard.Photo">
            <summary>
            The <see cref="P:Matrix.Xmpp.Vcard.Vcard.Photo"/>.
            </summary>
            <value>The photo.</value>
        </member>
        <member name="T:Matrix.Xmpp.Version.Version">
            <summary>
            XEP-0092: Software Version
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.Version.Version.Name">
            <summary>
            Gets the name of the software product.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</returns>
        </member>
        <member name="P:Matrix.Xmpp.Version.Version.Ver">
            <summary>
            Gets or sets the software version information.
            </summary>
            <value>
            The ver.
            </value>
        </member>
        <member name="P:Matrix.Xmpp.Version.Version.Os">
            <summary>
            Gets or sets the operating system of teh software.
            </summary>
            <value>
            The os.
            </value>
        </member>
        <member name="M:Matrix.Xmpp.XData.Data.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.XData.Data"/> class.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.XData.Data.#ctor(Matrix.Xmpp.XData.FormType)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.XData.Data"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Matrix.Xmpp.XData.Data.Type">
            <summary>
            Type of thie XDATA Form.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.XData.Data.Reported">
            <summary>
            Gets or sets the reported.
            </summary>
            <value>The reported.</value>
        </member>
        <member name="M:Matrix.Xmpp.XData.Data.AddItem">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.Data.AddItem(Matrix.Xmpp.XData.Item)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.Data.GetItems">
            <summary>
            Gets a list of all form items
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.Xmpp.XData.Field.Description">
            <summary>
            The data of this element provides a natural-language 
            description of the field, intended for presentation in a user-agent (e.g., as a 
            &quot;tool-tip&quot;, help button, or explanatory text provided near the field). The &lt;desc/&gt; 
            element SHOULD NOT contain newlines (the \n and \r characters), since layout is 
            the responsibility of a user agent, and any handling of newlines (e.g., 
            presentation in a user interface) is unspecified herein. (Note: To provide a 
            description of a field, it is RECOMMENDED to use a &lt;desc/&gt; element rather than a 
            separate &lt;field/&gt; element of type &quot;fixed&quot;.)
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.XData.Field.Required">
            <summary>
            Is this field a required field?
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.GetValue">
            <summary>
            The value of the field.
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.SetValue(System.String)">
            <summary>
            Set a value
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.SetValueBool(System.Boolean)">
            <summary>
            Set the value of boolean fields
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.GetValueBool">
            <summary>
            Get the value of boolean fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.GetValueJid">
            <summary>
            Returns the value as Jif for the Jid fields. 
            Or null when the value is not a valid Jid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.AddValue(System.String)">
            <summary>
            Adds a value
            </summary>
            <remarks>
            you can call this function multiple times to add values to "multi" fields
            </remarks> 
            <param name="val"></param>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.AddValue(System.Boolean)">
            <summary>
            Adds a boolean value (1 = true, 0 = false)
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.AddValues(System.String[])">
            <summary>
            Adds multiple values to the already existing values from a string array
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.SetValues(System.String[])">
            <summary>
            Adds multiple values. All already existing values will be removed
            </summary>
            <param name="vals"></param>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.Xmpp.XData.Field.Values">
            <summary>
            Gets or sets any the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.AddOption(System.String,System.String)">
            <summary>
            Add a option
            </summary>
            <param name="label"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.AddOption">
            <summary>
            Add a option
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.AddOption(Matrix.Xmpp.XData.Option)">
            <summary>
            Add a option
            </summary>
            <param name="opt"></param>
        </member>
        <member name="M:Matrix.Xmpp.XData.Field.GetOptions">
            <summary>
            Get all options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Matrix.Xmpp.XData.FieldContainer">
            <summary>
            Bass class for all XData classes that contain XData fields
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.Xmpp.XData.FieldContainer"/> class.
            </summary>
            <param name="tagname">The tagname.</param>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.AddField">
            <summary>
            Add a field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.AddField(Matrix.Xmpp.XData.Field)">
            <summary>
            Add a fields
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.AddField(System.String,System.String)">
            <summary>
            Add a field with the given var and value.
            </summary>
            <param name="var">The var name.</param>
            <param name="val">The value of the field</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.AddField(System.String,System.String,Matrix.Xmpp.XData.FieldType)">
            <summary>
            Add a field with the given var, value and tyoe.
            </summary>
            <param name="var">The var name.</param>
            <param name="val">The value of the field</param>
            <param name="fieldType">The type of the field.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.HasField(System.String)">
            <summary>
            Determines whether the specified field exists.
            </summary>
            <param name="var">The var.</param>
            <returns>
            	<c>true</c> if the specified var has field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.GetField(System.String)">
            <summary>
            Retrieve a field with the given "var"
            </summary>
            <param name="var"></param>
            <returns>the field or null when the field does not exist</returns>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.RemoveField(System.String)">
            <summary>
            Remove fields
            </summary>
            <param name="var">var of the fields </param>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.RemoveAllFields">
            <summary>
            Remove all fields
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.XData.FieldContainer.GetFields">
            <summary>
            Gets a list of all form fields
            </summary>
            <returns></returns>
        </member>
        <member name="P:Matrix.Xmpp.XData.FieldContainer.Fields">
            <summary>
            Gets an array of all form fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="T:Matrix.Xmpp.XData.FieldType">
            <summary>
            Field Types
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.Unknown">
            <summary>
            a unknown fieldtype
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.Boolean">
            <summary>
            The field enables an entity to gather or provide an either-or choice between two options. The allowable values are 1 for yes/true/assent and 0 for no/false/decline. The default value is 0.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.Fixed">
            <summary>
            The field is intended for data description (e.g., human-readable text such as "section" headers) rather than data gathering or provision. The <value/> child SHOULD NOT contain newlines (the \n and \r characters); instead an application SHOULD generate multiple fixed fields, each with one <value/> child.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.Hidden">
            <summary>
            The field is not shown to the entity providing information, but instead is returned with the form.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.JidMulti">
            <summary>
            The field enables an entity to gather or provide multiple Jabber IDs.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.JidSingle">
            <summary>
            The field enables an entity to gather or provide a single Jabber ID.	
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.ListMulti">
            <summary>
            The field enables an entity to gather or provide one or more options from among many.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.ListSingle">
            <summary>
            The field enables an entity to gather or provide one option from among many.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.TextMulti">
            <summary>
            The field enables an entity to gather or provide multiple lines of text.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.TextPrivate">
            <summary>
            password style textbox.
            The field enables an entity to gather or provide a single line or word of text, which shall be obscured in an interface (e.g., *****).
            </summary>		
        </member>
        <member name="F:Matrix.Xmpp.XData.FieldType.TextSingle">
            <summary>
            The field enables an entity to gather or provide a single line or word of text, which may be shown in an interface. This field type is the default and MUST be assumed if an entity receives a field type it does not understand.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.XData.FormType">
            <summary>
            Form Types
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FormType.Form">
            <summary>
            The forms-processing entity is asking the forms-submitting entity to complete a form.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FormType.Submit">
            <summary>
            The forms-submitting entity is submitting data to the forms-processing entity.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FormType.Cancel">
            <summary>
            The forms-submitting entity has cancelled submission of data to the forms-processing entity.
            </summary>
        </member>
        <member name="F:Matrix.Xmpp.XData.FormType.Result">
            <summary>
            The forms-processing entity is returning data (e.g., search results) to the forms-submitting entity, or the data is a generic data set.
            </summary>
        </member>
        <member name="T:Matrix.Xmpp.XData.Item">
            <summary>
            Used in XData seach.
            includes the headers of the search results
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.XData.Option.Label">
            <summary>
            Label of the option
            </summary>
        </member>
        <member name="M:Matrix.Xmpp.XData.Reported.#ctor">
            <summary>
            The  &lt;reported/&gt; element can be understood as a "table header" describing the following data.
            </summary>
        </member>
        <member name="P:Matrix.Xmpp.XHtmlIM.Body.InnerXHtml">
            <summary>
            Gets or sets the inner X-HTML.
            </summary>
            <remarks>The content must be valid X-Html, otherwise an exception will be thrown.</remarks>
            <value>The inner X-HTML.</value>
        </member>
        <member name="P:Matrix.Xmpp.XHtmlIM.Html.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="T:Matrix.Dns.DnsFreeType">
            <summary>
            Possible arguments for the DnsRecordListFree api
            </summary>
            <remarks>
            This enum is used by the DnsRecordListFree API.
            </remarks>
        </member>
        <member name="F:Matrix.Dns.DnsFreeType.FreeFlat">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsFreeType.FreeRecordList">
            <summary>
            Frees the record list returned by the DnsQuery API
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.SUCCESS">
            <summary>
            Successful query
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.UNSPECIFIED_ERROR">
            <summary>
            Base DNS error code
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.MASK">
            <summary>
            Base DNS error code
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.FORMAT_ERROR">
            <summary>
            DNS server unable to interpret format.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.SERVER_FAILURE">
            <summary>
            DNS server failure.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.NAME_ERROR">
            <summary>
            DNS name does not exist.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.NOT_IMPLEMENTED">
            <summary>
            DNS request not supported by name server.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.REFUSED">
            <summary>
            DNS operation refused.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.YXDOMAIN">
            <summary>
            DNS name that ought not exist, does exist.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.YXRRSET">
            <summary>
            DNS RR set that ought not exist, does exist.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.NXRRSET">
            <summary>
            DNS RR set that ought to exist, does not exist.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.NOTAUTH">
            <summary>
            DNS server not authoritative for zone.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.NOTZONE">
            <summary>
            DNS name in update or prereq is not in zone.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.BADSIG">
            <summary>
            DNS signature failed to verify.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.BADKEY">
            <summary>
            DNS bad key.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.BADTIME">
            <summary>
            DNS signature validity expired.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.PACKET_FMT_BASE">
            <summary>
            Packet format
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.NO_RECORDS">
            <summary>
            No records found for given DNS query.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.BAD_PACKET">
            <summary>
            Bad DNS packet.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.NO_PACKET">
            <summary>
            No DNS packet.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.RCODE">
            <summary>
            DNS error, check rcode.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryReturnCode.UNSECURE_PACKET">
            <summary>
            Unsecured DNS packet.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.STANDARD">
            <summary>
            Standard
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.ACCEPT_TRUNCATED_RESPONSE">
            <summary>
            Accept truncated response
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.USE_TCP_ONLY">
            <summary>
            Use TCP only
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.NO_RECURSION">
            <summary>
            No recursion
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.BYPASS_CACHE">
            <summary>
            Bypass cache
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.NO_WIRE_QUERY">
            <summary>
            Cache only
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.NO_LOCAL_NAME">
            <summary>
            Directs DNS to ignore the local name.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.NO_HOSTS_FILE">
            <summary>
            Prevents the DNS query from consulting the HOSTS file.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.NO_NETBT">
            <summary>
            Prevents the DNS query from using NetBT for resolution.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.WIRE_ONLY">
            <summary>
            Directs DNS to perform a query using the network only, 
            bypassing local information.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.TREAT_AS_FQDN">
            <summary>
            Treat as FQDN
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.ALLOW_EMPTY_AUTH_RESP">
            <summary>
            Allow empty auth response
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.DONT_RESET_TTL_VALUES">
            <summary>
            Don't reset TTL values
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.RESERVED">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.CACHE_ONLY">
            <summary>
            obsolete.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsQueryType.RETURN_MESSAGE">
            <summary>
            Directs DNS to return the entire DNS response message.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecord.Next">
            <summary>
            Gets or sets the next record.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecord.Name">
            <summary>
            Gets or sets the name of the record.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecord.RecordType">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecord.DataLength">
            <summary>
            Gets or sets the data length.
            </summary>
        </member>
        <member name="T:Matrix.Dns.DnsRecord.DnsRecordFlags">
            <summary>
            Represents the flags of a <see cref="T:Matrix.Dns.DnsRecord"/>.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecord.DnsRecordFlags.DW">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecord.DnsRecordFlags.S">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecord.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecord.Ttl">
            <summary>
            Gets or sets the TTL count
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecord.Reserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.A">
            <summary>
            Address record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.NS">
            <summary>
            Name Server record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.MD">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.MF">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.CNAME">
            <summary>
            Canonical Name record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.SOA">
            <summary>
            Start Of Authority record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.MB">
            <summary>
            Mailbox record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.MG">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.MR">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.NULL">
            <summary>
            NULL data for a DNS resource record.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.WKS">
            <summary>
            Well-Known Service record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.PTR">
            <summary>
            Pointer record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.HINFO">
            <summary>
            Host Information record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.MINFO">
            <summary>
            mail information (MINFO) record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.MX">
            <summary>
            Mail Exchange record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.TEXT">
            <summary> 
            Text record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.RP">
            <summary>
            Responsible Person record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.AFSDB">
            <summary>
            AFS Data Base location record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.X25">
            <summary>
            X25
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.ISDN">
            <summary>
            ISDN
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.RT">
            <summary>
            Route Through
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.NSAP">
            <summary>
            Network service access point address record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.NSAPPTR">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.SIG">
            <summary>
            Cryptographic signature record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.KEY">
            <summary>
            Public key record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.PX">
            <summary>
            Pointer to X.400/RFC822 information record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.GPOS">
            <summary>
            Geographical position record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.AAAA">
            <summary>
            IPv6 address record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.LOC">
            <summary>
            Location record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.NXT">
            <summary>
            Next record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.SRV">
            <summary>
            Server record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.ATMA">
            <summary>
            ATM address (ATMA) record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.TKEY">
            <summary>
            TKEY resource record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.TSIG">
            <summary>
            secret key transaction authentication (TSIG) record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.IXFR">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.AXFR">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.MAILB">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.MAILA">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.ALL">
            <summary>
            All records
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.ANY">
            <summary>
            Any records
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.WINS">
            <summary>
            WINS record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.WINSR">
            <summary>
            Windows Internet Name Service reverse-lookup record
            </summary>
        </member>
        <member name="F:Matrix.Dns.DnsRecordType.NBSTAT">
            <summary>
            Windows Internet Name Service reverse-lookup record
            </summary>
        </member>
        <member name="M:Matrix.Dns.DnsRequest.DnsQuery(System.String,Matrix.Dns.DnsRecordType,Matrix.Dns.DnsQueryType,System.IntPtr,System.IntPtr@,System.IntPtr)">
            <summary>
            http://msdn.microsoft.com/library/en-us/dns/dns/dnsquery.asp
            </summary>
        </member>
        <member name="M:Matrix.Dns.DnsRequest.DnsRecordListFree(System.IntPtr,Matrix.Dns.DnsFreeType)">
            <summary>
            http://msdn.microsoft.com/library/en-us/dns/dns/dnsrecordlistfree.asp
            </summary>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.UseTCPOnly">
            <summary>
            Gets or sets whether or not to use TCP only for the query.
            </summary>
            <value>Boolean indicating whether or not to use TCP instead of UDP for the query</value>
            <remarks>
            If set to true, the DNS query will be done via TCP rather than UDP. This
            is useful if the DNS service you are trying to reach is running on
            TCP but not on UDP.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.AcceptTruncatedResponse">
            <summary>
            Gets or sets whether or not to accept truncated results — 
            does not retry under TCP.
            </summary>
            <value>Boolean indicating whether or not to accept truncated results.</value>
            <remarks>
            Determines wherher or not the server will be re-queried in the event
            that a response was truncated.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.NoRecursion">
            <summary>
            Gets or sets whether or not to perform an iterative query
            </summary>
            <value>Boolean indicating whether or not to use recursion
            to resolve the query.</value>
            <remarks>
            Specifically directs the DNS server not to perform 
            recursive resolution to resolve the query.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.BypassCache">
            <summary>
            Gets or sets whether or not to bypass the resolver cache 
            on the lookup. This must be set to true if you specified
            a server in the Servers collection.
            </summary>
            <value>Boolean indicating whether or not to bypass the cache
            and use the list of servers in the Servers
            collection.
            </value>
            <remarks>
            Setting this to true allows you to specify one or more DNS servers
            to query instead of querying the local DNS cache and server.
            If false is set, the list of servers is ignored and the local DNS
            cache and server is used to resolve the query.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.QueryCacheOnly">
            <summary>
            Gets or sets whether or not to direct DNS to perform a 
            query on the local cache only
            </summary>
            <value>Boolean indicating whether or not to only use the
            DNS cache to resolve a query.</value>
            <remarks>
            This option allows you to query the local DNS cache only instead
            of making a DNS request over either UDP or TCP.
            This property represents the logical opposite of the
            <see cref="P:Matrix.Dns.DnsRequest.WireOnly"/> property.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.WireOnly">
            <summary>
            Gets or sets whether or not to direct DNS to perform a 
            query using the network only, bypassing local information.
            </summary>
            <value>Boolean indicating whether or not to use the
            network only instead of local information.</value>
            <remarks>
            This property represents the logical opposite of the
            <see cref="P:Matrix.Dns.DnsRequest.QueryCacheOnly"/> property.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.NoLocalName">
            <summary>
            Gets or sets whether or not to direct DNS to ignore the 
            local name.
            </summary>
            <value>Boolean indicating whether or not to ignore the local name.</value>
            <remarks>
            Determines how the DNS query handles local names.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.NoHostsFile">
            <summary>
            Gets or sets whether or not to prevent the DNS query from 
            consulting the HOSTS file.
            </summary>
            <value>Boolean indicating whether or not to deny access to
            the HOSTS file when querying.</value>
            <remarks>
            Determines how the DNS query handles accessing the HOSTS file when
            querying for DNS information.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.NoNetbt">
            <summary>
            Gets or sets whether or not to prevent the DNS query from 
            using NetBT for resolution.
            </summary>
            <value>Boolean indicating whether or not to deny access to
            NetBT during the query.</value>
            <remarks>
            Determines how the DNS query handles accessing NetBT when
            querying for DNS information.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.QueryReturnMessage">
            <summary>
            Gets or sets whether or not to direct DNS to return 
            the entire DNS response message.
            </summary>
            <value>Boolean indicating whether or not to return the entire
            response.</value>
            <remarks>
            Determines how the DNS query expects the response to be
            received from the server.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.TreatAsFQDN">
            <summary>
            Gets or sets whether or not to prevent the DNS 
            response from attaching suffixes to the submitted 
            name in a name resolution process.
            </summary>
            <value>Boolean indicating whether or not to allow
            suffix attachment during resolution.</value>
            <remarks>
            Determines how the DNS server handles suffix appending
            to the submitted name during name resolution.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.DontResetTTLValues">
            <summary>
            Gets or sets whether or not to store records 
            with the TTL corresponding to the minimum value 
            TTL from among all records
            </summary>
            <value>Boolean indicating whether or not to
            use TTL values from all records.</value>
            <remarks>
            Determines how the DNS query handles TTL values.
            </remarks>
        </member>
        <member name="P:Matrix.Dns.DnsRequest.Domain">
            <summary>
            Gets or sets the domain to query. The domain must be a hostname,
            not an IP address.
            </summary>
            <remarks>
            This method is expecting a hostname, not an IP address. The
            system will fail with a DnsException when
            <see cref="M:Matrix.Dns.DnsRequest.GetResponse(Matrix.Dns.DnsRecordType)"/> is called if Domain is an IP address.
            </remarks>
            <value>String representing the domain that DNS information
            is desired for. This should be set to a hostname and not an
            IP Address.</value>
        </member>
        <member name="M:Matrix.Dns.DnsRequest.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Matrix.Dns.DnsRequest"/>
            </summary>
            <remarks>
            The <see cref="P:Matrix.Dns.DnsRequest.Domain"/> property is set to null
            and all other properties have their default value
            of false, except for <see cref="P:Matrix.Dns.DnsRequest.TreatAsFQDN"/> which has a value
            of true. The system is set to use the local DNS
            server for all queries.
            </remarks>
        </member>
        <member name="M:Matrix.Dns.DnsRequest.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Matrix.Dns.DnsRequest"/>
            </summary>
            <remarks>
            The <see cref="P:Matrix.Dns.DnsRequest.Domain"/> property is set to the domain
            argument and all other properties have their default value
            of false, except for <see cref="P:Matrix.Dns.DnsRequest.TreatAsFQDN"/> which has a value
            of true. The system is set to use the local DNS
            server for all queries.
            </remarks>
            <param name="domain">The hostname that DNS information is desired for.
            This should not be an ip address. For example: yahoo.com</param>
        </member>
        <member name="M:Matrix.Dns.DnsRequest.GetResponse(Matrix.Dns.DnsRecordType)">
            <summary>
            Queries the local DNS server for information about 
            this instance of <see cref="T:Matrix.Dns.DnsRequest"/> and returns
            the response as a DnsResponse
            </summary>
            <returns>A DnsResponse object containing the response 
            from the DNS server.</returns>
            <exception cref="T:System.NotSupportedException">
            The code is running on a machine lesser than Windows 2000
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:Matrix.Dns.DnsRequest.Domain"/> property is null
            </exception>
            <remarks>
            Returns a DnsResponse representing the response
            from the DNS server or one of the exceptions noted in the
            exceptions area, the most common of which is the DnsException.
            </remarks>
        </member>
        <member name="T:Matrix.Dns.Record">
            <summary>
            A simple base class for the different ResourceRecords, ANAME, MX, SOA, NS etc.
            </summary>
        </member>
        <member name="T:Matrix.Dns.SRVRecord">
            <summary>
            Summary description for SRVRecord.
            </summary>
        </member>
        <member name="F:Matrix.Dns.tSRVRecord.NameNext">
            <summary>
            Gets or sets the name
            </summary>
            <remarks>
            Pointer to a string representing the target host. 
            </remarks>
        </member>
        <member name="F:Matrix.Dns.tSRVRecord.Priority">
            <summary>
            Gets or sets the priority
            </summary>
            <remarks>
            Priority of the target host specified in the owner name. Lower numbers imply higher priority. 
            </remarks>
        </member>
        <member name="F:Matrix.Dns.tSRVRecord.Weight">
            <summary>
            Gets or sets the weight
            </summary>
            <remarks>
            Weight of the target host. Useful when selecting among hosts with the same priority. The chances of using this host should be proportional to its weight. 
            </remarks>
        </member>
        <member name="F:Matrix.Dns.tSRVRecord.Port">
            <summary>
            Gets or sets the port
            </summary>
            <remarks>
            Port used on the terget host for the service. 
            </remarks>
        </member>
        <member name="F:Matrix.Dns.tSRVRecord.Pad">
            <summary>
            Reserved.
            </summary>
            <remarks>
            Reserved. Used to keep pointers DWORD aligned. 
            </remarks>
        </member>
        <member name="T:Matrix.ExceptionEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Matrix.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.ExceptionEventArgs" /> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:Matrix.ExceptionEventArgs.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="T:Matrix.EventArgs">
            <summary>
            EventArgs is the base class for classes containing event data.
            </summary>
        </member>
        <member name="T:Matrix.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="M:Matrix.Id.Reset">
            <summary>
            Reset the id counter to MX_1 again
            </summary>
        </member>
        <member name="P:Matrix.Id.Prefix">
            <summary>
            to Save Bandwidth on Mobile devices you can change the prefix
            null is also possible to optimize Bandwidth usage
            </summary>
        </member>
        <member name="F:Matrix.IdType.Numeric">
            <summary>
            Numeric Id's are generated by increasing a long value
            </summary>
        </member>
        <member name="F:Matrix.IdType.Guid">
            <summary>
            Guid Id's are unique, Guid packet Id's should be used for server and component applications,
            or apps which very long sessions (multiple days, weeks or years)
            </summary>
        </member>
        <member name="T:Matrix.IqFilter">
            <summary>
            Use the IqFilter to listen for Iqs from given Jids.
            </summary>
        </member>
        <member name="M:Matrix.IqFilter.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.IqFilter"/> class.
            </summary>
            <param name="con">The con.</param>
        </member>
        <member name="M:Matrix.IqFilter.XmppConOnIq(System.Object,Matrix.Xmpp.Client.IqEventArgs)">
            <summary>
            An IQ Element is received. Now check if its one we are looking for and
            raise the event in this case.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Matrix.IqFilter.SendIq(Matrix.Xmpp.Client.Iq,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs},System.Object)">
            <summary>
            Send an IQ Request and store the object with callback in the Hashtable
            </summary>
            <param name="iq">The iq to send</param>
            <param name="callback">the callback function which gets raised for the response</param>
            <param name="state">additional state object</param>
        </member>
        <member name="M:Matrix.IqFilter.SendIq(Matrix.Xmpp.Client.Iq,System.EventHandler{Matrix.Xmpp.Client.IqEventArgs})">
            <summary>
            Sends the iq.
            </summary>
            <param name="iq">The iq.</param>
            <param name="cb">The callback.</param>
        </member>
        <member name="M:Matrix.IqFilter.SendIqSynchronous(Matrix.Xmpp.Client.Iq)">
            <summary>
            Sends the iq synchronous with default timeour settings.
            </summary>
            <param name="iq">The iq.</param>
            <returns></returns>
        </member>
        <member name="M:Matrix.IqFilter.SendIqSynchronous(Matrix.Xmpp.Client.Iq,System.Int32)">
            <summary>
            Sends the iq synchronous.
            </summary>
            <param name="iq">The iq.</param>
            <param name="timeout">The timeout in milliseconds.</param>
            <returns>Returns the iq result or null when timed out.</returns>
        </member>
        <member name="T:Matrix.Jid">
            <summary>
            Class for building and handling XMPP Id's (JID's)
            </summary>  
        </member>
        <member name="M:Matrix.Jid.#ctor">
            <summary>
            Create a new Jid object.
            </summary>
        </member>
        <member name="M:Matrix.Jid.#ctor(System.String)">
            <summary>
            Create a new Jid object from a string. The input string must be a valid jabberId and already prepared with stringprep.
            Otherwise use one of the other constructors with escapes the node and prepares the gives balues with the stringprep
            profiles
            </summary>
            <param name="jid">XMPP ID, in string form examples: user@server/Resource, user@server</param>
        </member>
        <member name="M:Matrix.Jid.#ctor(System.String,System.String,System.String)">
            <summary>
            Builds a new Jid object.
            StringPrep is applied to the input string.
            </summary>
            <param name="user">XMPP User part</param>
            <param name="server">XMPP Domain part</param>
            <param name="resource">XMPP Resource part</param>        
        </member>
        <member name="M:Matrix.Jid.op_Implicit(System.String)~Matrix.Jid">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Matrix.Jid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Matrix.Jid.op_Implicit(Matrix.Jid)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Matrix.Jid"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="jid">The jid.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Matrix.Jid.Parse(System.String)">
            <summary>
            Parses a JabberId from a string. If we parse a jid we assume it's correct and already prepared via stringprep.
            </summary>
            <param name="fullJid">jid to parse as string</param>
            <returns>true if the jid could be parsed, false if an error occured</returns>
        </member>
        <member name="P:Matrix.Jid.User">
            <summary>
            the user part of the JabberId.
            </summary>
        </member>
        <member name="P:Matrix.Jid.Server">
            <summary>
            Only Server
            </summary>
        </member>
        <member name="P:Matrix.Jid.Resource">
            <summary>
            Only the Resource field, null for none
            </summary>        
        </member>
        <member name="M:Matrix.Jid.SetUser(System.String)">
            <summary>
            Sets the User part of the jid. Nodeprep and jid escaping is applied to the input string.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Matrix.Jid.SetServer(System.String)">
            <summary>
            Sets the Server part of the jid. Nameprep is applied to the input string.
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:Matrix.Jid.SetResource(System.String)">
            <summary>
            Sets the Resource part of the jid.
            ResourcePrep is applied to the input string.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="P:Matrix.Jid.Bare">
            <summary>
            The Bare Jid only (user@server).
            </summary>		
        </member>
        <member name="M:Matrix.Jid.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Matrix.Jid.System#IEquatable{Matrix#Jid}#Equals(Matrix.Jid)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Jid.Equals(Matrix.Jid)">
            <summary>
            Compares Full jid (user@server/resource)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Jid.Equals(Matrix.Jid,System.Collections.Generic.IComparer{Matrix.Jid})">
            <summary>
            Compares his with the given IComparer
            </summary>
            <param name="other"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Jid.CompareTo(Matrix.Jid)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Matrix.Jid.EscapeNode(System.String)">
            <summary>
            <para>
            Escape a node according to XEP-0106
            </para>
            <para>
            <a href="http://www.xmpp.org/extensions/xep-0106.html">http://www.xmpp.org/extensions/xep-0106.html</a>
            </para>        
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Jid.UnescapeNode(System.String)">
            <summary>
            <para>
            unescape a node according to XEP-0106
            </para>
            <para>
            <a href="http://www.xmpp.org/extensions/xep-0106.html">http://www.xmpp.org/extensions/xep-0106.html</a>
            </para>        
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.Jid.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Matrix.StreamType.Client">
            <summary>
            client to server connection
            </summary>
        </member>
        <member name="F:Matrix.StreamType.Component">
            <summary>
            component connection
            </summary>
        </member>
        <member name="P:Matrix.XmppException.Code">
            <summary>
            The Error code
            </summary>
        </member>
        <member name="P:Matrix.XmppException.Stanza">
            <summary>
            the Stanza which raised this exception
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnReceiveXml">
            <summary>
            debug handler for incoming xml
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnSendXml">
            <summary>
            debug handler for outgoing xml
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnXmlError">
            <summary>
            There was an Error in the XmlStream, this error normally disconnects the xml stream
            </summary>    
        </member>
        <member name="E:Matrix.XmppStream.OnStreamError">
            <summary>
            A &lt;stream:error&gt; occured in the stream
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnError">
            <summary>
            
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnValidateCertificate">
            <summary>
            Use this handler to validate the server certificate
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnLogin">
            <summary>
            Occurs after sucessful sasl authentication.
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnStreamManagementEnabled">
            <summary>
            Occurs after XEP-198 Stream Management was enabled.
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnStreamManagementStanzaReceived">
            <summary>
            Occurs after a stanza was received and reports the "stanza in" count to the client for later stream resumption.
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnResumed">
            <summary>
            Occurs after sucessful Stream resumption.
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnResumeFailed">
            <summary>
            Occurs when stream resumption failed.
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnTls">
            <summary>
            Occurs after securing the stream with TLS.
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnAuthError">
            <summary>
            When Sasl authentication failed
            </summary>
            <remarks>
            This does not close the stream. Its up to the implementor to close the xmpp stream or try to authenticate again with 
            other SASL mechanisms or credentials.
            </remarks>
        </member>
        <member name="E:Matrix.XmppStream.OnClose">
            <summary>
            the xmpp session was closed
            </summary>      
        </member>
        <member name="E:Matrix.XmppStream.OnCreateWebRequest">
            <summary>
            Callback when a webrequest gets cretaed for BOSH, you can add there your own stuff like
            proxies, cookies etc... then.
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnStreamStart">
            <summary>
            Start of the Xmpp Xml Stream
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnStreamElement">
            <summary>
            A stream element was received
            </summary>
        </member>
        <member name="E:Matrix.XmppStream.OnStreamEnd">
            <summary>
            A Xmpp Xml Stream ended
            </summary>
        </member>
        <member name="F:Matrix.XmppStream.streamType">
            <summary>
            type of the stream, client, component, server....
            based on the streamtype this class handles some stuff different
            </summary>
        </member>
        <member name="F:Matrix.XmppStream.outgoingStreamHeader">
            <summary>
            Outgoing stream element
            </summary>
        </member>
        <member name="F:Matrix.XmppStream.incomingStreamHeader">
            <summary>
            incoming tream element
            </summary>
        </member>
        <member name="F:Matrix.XmppStream.deflater">
            <summary>
            is used to compress data
            </summary>
        </member>
        <member name="F:Matrix.XmppStream.inflater">
            <summary>
            is used to decompress data
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether this stream is authenticated.
            </summary>
            <value>
            <c>true</c> if this stream is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Matrix.XmppStream.ProxyUser">
            <summary>
            The Proxy username.
            <remarks>
            </remarks>
            This property is ignored when BOSH gets used.
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.ProxyPass">
            <summary>
            The Proxy password.
            <remarks>
            </remarks>
            This property is ignored when BOSH gets used.
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.ProxyType">
            <summary>
            The Proxy Type.
            <remarks>
            </remarks>
            This property is ignored when BOSH gets used.
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.ProxyHostname">
            <summary>
            The Proxy hostname.
            <remarks>
            </remarks>
            This property is ignored when BOSH gets used.
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.ProxyPort">
            <summary>
            The Proxy Port.
            <remarks>
            </remarks>
            This property is ignored when BOSH gets used.
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.SocketConnectTimeout">
            <summary>
            Gets or sets the socket connect timeout in milliseconds.
            This applies only when the Transport is set to sockets
            </summary>
            <value>
            The socket connect timeout.
            </value>
        </member>
        <member name="P:Matrix.XmppStream.StreamActive">
            <summary>
            Gets a value indicating whether the XMPP stream is active or not.
            </summary>
            <value><c>true</c> if XMPP stream is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Matrix.XmppStream.XmppDomain">
            <summary>
            the xmpp server domain (user@jabber.org)
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.Hostname">
            <summary>
            The host or ip on which the xmpp server is running.
            You can set this manual or use AutoResolveHostname which resolves the host
            with SRV records
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.Port">
            <summary>
            Port number, normally there is no need to change this
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.OldStyleSsl">
            <summary>
            Old style SSL support. This is deprecated in XMPP and StartTls should be used instead.
            But there are still some very old servers on the network which don't support StartTls but legacy SSL.
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.Uri">
            <summary>
            Bosh Uri when Transport is BOSH
            </summary>        
        </member>
        <member name="P:Matrix.XmppStream.Transport">
            <summary>
            Transport layer used for the XMPP stream
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.ResolveSrvRecords">
            <summary>
            Automatically resolves SRV records when set to true.
            Default value is true for MatriX editions which support SRV records.
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.KeepAliveInterval">
            <summary>
            Gets or sets the keep alive interval.
            Set -1 to disable keep alives.
            </summary>
            <value>The keep alive interval in seconds.</value>
        </member>
        <member name="P:Matrix.XmppStream.Password">
            <summary>
            The password for authentication
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.AutoInvoke">
            <summary>
            Should MatriX automatically invoke all MatriX events when required? Default value is true. 
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.TlsProtocols">
            <summary>
            The Tls protocol versions which will be used to upgrade the Stream to Tls on XMPP's StartTls method.
            </summary>
            <value>
            The TLS protocols.
            </value>
        </member>
        <member name="P:Matrix.XmppStream.Compressed">
            <summary>
            is compression enabled on this stream?
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.Id">
            <summary>
            Id of the current XMPP stream
            </summary>
        </member>
        <member name="P:Matrix.XmppStream.Version">
            <summary>
            the XMPP version
            </summary>
        </member>
        <member name="M:Matrix.XmppStream.Invoke(System.Action)">
            <summary>
            Invokes the specified delegate with the Dispather.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Matrix.XmppStream.InitCompression">
            <summary>
            Initialize compression stuff (Inflater, Deflater)
            </summary>
        </member>
        <member name="M:Matrix.XmppStream.Compress(System.Byte[])">
            <summary>
            Compress bytes
            </summary>
            <param name="bIn"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.XmppStream.Decompress(System.Byte[],System.Int32)">
            <summary>
            Decompress bytes
            </summary>
            <param name="bIn"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Matrix.XmppStream.SendStreamFooter">
            <summary>
            Sends the stream footer to close the xml stream (&lt;/stream:stream&gt;)
            </summary>
        </member>
        <member name="M:Matrix.XmppStream.Close">
            <summary>
            Closed the XMPP stream
            </summary>
        </member>
        <member name="M:Matrix.XmppStream.Open">
            <summary>
            Open the XMPP stream
            </summary>
            <remarks>
            this method is asynchronous
            </remarks>
        </member>
        <member name="M:Matrix.XmppStream.IncrementOutgoingStanzas(Matrix.Xml.XmppXElement)">
            <summary>
            increments the outgoing stanza counter for stream management acks
            </summary>
            <param name="el"></param>
        </member>
        <member name="M:Matrix.XmppStream.IncrementIncomingStanzas(Matrix.Xml.XmppXElement)">
            <summary>
            increments the incoming stanza counter for stream management acks
            </summary>
            <param name="el"></param>
        </member>
        <member name="M:Matrix.XmppStream.Send(Matrix.Xml.XmppXElement)">
            <summary>
            Send a XmppXElement over the connection
            </summary>
            <param name="el">the XmppXElement to send.</param>
        </member>
        <member name="M:Matrix.XmppStream.SendAndAck(Matrix.Xml.XmppXElement)">
            <summary>
            Send a XmppXElement over the connection and request an ack when supported by this stream.
            </summary>
            <param name="el">the XmppXElement to send.</param>
        </member>
        <member name="M:Matrix.XmppStream.SendAndAck(Matrix.Xml.XmppXElement,System.EventHandler{Matrix.Xmpp.StreamManagement.Ack.AckEventArgs})">
            <summary>
            Send a XmppXElement over the connection and request an ack when supported by this stream.
            </summary>
            <param name="el">the XmppXElement to send.</param>
            <param name="cb">Callback to raise on ack</param>
        </member>
        <member name="M:Matrix.XmppStream.SendAndAck(Matrix.Xml.XmppXElement,System.EventHandler{Matrix.Xmpp.StreamManagement.Ack.AckEventArgs},System.Object)">
            <summary>
            Send a XmppXElement over the connection and request an ack when supported by this stream.
            </summary>
            <param name="el">the XmppXElement to send.</param>
            <param name="cb">Callback to raise on ack</param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.XmppStream.Send(Matrix.Xml.XmppXElement,System.Boolean,System.EventHandler{Matrix.Xmpp.StreamManagement.Ack.AckEventArgs},System.Object)">
            <summary>
            Send a XmppXElement over the connection with the ability to request an ack
            </summary>
            <param name="el">the XmppXElement to send.</param>
            <param name="requestAck">Should an ack be requested?</param>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Matrix.XmppStream.SendData(System.String)">
            <summary>
            Send data over the wire on the socket
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Matrix.XmppStream.SendData(Matrix.Xml.XmppXElement)">
            <summary>
            only used in BoshSocket
            </summary>
            <param name="el"></param>
        </member>
        <member name="M:Matrix.XmppStream.DoFireOnCreateBoshSession(System.Object,Matrix.Net.BoshSessionRequestEventArgs)">
            <summary>
            fires the OnCreateBoshSession event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Matrix.Net.BoshSessionRequestEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Matrix.XmppStream.DoFireOnTls">
            <summary>
            fires the OnTls event.
            </summary>
        </member>
        <member name="M:Matrix.XmppStream.FindDispatcher">
            <summary>
            Checks and sets the dispatcher.
            </summary>
        </member>
        <member name="M:Matrix.XmppStream.LookupSrvRecords">
            <summary>
            Lookup cloent srv records
            </summary>
        </member>
        <member name="M:Matrix.XmppStream.PickSrvRecord(System.Collections.Generic.List{Matrix.Dns.Record})">
            <summary>
            Picks one of the SRV records.
            priority and weight are evaluated by the following algorithm.
            </summary>
            <returns>SRVRecord</returns>
        </member>
        <member name="M:Matrix.XmppStream.KeepAliveTick(System.Object)">
            <summary>
            Keep alive timer callback
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:Matrix.XPathEventArgs">
            <summary>
            EventArs for XPath handlers
            </summary>
        </member>
        <member name="P:Matrix.XPathEventArgs.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Matrix.XPathFilter">
            <summary>
            Filter Xmpp Stanzas with XPath expressions
            </summary>
        </member>
        <member name="M:Matrix.XPathFilter.#ctor(Matrix.Xmpp.Client.XmppClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Matrix.XPathFilter"/> class.
            </summary>
            <param name="con">The con.</param>
        </member>
        <member name="P:Matrix.XPathFilter.XmlNamespaceManager">
            <summary>
            Gets the XmlNamespaceManager.
            </summary>
            <value>XmlNamespaceManager.</value>
        </member>
        <member name="M:Matrix.XPathFilter.Add(System.String,System.EventHandler{Matrix.XPathEventArgs})">
            <summary>
            Adds the specified XPath filter.
            </summary>
            <param name="expression">The XPath expression.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Matrix.XPathFilter.Add(System.String,System.EventHandler{Matrix.XPathEventArgs},System.Object)">
            <summary>
            Adds the specified XPath filter.
            </summary>
            <param name="expression">The XPath expression.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Matrix.XPathFilter.Add(System.String,System.EventHandler{Matrix.XPathEventArgs},System.Object,System.Boolean)">
            <summary>
            Adds the specified XPath filter.
            </summary>
            <param name="expression">The XPath expression.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="onceAndForget">if set to <c>true</c> then this rule applies only once and gets auomatically deleted.</param>
        </member>
    </members>
</doc>
